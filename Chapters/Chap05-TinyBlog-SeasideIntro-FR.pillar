!! Commencer avec Seaside

Nous commençons par définir une interface telle que les utilisateurs la verrons. Dans un prochain chapitre nous développerons une interface d'administration que le possesseur du blog utilisera. Nous allons définir des composants Seaside *http://www.seaside.st* dont l'ouvrage de référence est disponible en ligne à *http://book.seaside.st*. Les premiers chapitres de *http://book.seaside.st* peuvent vous aider et compléter efficacement ce tutoriel.

Le travail présenté dans la suite est indépendant de celui sur Voyage et sur la base de données MongoDB.
Vous pouvez charger le code des chapitres précédents en suivant les instructions indiquées dans le dernier chapitre.


+Lancer le serveur.>file://figures/RunningSeaside.png|width=50|label=RunningSeaside+


!!!Démarrer Seaside
Seaside est déjà chargé dans l'image Pharo, sinon relisez le premier chapitre. Il existe deux façons pour démarrer Seaside. La première consiste à exécuter le code suivant :

[[[
ZnZincServerAdaptor startOn: 8080.
]]]

La deuxième façon est graphique via l'outil Seaside Control Panel (World Menu>Tools>Seaside Control Panel).
Dans le menu contextuel de cet outil (clic droit), cliquez sur "add adaptor..." pour ajoutez un serveur ==ZnZincServerAdaptor==, puis définissez le port (e.g. 8080) sur lequel le serveur doit fonctionner (comme illustré dans la figure *@RunningSeaside*). En ouvrant un navigateur web à l'URL *http://localhost:8080*, vous devez voir s'afficher la page d'accueil de Seaside comme sur la figure *@SeasideWebStart*.

+Vérification que Seaside fonctionne.>file://figures/SeasideWebStart.png|width=75|label=SeasideWebStart+

+Accès à la bibliothèque Bootstrap.>file://figures/SeasideBootstrap.png|width=75|label=bootstrap+

!!!Bootstrap for Seaside

La bibliothèque Bootstrap est totalement accessible depuis Seaside comme nous allons le montrer.
Pour parcourir les nombreux exemples, cliquer sur le lien ""bootstrap"" dans la liste des applications servies par Seaside ou pointer votre navigateur sur le lien *http://localhost:8080/bootstrap*. Vous devez obtenir l'écran de la figure *@bootstrap*.

Cliquer sur le lien ""Examples"" au bas de la page et vous pouvez ainsi voir les éléments graphiques ainsi que le code pour les obtenir comme montré par la figure *@examplebootstrap*. 

+Comprendre un élément et son code en Bootstrap.>file://figures/TBSAlert.png|width=75|label=examplebootstrap+



!!!!Bootstrap

Le dépôt de code et la documentation de la bibliothèque Bootstrap pour Pharo est disponible ici: 
*http://smalltalkhub.com/#!/~TorstenBergmann/Bootstrap*.
Une démo en ligne est disponible à l'adresse : *http://pharo.pharocloud.com/bootstrap*. Cette bibliothèque a déjà été chargée dans l'image PharoWeb utilisée dans ce tutoriel.


!!!Point d'entrée de l'application

Créez la classe ==TBApplicationRootComponent== qui est le point d'entrée de l'application. Elle sert à l'enregistrement de l'application au sein du serveur d'application Seaside.

[[[
WAComponent subclass: #TBApplicationRootComponent
   instanceVariableNames: ''
   classVariableNames: ''
   package: 'TinyBlog-Components'
]]]


Nous déclarons l'application au serveur Seaside, en définissant coté classe, dans le protocole =='initialization'== la méthode ==initialize== suivante. On en profite pour intégrer les dépendances du framework Bootstrap (les fichiers css et js seront stockés dans l'application).

[[[
TBApplicationRootComponent class >> initialize
   "self initialize"
   | app |
   app := WAAdmin register: self asApplicationAt: 'TinyBlog'.
   app
      addLibrary: JQDeploymentLibrary;
      addLibrary: JQUiDeploymentLibrary;
      addLibrary: TBSDeploymentLibrary
]]]

Exécuter ==TBApplicationRootComponent initialize== pour forcer l'exécution de la méthode ==initialize==. En effet les méthodes ==initialize== de classe ne sont automatiquement exécutées que l'on du chargement de la classe. Ici nous venons juste de la définir et donc il est nécessaire de l'exécuter pour en voir les bénéfices.

Les méthodes de classe ==initialize== ne sont invoquées automatiquement que lors du chargement de la classe.

Ajoutons également la méthode ==canBeRoot== afin de préciser que la classe ==TBApplicationRootComponent== n'est pas qu'un simple composant Seaside mais qu'elle représente notre application Web.
Elle sera donc instanciée dès qu'un utilisateur se connecte sur l'application.

[[[
TBApplicationRootComponent class >> canBeRoot
   ^ true
]]]

+TinyBlog est bien enregistrée.>file://figures/BrowseApplications.png|width=75|label=BrowseApplications+

Une connexion sur le serveur Seaside ("Browse the applications installed in your image") permet de vérifier que l'application TinyBlog est bien enregistrée comme le montre la figure *@BrowseApplications*.

!!!Premier rendu simple 

Ajoutons maintenant une méthode d'instance ==renderContentOn:== dans le protocole ==rendering== afin de vérifier que notre application répond bien.

[[[
TBApplicationRootComponent >> renderContentOn: html
   html text: 'TinyBlog'
]]]

En se connectant avec un navigateur sur *http://localhost:8080/TinyBlog*, la page affichée doit être similaire à celle sur la figure *@EmptyPage*.

+Une page quasi vide mais servie par Seaside.>file://figures/TinyBlog-EmptyPage2.png|width=75|label=EmptyPage+


Ajoutons maintenant des informations dans l'entête de la page HTML afin que TinyBlog ait un titre et soit une application HTML5. 

[[[
TBApplicationRootComponent >> updateRoot: anHtmlRoot
   super updateRoot: anHtmlRoot.
   anHtmlRoot beHtml5.
   anHtmlRoot title: 'TinyBlog'
]]]


Le message ==title:== permet de configurer le titre du document affiché dans la fenêtre du navigateur. Le composant ==TBApplicationRootComponent== est le composant principal de l'application, il ne fait que du rendu graphique limité.
Dans le futur, il contiendra des composants et les affichera :
Comme par exemple, les composants principaux de l'application permettant l'affichage des posts pour les lecteurs du blog mais également des composants pour administrer le blog et ses posts. 


!!! Architecture

Nous sommes maintenant prêts à définir les composants visuels de notre application Web. Afin de vous donner une vision d'ensemble nous montrons comment chaque composant est responsable d'une partie de l'application (Figure *@ComponentOverview*) et comment ces composants s'intègre au sein de l'architecture (simple) du système (Figure *@ApplicationArchitecture*).

!!!! Premier apercu des composants

La figure *@ComponentOverview* montre les différents composants que nous allons développer et où ils se situent.

+Les composants composant l'application TinyBlog (en mode non admin).>file://figures/ComponentOverview.pdf|width=75|label=ComponentOverview+

!!!! Eléments

Pour vous permettre de suivre le développement incrémental 
de l'application, nous décrivons son architecture dans la figure *@ApplicationArchitecture*.

+Architecture de TinyBlog.>file://figures/ApplicationArchitecture.pdf|width=75|label=ApplicationArchitecture+

- ==ApplicationRootComponent== est le point d'entrée pour le serveur d'application. Ce composant contient des composants héritant tous de la classe abstraite ==ScreenComponent== que nous allons définir dans le prochain chapitre. 

- ==ScreenComponent== est la racine d'héritage des composants utilisateurs ou admin. Il est composé d'un header et aussi est conceptuellemment en contact avec l'authentification. 

- ==PostsListComponent== est le composant principal affichant les blogs (il est composé d'instance de  ==PostComponent==), il gère aussi les catégories. 

- ==AdminComponent== est le composant principal gérant les aspects d'administration. Il créera des rapports instance de ==PostsReport== en utilisant Magritte.


!!! Conclusion 

Nous sommes prêts à développer les composants décrits. Comme le processus est un peu linéaire n'hésitez pas à revenir sur cette architecture afin de comprendre 
le composant que vous nous proposons de développer. 





