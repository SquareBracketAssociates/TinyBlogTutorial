!! Des composants web pour TinyBlog

Dans ce chapitre, commençons par définir une interface publique permettant d'afficher les bulletins (posts) du blog. Dans un prochain chapitre, nous développerons une interface d'administration pour le ou les auteurs du blog.

Si vous avez le sentiment d'être un peu perdu, la figure *@AssociationArchitectureUser* vous montre les composants sur lesquels nous allons travailler dans ce chapitre. 

+L'architecture des composants utilisateurs (par opposition à administration).>file://figures/ApplicationArchitectureUser.pdf|width=75|label=AssociationArchitectureUser+

Le travail présenté dans la suite est indépendant de celui sur Voyage et sur la base de données MongoDB.
Les instructions pour charger le code des chapitres précédents sont disponibles dans le dernier chapitre.

!!! Composants visuels 

Nous sommes maintenant prêts à définir les composants visuels de notre application Web. La figure *@ComponentOverview* montre les différents composants que nous allons développer et où ils se situent.

+Les composants composant l'application TinyBlog.>file://figures/ComponentOverview.pdf|width=75|label=ComponentOverview+

!!!!Le composant TBScreenComponent

Le composant ==TBApplicationRootComponent== contiendra des composants sous-classes de la classe abstraite ==TBScreenComponent==. Cette classe nous permet de factoriser les comportements que nous souhaitons partager entre tous nos composants.

[[[
WAComponent subclass: #TBScreenComponent
   instanceVariableNames: ''
   classVariableNames: ''
   package: 'TinyBlog-Components'
]]]

Les différents composants d'interface de TinyBlog ont besoin d'accéder aux règles métier de l'application. Dans le protocole 'accessing', créons une méthode ==blog== qui retourne une instance de ==TBBlog== (ici notre singleton). Notez que cette méthode pourrait renvoyer l'instance de blog avec laquelle elle a été configurée au préalable.

[[[
TBScreenComponent >> blog
   "Return the current blog. In the future we will ask the
   session to return the blog of the currently logged in user."
   ^ TBBlog current
]]]

En inspectant l'objet blog retourné par ==TBBlog current==, vérifier qu'il contient bien des bulletins (posts). Si ce n'est pas le cas, exécuter :

[[[
	TBBlog createDemoPosts
]]]

Par la suite, si l'on souhaite étendre TinyBlog pour qu'un utilisateur puisse avoir plusieurs blogs, il suffira de modifier cette méthode pour utiliser des informations stockées dans la session active (Voir ==TBSession== dans le chapitre suivant).

Définissez la méthode ==renderContentOn:== de ce composant comme suit temporairement. Notez que pour l'instant, nous n'affichons pas ce composant
donc rafraichir votre browser ne vous montre rien de nouveau et c'est normal.

[[[
TBScreenComponent >> renderContentOn: html
   html text: 'Hello from TBScreenComponent'
]]]

!!!Utilisation du composant Screen

Bien que le composant ==TBScreenComponent== n'ait pas vocation à être utilisé directement, nous allons l'utiliser de manière temporaire pendant que nous développons les autres composants. 
Nous ajoutons la variable d'instance ==main== dans la classe ==TBApplicationRootComponent==. 
[[[
WAComponent subclass: #TBApplicationRootComponent
	instanceVariableNames: 'main'
	classVariableNames: ''
	package: 'TinyBlog-Components'
]]]

+Le composant ==ApplicationRootComponent== utilise de manière temporaire le composant ==ScreenComponent== qui a un ==HeaderComponent==.>file://figures/ComponentRelationship1.pdf|width=75|label=compt1+

Nous initialisons cette variable d'instance dans la méthode ==initialize== suivante et redéfinissons la méthode ==children==. Nous obtenons la situation décrite par la figure *@compt1*.


[[[
TBApplicationRootComponent >> initialize
   super initialize.
   main := TBScreenComponent new
]]]


[[[
TBApplicationRootComponent >> renderContentOn: html
   html render: main
]]]

Nous déclarons aussi la relation de contenu en retournant le composant référencé par la variable ==main== parmi les enfants de ==TBApplicationRootComponent==.
[[[
TBApplicationRootComponent >> children
   ^ { main }
]]]

Si vous rafraichissez votre browser, vous allez voir l'affichage produit par le sous-composant ==TBScreenComponent== qui affiche pour l'instant le texte: ==Hello from TBScreenComponent==.

!!!Pattern de définition  de composants

Nous allons souvent utiliser la même façon de procéder:
- nous définissons d'abord la classe et le comportement d'un nouveau composant;
- puis, nous allons y faire référence depuis la classe qui utilisera ce composant pour satisfaire les contraintes de Seaside;
- en particulier, nous exprimons la relation entre un composant et un sous-composant en redéfinissant la méthode ==children==.


!!!Définition du composant TBHeaderComponent

Définissons une en-tête commune à toutes les pages de TinyBlog dans un composant nommé ==TBHeaderComponent==.
Ce composant sera inséré dans la partie supérieure de chaque composant (==TBPostsListComponent== par exemple). Nous appliquons le schéma décrit ci-dessus: définition d'une classe, référence depuis la classe utilisatrice, et redéfinition de la méthode ==children==.

Nous définissons d'abord sa classe, puis nous allons y faire référence depuis la classe qui l'utilise. Ce faisant, nous allons montrer comment un composant exprime sa relation à un sous-composant. 

[[[
WAComponent subclass: #TBHeaderComponent
   instanceVariableNames: ''
   classVariableNames: ''
   package: 'TinyBlog-Components'
]]]


!!!Utilisation du composant header

Complétons maintenant la classe ==TBScreenComponent== afin qu'elle affiche une instance de ==TBHeaderComponent==.
Pour rappel, ==TBScreenComponent== est la super-classe abstraite (nous l'utilisons directement pour l'instant) de tous nos composants dans l'architecture finale. Cela signifie que toutes les sous-classes de  ==TBScreenComponent== seront des composants avec une en-tête.
Pour éviter d'instancier systématiquement le composant ==TBHeaderComponent== à chaque fois qu'un composant est appelé, créons et initialisons une variable d'instance ==header== dans ==TBScreenComponent==.

[[[
WAComponent subclass: #TBScreenComponent
   instanceVariableNames: 'header'
   classVariableNames: ''
   package: 'TinyBlog-Components'
]]]

Créons une méthode ==initialize== dans le protocole 'initialization' :

[[[
TBScreenComponent >> initialize
   super initialize.
   header := TBHeaderComponent new
]]]

!!!Relation composite-composant

En Seaside, les sous-composants d'un composant doivent être retournés par le composite en réponse au message ==children==. Définissons que l'instance du composant ==TBHeaderComponent== est un enfant de ==TBScreenComponent== dans la hiérarchie des composants Seaside (et non entre classes Pharo). Dans cet exemple, nous spécialisons la méthode ==children== pour qu'elle retourne une collection contenant un seul élément qui est l'instance de ==TBHeaderComponent== référencée depuis la variable ==header==.

[[[
TBScreenComponent >> children
   ^ { header }
]]]

!!!Rendu visuel de la barre de navigation

Affichons maintenant le composant dans la méthode ==renderContentOn:== (protocole 'rendering') :

[[[
TBScreenComponent >> renderContentOn: html
   html render: header
]]]

Si vous rafraichissez votre navigateur web, rien ne se passe car le composant ==TBHeaderComponent==
n'a pas de rendu visuel. Pour cela, définissons la méthode ==renderContentOn:== chargée d'afficher l'entête comme suit :

[[[
TBHeaderComponent >> renderContentOn: html
   html tbsNavbar beDefault with: [
      html tbsNavbarBrand
         url: '#';
         with: 'TinyBlog' ]
]]]

L'entête (header) est affichée à l'aide d'une barre de navigation Bootstrap.
Si vous faites un rafraichissement de l'application dans votre navigateur web vous devez voir apparaitre l'en-tête comme sur la Figure *@navBlog*.

+TinyBlog avec une barre de navigation.>file://figures/navBlog.png|width=75|label=navBlog+

Par défaut dans une barre de navigation Bootstrap, il y a un lien sur ==tbsNavbarBrand== qui est ici inutile (sur le titre de l'application). Ici nous l'initialisons avec une ancre =='#'== de façon à ce que si l'utilisateur clique sur le titre, il ne se passe rien. En général, cliquer sur le titre de l'application permet de revenir à la page de départ du site. 

!!!!Améliorations possibles

Le nom du blog devrait être paramétrable à l'aide d'une variable d'instance dans la classe ==TBBlog== et l'en-tête pourrait afficher ce titre.

!!!Liste des posts

Créons un composant ==TBPostsListComponent== pour afficher la liste des bulletins (posts) - ce qui reste d'ailleurs le but d'un blog. Ce composant constitue la partie publique du blog offerte aux lecteurs du blog. 
Pour cela, définissons une sous-classe de ==TBScreenComponent==:

[[[
TBScreenComponent subclass: #TBPostsListComponent
   instanceVariableNames: ''
   classVariableNames: ''
   package: 'TinyBlog-Components'
]]]


+Le composant ==ApplicationRootComponent== utilise le composant ==PostsListComponent==.>file://figures/ComponentRelationship2.pdf|width=75|label=compt2+

Nous pouvons maintenant modifier le composant principal de l'application (==TBApplicationRootComponent==) pour qu'il affiche ce nouveau composant comme illustré dans la figure *@compt2*. Pour cela nous modifions sa méthode ==initialize== ainsi: 

[[[
TBApplicationRootComponent >> initialize
   super initialize.
   main := TBPostsListComponent new 
]]]

Ajoutons également une méthode setter (==main:==) qui nous permettra par la suite, de changer dynamiquement le sous-composant à afficher tout en gardant le composant actuel (instance de ==TBPostsListComponent==) par défaut. 

[[[
TBApplicationRootComponent >> main: aComponent
   main := aComponent
]]]


Ajoutons une méthode ==renderContentOn:== (protocole rendering) provisoire pour tester l'avancement de notre application (voir figure *@elementary*). Notez que cette méthode fait un appel à la méthode ==renderContentOn:== de la super-classe qui va afficher le composant en-tête. 

[[[
TBPostsListComponent >> renderContentOn: html
   super renderContentOn: html.
   html text: 'Blog Posts here !!!'
]]]


+TinyBlog avec une liste de bulletins plutot élémentaire.>file://figures/ElementaryListPost.png|width=65|label=elementary+

Si vous rafraichissez la page de TinyBlog dans votre navigateur, vous devriez obtenir la même chose que sur la figure *@elementary*.


!!!Le composant Post

Nous allons maintenant définir le composant ==TBPostComponent== qui affiche le contenu d'un bulletin (post).

Chaque bulletin du blog sera représenté visuellement par une instance de  ==TBPostComponent== qui affiche le titre, la date et le contenu d'un bulletin. Nous allons obtenir la situation décrite par la figure *@compt3*.

+Ajout du composant Post.>file://figures/ComponentRelationship3.pdf|width=75|label=compt3+

[[[
WAComponent subclass: #TBPostComponent
   instanceVariableNames: 'post'
   classVariableNames: ''
   package: 'TinyBlog-Components'
]]]

[[[
TBPostComponent >> initialize
      super initialize.
      post := TBPost new
]]]

[[[      
TBPostComponent >> title
   ^ post title
]]]

[[[
TBPostComponent >> text
   ^ post text
]]]

[[[
TBPostComponent >> date
   ^ post date
]]]

Ajoutons la méthode ==renderContentOn:== qui définit l'affichage du post.

[[[
TBPostComponent >> renderContentOn: html
   html heading level: 2; with: self title.
   html heading level: 6; with: self date.
   html text: self text
]]]


!!!!A propos des formulaires

Dans le chapitre sur l'interface d'administration, nous utiliserons Magritte et montrerons qu'il est rare de définir un composant de manière aussi manuelle comme ci-dessus. En effet, Magritte permet de décrire les données manipulées et offre ensuite la possibilité de générer automatiquement des composants Seaside. Le code équivalent à celui ci-dessus en Magritte serait comme suit: 

[[[
TBPostComponent >> renderContentOn: html
   "DON'T WRITE THIS YET"
   html render: post asComponent
]]]


!!!Afficher les bulletins (posts)

Nous pouvons maintenant afficher les bulletins présents dans la base. Vérifiez que votre blog a quelques bulletins : 
[[[
TBBlog current allBlogPosts size
]]]

Si il n'en contient aucun, recréez-en : 
[[[
TBBlog createDemoPosts 
]]]

Il ne reste plus qu'à modifier la méthode ==renderContentOn:== de la classe ==TBPostsListComponent== pour afficher l'ensemble des bulletins visibles présents dans la base.

[[[
TBPostsListComponent >> renderContentOn: html
   super renderContentOn: html.
   self blog allVisibleBlogPosts do: [ :p |
      html render: (TBPostComponent new post: p) ]
]]]

Rafraichissez la page de votre navigateur et vous devez obtenir une page d'erreur.

!!!Débugger les erreurs

Par défaut, lorsqu'une erreur se produit dans une application, Seaside retourne une page HTML contenant un message. Vous pouvez changer ce message, mais le plus pratique pendant le développement de l'application est de configurer Seaside pour qu'il ouvre un debugger dans Pharo. Pour cela, exécuter le code suivant :

[[[
(WAAdmin defaultDispatcher handlerAt: 'TinyBlog') 
    exceptionHandler: WADebugErrorHandler
]]] 

Rafraîchissez la page de votre navigateur et vous devez obtenir un debugger côté Pharo.
L'analyse de la pile d'appels montre qu'il manque la méthode suivante :

[[[
TBPostComponent >> post: aPost
   post := aPost
]]]

Vous pouvez ajouter cette méthode dans le debugger avec le bouton ==Create==. Quand c'est fait, appuyez sur le bouton ==Proceed==. La page de votre navigateur doit maintenant montrer la même chose que la figure *@better*.

+TinyBlog avec une liste de posts sans amélioration visuelle.>file://figures/betterListPosts.png|width=65|label=better+


!!!Affichage de la liste des posts avec Bootstrap

Nous allons utiliser Bootstrap pour rendre la liste un peu plus jolie à l'aide d'un container en utilisant le message ==tbsContainer: == comme suit :

[[[
TBPostsListComponent >> renderContentOn: html
   super renderContentOn: html.
   html tbsContainer: [ 
      self blog allVisibleBlogPosts do: [ :p |
          html render: (TBPostComponent new post: p) ] ]
]]]

Rafraichissez la page et vous devez obtenir la figure *@container*.
+TinyBlog avec une liste de posts.>file://figures/ContainerList.png|width=65|label=container+

!!! Cas d'instanciation de composants dans renderContentOn:

Nous avons dit que la méthode ==children== d'un composant devait retourner ses sous-composants.
En effet, avant d'exécuter la méthode ==renderContentOn:== d'un composite, Seaside a besoin de retrouver tous les sous-composants de ce composite et notamment leurs états. 

Toutefois, si des sous-composants sont instanciés systématiquement dans la méthode ==renderContentOn:== du composite,  comme c'est le cas dans la méthode ==renderContentOn:== de la classe ==TBPostsListComponent== ci-dessus, il n'est pas nécessaire qu'ils soient stockés et retournés par la méthode  ==children== du composite.
Bien évidemment, instancier systématiquement des sous-composants dans la méthode ==renderContentOn:== n'est pas forcément une bonne pratique car cela allonge le délai de rendu d'une page Web.

Si nous voulions stocker les sous-composants permettant d'afficher les bulletins, nous aurions ajouté et initialisé une variable d'instance ==postComponents==.

[[[
TBPostsListComponent >> initialize
	super initialize.
	postComponents := OrderedCollection new
]]]

Nous aurions ajouté la méthode ==postComponents== calculant les composants pour les bulletins. 

[[[
TBPostsListComponent >> postComponents 
	postComponents := self readSelectedPosts
			collect: [ :each | TBPostComponent new post: each ].
	^ postComponents 
]]]

Et nous aurions finalement modifié la méthode ==children== et ==renderContentOn:== 
[[[
TBPostsListComponent >> children 
	^ self postComponents, super children
]]]

[[[
TBPostsListComponent >> renderContentOn: html
	super renderContentOn: html.
	html tbsContainer: [ 
		self postComponents do: [ :p |
				html render: p ] ]
]]]

Nous ne le faisons pas car cela complique le code et n'apporte pas grand chose puisque les sous-composants sont tout de même instanciés à chaque rendu du composant ==TBPostsListComponent==.

@todo je n'aime pas le code ci-dessus car on re-créé tous les sous-composants quand même 

@todo je couperai bien le chapitre ici

!!!Affichage des bulletins par catégorie

Les bulletins sont classés par catégorie. Par défaut, si aucune catégorie n'a été précisée, ils sont rangés dans une catégorie spéciale dénommée "Unclassified".
Nous allons créer un composant pour gérer une liste de catégories nommée: ==TBCategoriesComponent==.

!!!!Definition d'un composant pour les catégories

Nous avons besoin d'un composant qui affiche la liste des catégories présentes dans la base et permet d'en sélectionner une. Ce composant devra donc avoir la possibilité de communiquer avec le composant ==TBPostsListComponent== afin de lui communiquer la catégorie courante. La situation est décrite par la figure *@compt4*.

Rappelez-vous qu'une catégorie est simplement exprimée comme une chaine dans le modèle défini dans le Chapitre *@cha:model* et comme l'illustre le test suivant.

[[[
testAllBlogPostsFromCategory
	self assert: (blog allBlogPostsFromCategory: 'First Category') size equals: 1
]]]


+Ajout du composant Categories.>file://figures/ComponentRelationship4.pdf|width=75|label=compt4+


Nous définissons un nouveau composant nommé ==TBCategoriesComponent==. Ce composant va garder une liste
de chaines pour chacune des catégories ainsi qu'un pointeur sur le composant postsList associé.

[[[
WAComponent subclass: #TBCategoriesComponent
   instanceVariableNames: 'categories postsList'
   classVariableNames: ''
   package: 'TinyBlog-Components'
]]]

Nous définissons les accesseurs associés.

[[[
TBCategoriesComponent >> categories
   ^ categories
]]]

[[[
TBCategoriesComponent >> categories: aCollection
   categories := aCollection
]]]

[[[
TBCategoriesComponent >> postsList: aComponent
      postsList := aComponent
]]]

[[[
TBCategoriesComponent >> postsList
   ^ postsList
]]]

Nous définissons aussi une méthode de création au niveau classe.

[[[
TBCategoriesComponent class >> categories: categories postsList: aTBScreen
   ^ self new categories: categories; postsList: aTBScreen 
]]]


Nous avons donc besoin d'ajouter une variable d'instance pour stocker la catégorie courante dans la classe ==TBPostsListComponent==.

[[[
TBScreenComponent subclass: #TBPostsListComponent
   instanceVariableNames: 'currentCategory'
   classVariableNames: ''
   package: 'TinyBlog-Components'
]]]

Nous définissons les accesseurs associés.
[[[
TBPostsListComponent >> currentCategory
   ^ currentCategory
]]]

[[[
TBPostsListComponent >> currentCategory: anObject
   currentCategory := anObject
]]]


!!!! La méthode selectCategory:
La méthode ==selectCategory:== (protocole 'action') communique au composant ==TBPostsListComponent== la nouvelle catégorie courante.

[[[
TBCategoriesComponent >> selectCategory: aCategory
   postsList currentCategory: aCategory
]]]

% Notez que si nous voulions avoir un effet visuel plus avancé le composant catégories devrait peut être lui aussi garder trace de la catégorie couramment sélectionnée.


!!! Rendu des catégories
Nous pouvons maintenant ajouter une méthode (protocole 'rendering') pour afficher les catégories sur la page. En particulier, pour chaque catégorie nous définissons le fait que cliquer sur la catégorie la sélectionne comme la catégorie courante.
Nous utilisons un callback (message ==callback:==). L'argument de ce message est un block qui peut contenir n'importe quelle expression Pharo. Cela illustre la puissance de Seaside.

[[[
TBCategoriesComponent >> renderCategoryLinkOn: html with: aCategory
   html tbsLinkifyListGroupItem
      callback: [ self selectCategory: aCategory ];
      with: aCategory
]]]

La méthode de rendu de ce composant ==TBCategoriesComponent== est simple : on itère sur toutes les catégories et on les affiche en utilisant Bootstrap.

[[[
TBCategoriesComponent >> renderContentOn: html
   html tbsListGroup: [
      html tbsListGroupItem
         with: [  html strong: 'Categories' ].
      categories do: [ :cat | 
         self renderCategoryLinkOn: html with: cat ] ]
]]]

Nous avons presque fini mais il faut encore afficher la liste des catégories et mettre à jour la liste des bulletins en fonction de la catégorie courante. 

!!!Mise à jour des Posts

Nous devons mettre à jours les bulletins, pour cela, modifions la méthode de rendu du composant ==TBPostsListComponent==.

La méthode ==readSelectedPosts== récupère les bulletins à afficher depuis la base et les filtre en fontction de la catégorie courante. Si la catégorie courante est ==nil==, cela signifie que l'utilisateur n'a pas encore sélectionné de catégorie et l'ensemble des bulletins visibles de la base est affiché. Si elle contient une valeur autre que ==nil==, l'utilisateur a sélectionné une catégorie et l'application affiche alors la liste des bulletins attachés à cette catégorie.

[[[
TBPostsListComponent >> readSelectedPosts
   ^ self currentCategory
      ifNil: [ self blog allVisibleBlogPosts ]
      ifNotNil: [ self blog allVisibleBlogPostsFromCategory: self currentCategory ]
]]]

Nous pouvons maintenant modifier la méthode chargée du rendu de la liste des posts:

[[[
TBPostsListComponent >> renderContentOn: html
   super renderContentOn: html.
   html render: (TBCategoriesComponent
               categories: (self blog allCategories)
               postsList: self).
   html tbsContainer: [ 
      self readSelectedPosts do: [ :p |
         html render: (TBPostComponent new post: p) ] ]
]]]

Une instance du composant ==TBCategoriesComponent== est ajoutée sur la page et permet de sélectionner la catégorie courante (voir la figure *@ugly*). De même qu'expliqué précédemment, une nouvelle instance de ==TBCategoriesComponent== est créé à chaque rendu du composant ==TBPostsListComponent== donc il n'est pas nécessaire de l'ajouter dans la liste des sous-composants retourné par ==children:==.

+Catégories afin de sélectionner les posts.>file://figures/categoriesUgly.png|width=75|label=ugly+

!!!! Améliorations possibles

Mettre en dur le nom des classes et la logique de création des catégories et des bulletins n'est pas optimale. Proposer quelques méthodes pour réaliser cela.

!!!Look et agencement

Nous allons maintenant agencer le composant ==TBPostsListComponent== en utilisant un 'responsive design' pour la liste des bulletins. Cela veut dire que le style CSS va adapter les composants à l'espace disponible.

Les composants sont placés dans un container Bootstrap puis agencés sur une ligne avec deux colonnes. La dimension des colonnes est déterminée en fonction de la résolution (viewport) du terminal utilisé. Les 12 colonnes de Bootstrap sont réparties entre la liste des catégories et la liste des posts. Dans le cas d'une résolution faible, la liste des catégories est placée au dessus de la liste des posts (chaque élément occupant 100\% de la largeur du container).


[[[
TBPostsListComponent >> renderContentOn: html
   super renderContentOn: html.
   html tbsContainer: [
      html tbsRow showGrid;
         with: [
            html tbsColumn
               extraSmallSize: 12;
               smallSize: 2;
               mediumSize:  4;
               with: [
                  html render: (TBCategoriesComponent
                    categories: (self blog allCategories)
                    postsList: self) ].
      html tbsColumn
               extraSmallSize: 12;
               smallSize: 10;
               mediumSize: 8;
               with: [
         self readSelectedPosts do: [ :p |
             html render: (TBPostComponent new post: p) ] ] ] ]
]]]

Vous devez obtenir une application proche de celle représentée par la figure *@nicer5*.

+Avec un meilleur agencement.>file://figures/NicerCategories.png|width=75|label=nicer5+

Lorsqu'on sélectionne une catégorie, la liste des posts est bien mise à jour.
Toutefois, l'entrée courante dans la liste des catégories n'est pas sélectionnée.
Pour cela, on modifie la méthode suivante :

[[[
TBCategoriesComponent >> renderCategoryLinkOn: html with: aCategory
   html tbsLinkifyListGroupItem
      class: 'active' if: aCategory = self postsList currentCategory ;
      callback: [ self selectCategory: aCategory ]; 
      with: aCategory
]]]

Bien que le code fonctionne, on ne doit pas laisser la méthode ==TBPostsListComponent >> renderContentOn: html== dans un tel état. Elle est bien trop longue et difficilement réutilisable. Proposer une solution. 


!!!Modulariser son code avec des petites méthodes

Pour permettre une meilleure lecture et réutilisation future, nous commençons par définir les méthodes de création des composants 

[[[
TBPostsListComponent >> categoriesComponent
	^ TBCategoriesComponent 
			categories: self blog allCategories 
			postsList: self
]]]

[[[
TBPostsListComponent >> postComponentFor: aPost
	^ TBPostComponent new post: aPost
]]]

[[[
TBPostsListComponent >> renderContentOn: html
	super renderContentOn: html.
	html
		tbsContainer: [ html tbsRow
				showGrid;
				with: [ 
					html tbsColumn
						extraSmallSize: 12;
						smallSize: 2;
						mediumSize: 4;
						with: [ html render: self categoriesComponent ].
					html tbsColumn
						extraSmallSize: 12;
						smallSize: 10;
						mediumSize: 8;
						with: [ self readSelectedPosts
								do: [ :p | html render: (self postComponentFor: p) ] ] ] ]
]]]


Continuons à découper cette méthode en plusieurs petites méthodes.  Pour cela, créons des méthodes pour les traitements élémentaires. 

[[[
TBPostsListComponent >> basicRenderCategoriesOn: html
   html render: self categoriesComponent 
]]]

[[[
TBPostsListComponent >> basicRenderPostsOn: html
	self readSelectedPosts do: [ :p | html render: (self postComponentFor: p) ]
]]]


Puis nous utilisons ces traitements.

[[[
TBPostsListComponent >> renderContentOn: html
   super renderContentOn: html.
   html
      tbsContainer: [ 
         html tbsRow
            showGrid;
            with: [ self renderCategoryColumnOn: html.
                  self renderPostColumnOn: html ] ]
]]]


[[[
TBPostsListComponent >> renderCategoryColumnOn: html
   html tbsColumn
      extraSmallSize: 12;
      smallSize: 2;
      mediumSize: 4;
      with: [ self basicRenderCategoriesOn: html ]
]]]


[[[
TBPostsListComponent >> renderPostColumnOn: html
   html tbsColumn
         extraSmallSize: 12;
         smallSize: 10;
         mediumSize: 8;
         with: [ self basicRenderPostsOn: html ] 
]]]


L'application finale devrait ressembler à la figure *@final*.

+Final TinyBlog Public UI.>file://figures/finalPublicWebPage.png|width=85|label=final+

!!! Conclusion
Avec Seaside, le programmeur n'a pas à se soucier de gérer les requêtes web, ni l'état de l'application. Il définit des composants qui sont créés et sont proches des composants pour applications de bureau.

Un composant Seaside est responsable d'assurer son rendu en spécialisant la méthode ==renderContentOn:==.
De plus un composant doit retourner ses sous-composants en spécialisant la méthode ==children==.

Nous avons défini une interface pour notre blog en utilisant un ensemble de composants définissant chacun
leur propre état et leurs responsabilités. Maintenant il faut remarquer que de très nombreuses applications se construisent de la même manière. Donc vous avez les bases pour définir de nombreuses applications web. 

Nous voici prêts à définir la partie administrative de l'application ce qui est l'objet du chapitre suivant.
Nous en profiterons pour vous montrer un aspect avancé qui permet la définition automatique de formulaires ou d'objets ayant de nombreux champs.

!!!! Améliorations possibles

A titre d'exercice, vous pouvez :
- trier les catégories par ordre alphabétique
- ajouter un lien nommé 'All' dans la liste des catégories permettant d'afficher toutes les posts visible quelque soit leur catégorie.






