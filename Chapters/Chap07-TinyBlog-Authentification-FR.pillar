!! Authentification et Session 

 Nous allons tout d'abord définir un composant d'identification : cette définition de composant va nous permettre d'illustrer comment la saisie de champs utilise de manière élégante les variables d'instances d'un composant ainsi que l'invocation de composants.

%  Avant cela, il faut enrichir notre modèle de Tinyblog avec la notion d'auteur.
%  Le ou les auteur(s) associés à un blog pourront s'identifier pour administrer les posts.
%
% !!!Le modèle des Auteurs
%
%  Le blog possède des auteurs qui peuvent écrire des posts. Un post n'a qu'un seul auteur (son créateur) même si tous les auteurs peuvent ensuite accéder et modifier n'importe quel post.
%
%  Ajouter maintenant une classe nommée ==TBAuthor== sachant qu'un auteur est caractérisé par son pseudo (affiché publiquement dans le post), son login et son mot de passe.
%
%  De même que pour les posts, ajoutez des accesseurs et des méthodes de création côté classe.
%  Nous souhaitons pouvoir écrire dans un playground :
%
%  [[[
%  	luc := TBAuthor pseudo: 'Luke' login: 'luc' password: 'topsecret'
%  ]]]
%
%  Ajouter un champs ==author== dans la classe ==TBPost== ainsi que des accesseurs.
%  Dans un playground, on souhaite pouvoir écrire :
%
%  [[[
%  	|luc|
%  	luc := TBAuthor pseudo: 'Luke' login: 'luc' password: 'topsecret'.
%  	(TBPost
%  		title: 'Welcome in TinyBlog'
%  		text: 'TinyBlog is a small blog engine made with Pharo.'
%  		category: 'TinyBlog')
%  		author: luc ;
%  		yourself
%  ]]]
%
%  Dans la classe ==TBBlog==, ajouter une accesseur permettant de récupérer l'ensemble des auteurs du
%
% @todo : to finish 

!!!Administration de TinyBlog

Nous allons aborder maintenant l'administration de TinyBlog. Cet exercice va nous permettre de montrer comment utiliser des informations de session ainsi que Magritte pour la définition de rapports.

Le scénario assez classique que nous allons développer est le suivant : l'utilisateur doit s'authentifier pour accéder à la partie administration de TinyBlog. Il le fait à l'aide d'un compte et d'un mot de passe. Le lien permettant d'afficher le composant d'authentification sera placé sous la liste des catégories.

!!! Composant d'identification

Nous allons commencer par développer un composant d'identification qui lorsqu'il sera invoqué ouvrira une boite de dialogue pour demander les informations d'identification. Le résultat que nous voulons obtenir est montré dans la figure *@authentification*. Remarquer qu'une telle fonctionnalité devrait faire partie d'une bibliothèque de composants de base en Seaside. Le projet Heimdal disponible sur *http://www.github.com/DuneSt/* offre cette fonctionnalité.

+Authentification avec un meilleur agencement.>file://figures/Authentification.png|width=75|label=authentification+

Ce composant va nous permettre d'illustrer comment la saisie de champs utilise de manière élégante les variables d'instances du composant.

!!!! Définition du composant
Nous définissons une nouvelle classe comme sousclasses de la classe ==WAComponent== et des accesseurs.
Ce composant contient un compte d'administration, le mot de passe associé ainsi que le composant a invoqué pour accéder à l'administration.

[[[
WAComponent subclass: #TBAuthentificationComponent
   instanceVariableNames: 'password account component'
   classVariableNames: ''
   package: 'TinyBlog-Components'
]]]

[[[
TBAuthentificationComponent >> account
   ^ account
]]]

[[[
TBAuthentificationComponent >> account: anObject
   account := anObject
]]]

[[[
TBAuthentificationComponent >> password
   ^ password
]]]

[[[
TBAuthentificationComponent >> password: anObject
   password := anObject
]]]

[[[
TBAuthentificationComponent >> component
   ^ component
]]]

[[[
TBAuthentificationComponent >> component: anObject
   component := anObject
]]]

La variable d'instance ==component== est initialisée par la méthode de classe suivante :

[[[
TBAuthentificationComponent class >> from: aComponent
   ^ self new
      component: aComponent;
      yourself
]]]


!!!! Rendu du composant. 
La méthode ==renderContentOn:== définit le contenu d'une boite de dialogue modale.
Il est composé d'un header et d'un corps.

[[[
TBAuthentificationComponent >> renderContentOn: html
   html tbsModal
      id: 'myAuthDialog';
      with: [
         html tbsModalDialog: [
            html tbsModalContent: [
               self renderHeaderOn: html.
               self renderBodyOn: html ] ] ]
]]]

Le header affiche un titre avec de larges fontes. 

[[[
TBAuthentificationComponent >> renderHeaderOn: html
   html
      tbsModalHeader: [
         html tbsModalCloseIcon.
         html tbsModalTitle
            level: 4;
            with: 'Authentication' ]
]]]

Le corps du composant affiche une masque de saisie pour l'identifiant, le mot de passe
et finalement des boutons.
[[[
TBAuthentificationComponent >> renderBodyOn: html
    html
        tbsModalBody: [
            html tbsForm: [
                self renderAccountFieldOn: html.
                self renderPasswordFieldOn: html.
                html tbsModalFooter: [ self renderButtonsOn: html ] ] ]
]]]


La méthode ==renderAccountFieldOn:== montre comment la valeur d'un input field est passée puis stockeé dans une variable d'instance d'une instance du composant quand l'utilisateur confirme sa saisie. L'argument du ==callback:== est un block avec un argument et c'est cet argument qui représente la valeur du text input.

[[[
TBAuthentificationComponent >> renderAccountFieldOn: html
   html
      tbsFormGroup: [ html label with: 'Account'.
         html textInput
            tbsFormControl;
            callback: [ :value | account := value ];
            value: account ]
]]]

Le même procédé est utilisé pour le mot de passe.

[[[
TBAuthentificationComponent >> renderPasswordFieldOn: html
   html tbsFormGroup: [
      html label with: 'Password'.
      html passwordInput
         tbsFormControl;
         callback: [ :value | password := value ];
         value: password ]
]]]


Les boutons définissent par défaut le bouton nommé =='SignIn'== et son action est de vérifier l'adéquation 
entre le mot de passe et le compte.

[[[
TBAuthentificationComponent >> renderButtonsOn: html
   html tbsSubmitButton value: 'Cancel'.
   html tbsSubmitButton
      bePrimary;
      callback: [ self validate ];
      value: 'SignIn'
]]]



Lorsque l'utilisateur clique sur le bouton 'SignIn', le message ==validate== est envoyé: il vérifie que l'utilisateur a bien le compte 'admin' et a saisi le mot de passe 'password'.

[[[
TBAuthentificationComponent >> validate
   (self account = 'admin' and: [ self password = 'password' ])
      ifTrue: [ self gotoAdministration ]
]]]

[[[
TBAuthentificationComponent >> gotoAdministration
	
]]]

!!!!! Améliorations.
Rechercher une autre méthode pour réaliser l'authentification de l'utilisateur (utilisation d'un backend de type base de données, LDAP ou fichier texte). En tout cas, ce n'est pas à la boite de login de faire ce travail, il faut le déléguer à un objet métier qui saura consulter le backend et authentifier l'utilisateur.

De plus le composant ==TBAuthentificationComponent== pourrait afficher l'utilisateur lorsque celui-ci est logué.

!!!Intégration de l'authentification

Il faut maintenant intégrer le lien qui déclenchera l'affichage de la boite modale d'authentification. Au tout début de la méthode ==renderContentOn:== du composant ==TBPostsListComponent==, on ajoute le rendu du composant d'authentification. Ce composant reçoit en paramètre la référence vers le composant affichant les posts. C'est depuis ce component (==TBPostsListComponent==) que nous donnerons acces à l'administration.

[[[
TBPostsListComponent >> renderContentOn: html
   super renderContentOn: html.
   html render: (TBAuthentificationComponent from: self).
   html
      tbsContainer: [
         html tbsRow
            showGrid;
            with: [ self renderCategoryColumnOn: html.
                  self renderPostColumnOn: html ] ]
]]]

@@todo Why here we do not see the component. I do not get it 

 On définit maintenant une méthode qui affiche un pictogramme clé et un lien 'SignIn'.

[[[
TBPostsListComponent >> renderSignInOn: html
   html tbsGlyphIcon perform: #iconLock.
   html html: '<a data-toggle="modal" href="#myAuthDialog" class="link">SignIn</a>'
]]]

Nous ajoutons le composant d'authentification dessous la liste de categories.
[[[
TBPostsListComponent >> renderCategoryColumnOn: html
   html tbsColumn
      extraSmallSize: 12;
      smallSize: 2;
      mediumSize: 4;
      with: [
           self basicRenderCategoriesOn: html.
         self renderSignInOn: html ]
]]]


Lorsque nous pressons sur le lien SignIn nous obtenons la figure *@authentification*.


!!!Gestion de session

Un objet session est attribué à chaque instance de l'application. Il permet de conserver principalement des informations qui sont partagées et accessible entre les composants. Une session est pratique pour gérer les informations de l'utilisateur en cours (identifié).  Nous allons voir comment nous l'utilisons pour gérer une connexion.

L'administrateur du blog peut vouloir voyager entre la partie privée et la partie publique de TinyBlog.

Nous définissons une nouvelle sous-classe de ==WASession== nommée ==TBSession==. Pour savoir si l'utilisateur s'est authentifié, nous devons définir un objet session et ajouter une variable d'instance contenant une valeur booléenne précisant l'état de l'utilisateur.

[[[
WASession subclass: #TBSession
    instanceVariableNames: 'logged'
    classVariableNames: ''
    package: 'TinyBlog-Components'
]]]

[[[
TBSession >> logged
    ^ logged

TBSession >> logged: anObject
    logged := anObject

TBSession >> isLogged
    ^ self logged
]]]

Il faut ensuite initialiser à `false` cette variable d'instance à la création d'une session.

[[[
TBSession >> initialize
    super initialize.
    self logged: false.
]]]

Dans la partie privée de TinyBlog, ajoutons un lien permettant le retour à la partie publique. Nous utilisons ici le message ==answer== puisque le composant d'administration a été appelé à l'aide du message ==call:==.

[[[
TBAdminComponent >> renderContentOn: html
    super renderContentOn: html.
    html tbsContainer: [
        html heading: 'Blog Admin'.
        html tbsGlyphIcon perform: #iconEyeOpen.
        html anchor
            callback: [ self answer ];
            with: 'Public Area'.
        html horizontalRule.
        html render: self report.
    ]
]]]

Dans l'espace public, il nous faut modifier le comportement du lien permettant d'accéder à l'administration. Il doit provoquer l'affichage de la boite d'authentification uniquement si l'utilisateur ne s'est pas encore connecté.

[[[
TBPostsListComponent >> renderSignInOn: html
    self session isLogged
        ifFalse: [
            html tbsGlyphIcon perform: #iconLock.
            html html: '<a data-toggle="modal" href="#myAuthDialog" class="link">SignIn</a>' ]
        ifTrue: [
            html tbsGlyphIcon perform: #iconUser.
            html anchor callback: [ self gotoAdministration ]; with: 'Private area' ]
]]]

Enfin, le composant ==TBAuthentificationComponent== doit mettre à jour la variable d'instance ==logged== de la session si l'utilisateur est bien un administrateur.

[[[
TBAuthentificationComponent >> validate
   (self account = 'admin' and: [ self password = 'password' ])
      ifTrue: [
         self session logged: true.
         component gotoAdministration ]
]]]


Il vous faut maintenant spécifier à Seaside qu'il doit utiliser l'objet ==TBSession== comme objet de session courant pour l'application TinyBlog.
Cette initialisation s'effectue dans la méthode ==initialize== de la classe ==TBApplicationRootComponent== que l'on modifie ainsi:

[[[
TBApplicationRootComponent class >> initialize
      "self initialize"
      | app |
      app := WAAdmin register: self asApplicationAt: 'TinyBlog'.
      app
         preferenceAt: #sessionClass put: TBSession.
      app
         addLibrary: JQDeploymentLibrary;
         addLibrary: JQUiDeploymentLibrary;
         addLibrary: TBSDeploymentLibrary
]]]

Pensez à exécuter cette méthode via ==TBApplicationRootComponent initialize== avant de tester à nouveau l'application.


