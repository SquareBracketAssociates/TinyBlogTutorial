!Maîtriser les feuilles de styles avec RenoirSt

Les feuilles de styles (Cascading Style Sheet) dont devenues un élément incontournable du web. Elles permettent de séparer le fond de la forme en fournissant de puissants outils destinés à gérer l'apparence d'une page HTML. Grâce à elles, il n'est plus utile de glisser des attributs définissant l'apparence d'un élément au sein même des balises HTML. L'ensemble des ces attributs est déporté au sein d'une ou plusieurs feuilles de styles attachées ou intégrées au document HTML. Il est ainsi aisé de modifier l'apparence des titres, de choisir la justification d'un paragraphe ou encore la couleur des boutons.

Pharo dispose d'un framework dédié à la définition de feuilles de styles. Il s'agit de RenoirST. Grâce à lui, vous allez définir les attributs CSS mais sans jamais manipuler les instructions CSS. Vous n'utiliserez donc que Pharo.

!! Installation de RenoirSt

Le framework ==RenoirSt== est disponible dans le catalogue Pharo. Il vous suffit donc d'ouvrir le Catalog Browser et de sélectionner RenoirSt. Pour Développer avec Seaside, il est recommandé d'installer également ==RenoirStPlusSeaside== qui comprend RenoirSt ainsi que le code nécessaire à une intégration correcte au serveur d'applications de Pharo.

!! Principe de fonctionnement

RenoirSt est un générateur de code CSS. L'exécution d'une section de code Pharo déclenche la génération de la section CSS équivalente. Le résultat obtenu est une chaine de caractères.

Le principe de fonctionnement est assez simple. Il vous suffit d'utiliser la méthode d'instance ==declareRuleSetFor:with:== de l'objet ==CascadingStyleSheetBuilder==. Le premier argument  spécifie l'élement sur lequel le style est appliqué. Le second définit son apparence.

L'exemple suivant définit l'apparence d'un paragraphe de la classe 'resume'.

[[[
CascadingStyleSheetBuilder new 
	declareRuleSetFor: [ :selector | selector paragraph class: 'resume' ]
	with: [ :style | style color: CssSVGColors black ];
	build 
]]]

Le résultat obtenu sera:

[[[
p.resume
{
	color: black;
}
]]]

Utiliser Pharo pour construire la feuille CSS de votre application permet évidemment de la générer dynamiquement. Une feuille de style est un document statique dans lequel il vous est nécessaire d'anticiper vos besoins. RenoirSt est l'outil parfait pour générer la présentation de votre application et de l'adapter selon les situations rencontrées par votre logiciel durant son fonctionnement.

!! Intégrer une feuille de style dans TinyBlog

Vous allez maintenant améliorer l'apparence visuelle de TinyBlog en modifiant la partie publique du logiciel.

Pour éviter que la feuille de style soit reconstruite systématiquement à chaque appel de la méthode ==style== de ==TBApplicationRootComponent==, nous allons utiliser une variable d'instance afin de la mettre en cache. Pour cela, ajoutez la variable d'instance ==css== à ==TBApplicationRootComponent==.

[[[
  WAComponent subclass: #TBApplicationRootComponent
	  instanceVariableNames: 'main css'
	  classVariableNames: ''
	  category: 'TinyBlog-Components'
]]]

La méthode ==TBApplicationRootComponent >> styleSheet== contiendra la définition de la feuille de styles et est appelée par la méthode ==initialize==. Pour l'instant, contentez vous de retourner une chaine vide.

[[[
TBApplicationRootComponent >> styleSheet
	^''

TBApplicationRootComponent >> initialize
	super initialize.
	css := self styleSheet.
	main := TBPostsListComponent new.     
]]]

A partir de maintenant, vous avez la possibilité de modifier l'apparence de TinyBlog.

!! Améliorer le visuel

Jusque maintenant, TinyBlog n'a pas été spécialement soigné visuellement. Il utilise le style de base fourni par le framework BootStrap et c'est vrai, il n'est pas toujours très sexy. Grâce à la feuille de styles construite à l'aide de RenoirSt, vous allez lui donner un look plus travaillé.

Commençons par l'affichage des billets. Celui ci a été défini dans ==TBPostComponent== selon une très mauvaise méthode puisque l'apparence du titre et du sous titre sont uniquement définis par les balises HTML <h2> et <h6> et qu'aucune classe CSS n'a été spécifiée. Corrigez le code à l'aide de cette nouvelle version de la méthode:

[[[
TBPostComponent >> renderContentOn: html
	html paragraph class: 'title'; with: self title.
   	html paragraph class: 'subtitle'; with: self date.
   	html paragraph class: 'content'; with: self text  
]]]

Vous pouvez maintenant modifier le style de ces éléments dans la méthode ==stylesheet==. Commencez par fixer la taille du titre. Elle est fixée à 200% de la taille par défaut dans le navigateur.

[[[
styleSheet
	^(CascadingStyleSheetBuilder new 
		declareRuleSetFor: [ :selector | selector paragraph class: 'title' ]
			with: [ :style | style fontSize: 200 percent ];
		build) asString
]]]

Le sous-titre est écrit en italique et le contenu est justifié.

[[[
styleSheet
	^(CascadingStyleSheetBuilder new 
		declareRuleSetFor: [ :selector | selector paragraph class: 'title' ]
			with: [ :style | style fontSize: 200 percent ];
		declareRuleSetFor: [ :selector | selector paragraph class: 'subtitle' ]
			with: [ :style | style fontStyle: CssConstants italic ];
		declareRuleSetFor: [ :selector | selector paragraph class: 'content' ]
			with: [ :style | style textAlign: CssConstants justify ];	
		build) asString
]]]

Le titre peut être amélioré en faisant en sorte que le premier caractère soit mis en valeur. Il sera plus grand et obligatoirement écrit à l'aide d'une lettre majuscule. Le titre est souligné à l'aide d'un trait fin. 

[[[
styleSheet
	^(CascadingStyleSheetBuilder new 
		declareRuleSetFor: [ :selector | selector paragraph class: 'title' ]
			with: [ :style | style fontSize: 200 percent ];
		declareRuleSetFor: [ :selector | selector paragraph class: 'subtitle' ]
			with: [ :style | style fontStyle: CssConstants italic ];
		declareRuleSetFor: [ :selector | selector paragraph class: 'content' ]
			with: [ :style | style textAlign: CssConstants justify ];
		declareRuleSetFor: [ :selector | (selector paragraph class: 'title') firstLetter ]
			with: [ :style | 
				style 
					fontSize: 150 percent;
					textTransform: CssConstants capitalize
			];
		declareRuleSetFor: [ :selector | selector paragraph class: 'title' ]
			with: [ :style | style borderBottomStyle: CssConstants solid ];
		declareRuleSetFor: [ :selector | selector paragraph class: 'title' ]
			with: [ :style | style borderWidth: 1px ];
		declareRuleSetFor: [ :selector | selector paragraph class: 'title' ]
			with: [ :style | style borderColor: CssSVGColors black ];
		build) asString
]]]

A ce stade, il est important de se poser la question de la maintenance de ce code. Il est évident que nous pouvons refactoriser le code en regroupant la définition des attributs.

styleSheet
	^(CascadingStyleSheetBuilder new 
		declareRuleSetFor: [ :selector | selector paragraph class: 'title' ]
			with: [ :style | 
				style 
					fontSize: 200 percent;
					borderBottomStyle: CssConstants solid;
					borderWidth: 1px;
					borderColor: CssSVGColors black
			];
		declareRuleSetFor: [ :selector | (selector paragraph class: 'title') firstLetter ]
			with: [ :style | 
				style 
					fontSize: 150 percent;
					textTransform: CssConstants capitalize
			];
		declareRuleSetFor: [ :selector | selector paragraph class: 'subtitle' ]
			with: [ :style | style fontStyle: CssConstants italic ];
		declareRuleSetFor: [ :selector | selector paragraph class: 'content' ]
			with: [ :style | style textAlign: CssConstants justify ];
		build) asString