THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
20 August 2018 2:15:22.335642 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable'
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

ReadStream(PositionableStream)>>on:
	Receiver: a ReadStream
	Arguments and temporary variables: 
		aCollection: 	nil
	Receiver's instance variables: 
		collection: 	nil
		position: 	nil
		readLimit: 	nil


ReadStream class(PositionableStream class)>>on:
	Receiver: ReadStream
	Arguments and temporary variables: 
		aCollection: 	nil
	Receiver's instance variables: 
		superclass: 	PositionableStream
		methodDict: 	a MethodDictionary(#ascii->ReadStream>>#ascii #formatASN1TabLevel:-...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{JPEGReadStream. InflateStream}
		name: 	#ReadStream
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	nil
		category: 	#'Collections-Streams'
		traitComposition: 	{}
		localSelectors: 	nil


RBParser>>initializeParserWith:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	nil
	Receiver's instance variables: 
		scanner: 	nil
		currentToken: 	nil
		nextToken: 	nil
		errorBlock: 	[ :error :position | ^ nil ]
		source: 	nil
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser class>>parseMethodPattern:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	nil
		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddMethodChange>>selector
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#TBPost
		isMeta: 	false
		source: 	nil
		selector: 	nil
		protocols: 	#(#'as yet unclassified')
		controller: 	nil
		definedSelector: 	nil


RBClass(RBAbstractClass)>>compile:classified:
	Receiver: TBPost
	Arguments and temporary variables: 
		aString: 	nil
		aSymbolCollection: 	#(#'as yet unclassified')
		change: 	!TBPost methodsFor: 'as yet unclassified' stamp: 'StephaneDucasse 8/20/...etc...
		method: 	nil
	Receiver's instance variables: 
		name: 	#TBPost
		newMethods: 	nil
		instanceVariableNames: 	nil
		model: 	a RBNamespace
		superclass: 	an Object
		subclasses: 	nil
		removedMethods: 	nil
		realClass: 	TBPost
		classVariableNames: 	nil
		poolDictionaryNames: 	nil
		category: 	nil
		comment: 	an Object


RBSwapMethodRefactoring>>transform
	Receiver: a RBSwapMethodRefactoring
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RBNamespace
		options: 	an IdentityDictionary(#alreadyDefined->[ :ref :class :selector | self ...etc...
		class: 	TBPost class
		target: 	TBPost
		selector: 	#descriptionDate


RBSwapMethodRefactoring(RBRefactoring)>>primitiveExecute
	Receiver: a RBSwapMethodRefactoring
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RBNamespace
		options: 	an IdentityDictionary(#alreadyDefined->[ :ref :class :selector | self ...etc...
		class: 	TBPost class
		target: 	TBPost
		selector: 	#descriptionDate


[ :e | 
self refactoringOptions: e.
e primitiveExecute ] in NautilusRefactoring>>internalPerformRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an OrderedCollection(a RBSwapMethodRefactoring a RBSwap...etc...
		e: 	a RBSwapMethodRefactoring
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(a RBSwapMethodRefactoring a RBSwapMethodRefactoring)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
self refactoringOptions: e.
e primitiveExecute ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RBSwapMethodRefactoring a RBSwapMethodRefactoring)
		firstIndex: 	1
		lastIndex: 	2


NautilusRefactoring>>internalPerformRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an OrderedCollection(a RBSwapMethodRefactoring a RBSwap...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


[ self internalPerformRefactorings: aCollectionRefactoring ] in [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ] in [ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an OrderedCollection(a RBSwapMethodRefactoring a RBSwap...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


BlockClosure>>on:do:
	Receiver: [ self internalPerformRefactorings: aCollectionRefactoring ]
	Arguments and temporary variables: 
		exception: 	RBRefactoringFailure
		handlerAction: 	[ :exception | self handleFailure: exception ]
	Receiver's instance variables: 
		outerContext: 	[ [ self internalPerformRefactorings: aCollectionRefactoring ]
	o...etc...
		startpc: 	95
		numArgs: 	0


[ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ] in [ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an OrderedCollection(a RBSwapMethodRefactoring a RBSwap...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


BlockClosure>>on:do:
	Receiver: [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	...etc...
	Arguments and temporary variables: 
		exception: 	RBRefactoringWarning
		handlerAction: 	[ :exception | self handleWarning: exception ]
	Receiver's instance variables: 
		outerContext: 	[ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
...etc...
		startpc: 	90
		numArgs: 	0


[ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an OrderedCollection(a RBSwapMethodRefactoring a RBSwap...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


BlockClosure>>on:do:
	Receiver: [ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure...etc...
	Arguments and temporary variables: 
		exception: 	RBRefactoringError
		handlerAction: 	[ :exception | self handleError: exception ]
	Receiver's instance variables: 
		outerContext: 	NautilusRefactoring>>performRefactorings:
		startpc: 	85
		numArgs: 	0


NautilusRefactoring>>performRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an OrderedCollection(a RBSwapMethodRefactoring a RBSwap...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


[ self performRefactorings: (self perform: aSymbol with: anArgument) ] in NautilusRefactoring>>performRefactoringsFor:with:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aSymbol: 	#privateSwapMethodFor:
		anArgument: 	an OrderedCollection(TBPost class>>#descriptionDate TBPost class>>#...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


BlockClosure>>on:do:
	Receiver: [ self performRefactorings: (self perform: aSymbol with: anArgument) ]
	Arguments and temporary variables: 
		exception: 	RefactoringAborted
		handlerAction: 	[ :ex | self inform: 'Refactoring aborted' ]
	Receiver's instance variables: 
		outerContext: 	NautilusRefactoring>>performRefactoringsFor:with:
		startpc: 	43
		numArgs: 	0


NautilusRefactoring>>performRefactoringsFor:with:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aSymbol: 	#privateSwapMethodFor:
		anArgument: 	an OrderedCollection(TBPost class>>#descriptionDate TBPost class>>#...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


NautilusRefactoring>>swapMethodFor:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection(TBPost class>>#descriptionDate TBPost class>>...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


[ target refactor swapMethodFor: selectedMethods ] in TBPost class(ClassDescription)>>methodRefactoring:
	Receiver: TBPost
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a NautilusUI
		selectedMethod: 	nil
		selectedMethods: 	an OrderedCollection(TBPost class>>#descriptionDate TBPost cla...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#beVisible->TBPost>>#beVisible #category->TBPost...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TBPost
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TinyBlog
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ target refactor swapMethodFor: selectedMethods ]
	Arguments and temporary variables: 
		anArg: 	a NautilusUI
	Receiver's instance variables: 
		outerContext: 	TBPost class(ClassDescription)>>methodRefactoring:
		startpc: 	405
		numArgs: 	0


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(338631168)'Move to instance side'
	Arguments and temporary variables: 
		evt: 	[(780@300) mouseUp 89620599 nil]
		w: 	a WorldMorph(562956288) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(695.0@291.0) corner: (960.0@308.0)
		owner: 	a MenuMorph(193708544)
		submorphs: 	#()
		fullBounds: 	(695.0@291.0) corner: (960.0@308.0)
		color: 	Color black
		extension: 	a MorphExtension (403406336)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Move to instance side'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target refactor swapMethodFor: selectedMethods ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	138
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(338631168)'Move to instance side'
	Arguments and temporary variables: 
		evt: 	[(780@300) mouseUp 89620599 nil]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(695.0@291.0) corner: (960.0@308.0)
		owner: 	a MenuMorph(193708544)
		submorphs: 	#()
		fullBounds: 	(695.0@291.0) corner: (960.0@308.0)
		color: 	Color black
		extension: 	a MorphExtension (403406336)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Move to instance side'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target refactor swapMethodFor: selectedMethods ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(338631168)'Move to instance side'
	Arguments and temporary variables: 
		evt: 	[(780@300) mouseUp 89620599 nil]
	Receiver's instance variables: 
		bounds: 	(695.0@291.0) corner: (960.0@308.0)
		owner: 	a MenuMorph(193708544)
		submorphs: 	#()
		fullBounds: 	(695.0@291.0) corner: (960.0@308.0)
		color: 	Color black
		extension: 	a MorphExtension (403406336)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Move to instance side'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target refactor swapMethodFor: selectedMethods ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(338631168)'Move to instance side'
	Arguments and temporary variables: 
		anEvent: 	[(780@300) mouseUp 89620599 nil]
	Receiver's instance variables: 
		bounds: 	(695.0@291.0) corner: (960.0@308.0)
		owner: 	a MenuMorph(193708544)
		submorphs: 	#()
		fullBounds: 	(695.0@291.0) corner: (960.0@308.0)
		color: 	Color black
		extension: 	a MorphExtension (403406336)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Move to instance side'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target refactor swapMethodFor: selectedMethods ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(780@300) mouseUp 89620599 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(338631168)'Move to instance side'
	Receiver's instance variables: 
		timeStamp: 	89620599
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(780@300)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(338631168)'Move to instance side'
	Arguments and temporary variables: 
		anEvent: 	[(780@300) mouseUp 89620599 nil]
	Receiver's instance variables: 
		bounds: 	(695.0@291.0) corner: (960.0@308.0)
		owner: 	a MenuMorph(193708544)
		submorphs: 	#()
		fullBounds: 	(695.0@291.0) corner: (960.0@308.0)
		color: 	Color black
		extension: 	a MorphExtension (403406336)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Move to instance side'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target refactor swapMethodFor: selectedMethods ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(780@300) mouseUp 89620599 nil]
		aMorph: 	a ToggleMenuItemMorph(338631168)'Move to instance side'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(338631168)'Move to instance side'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(780@300) mouseUp 89620599 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(338631168)'Move to instance side'


MouseButtonEvent>>sentTo:
	Receiver: [(780@300) mouseUp 89620599 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	89620599
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(780@300)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(780@300) mouseUp 89620599 nil]
		aMorph: 	a ToggleMenuItemMorph(338631168)'Move to instance side'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(338631168)'Move to instance side'



--- The full stack ---
UndefinedObject(Object)>>error:
UndefinedObject(Object)>>errorNotIndexable
UndefinedObject(Object)>>size
ReadStream(PositionableStream)>>on:
ReadStream class(PositionableStream class)>>on:
RBParser>>initializeParserWith:
RBParser class>>parseMethodPattern:
RBAddMethodChange>>selector
RBClass(RBAbstractClass)>>compile:classified:
RBSwapMethodRefactoring>>transform
RBSwapMethodRefactoring(RBRefactoring)>>primitiveExecute
[ :e | 
self refactoringOptions: e.
e primitiveExecute ] in NautilusRefactoring>>internalPerformRefactorings:
OrderedCollection>>do:
NautilusRefactoring>>internalPerformRefactorings:
[ self internalPerformRefactorings: aCollectionRefactoring ] in [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ] in [ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
BlockClosure>>on:do:
[ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ] in [ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
BlockClosure>>on:do:
[ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
BlockClosure>>on:do:
NautilusRefactoring>>performRefactorings:
[ self performRefactorings: (self perform: aSymbol with: anArgument) ] in NautilusRefactoring>>performRefactoringsFor:with:
BlockClosure>>on:do:
NautilusRefactoring>>performRefactoringsFor:with:
NautilusRefactoring>>swapMethodFor:
[ target refactor swapMethodFor: selectedMethods ] in TBPost class(ClassDescription)>>methodRefactoring:
BlockClosure>>cull:
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Instances of UndefinedObject are not indexable
20 August 2018 2:15:35.583168 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

UndefinedObject(Object)>>error:
	Receiver: nil
	Arguments and temporary variables: 
		aString: 	'Instances of UndefinedObject are not indexable'
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>errorNotIndexable
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

UndefinedObject(Object)>>size
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

ReadStream(PositionableStream)>>on:
	Receiver: a ReadStream
	Arguments and temporary variables: 
		aCollection: 	nil
	Receiver's instance variables: 
		collection: 	nil
		position: 	nil
		readLimit: 	nil


ReadStream class(PositionableStream class)>>on:
	Receiver: ReadStream
	Arguments and temporary variables: 
		aCollection: 	nil
	Receiver's instance variables: 
		superclass: 	PositionableStream
		methodDict: 	a MethodDictionary(#ascii->ReadStream>>#ascii #formatASN1TabLevel:-...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{JPEGReadStream. InflateStream}
		name: 	#ReadStream
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	nil
		category: 	#'Collections-Streams'
		traitComposition: 	{}
		localSelectors: 	nil


RBParser>>initializeParserWith:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	nil
	Receiver's instance variables: 
		scanner: 	nil
		currentToken: 	nil
		nextToken: 	nil
		errorBlock: 	[ :error :position | ^ nil ]
		source: 	nil
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser class>>parseMethodPattern:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	nil
		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddMethodChange>>selector
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#TBPost
		isMeta: 	false
		source: 	nil
		selector: 	nil
		protocols: 	#(#'as yet unclassified')
		controller: 	nil
		definedSelector: 	nil


RBClass(RBAbstractClass)>>compile:classified:
	Receiver: TBPost
	Arguments and temporary variables: 
		aString: 	nil
		aSymbolCollection: 	#(#'as yet unclassified')
		change: 	!TBPost methodsFor: 'as yet unclassified' stamp: 'StephaneDucasse 8/20/...etc...
		method: 	nil
	Receiver's instance variables: 
		name: 	#TBPost
		newMethods: 	nil
		instanceVariableNames: 	nil
		model: 	a RBNamespace
		superclass: 	an Object
		subclasses: 	nil
		removedMethods: 	nil
		realClass: 	TBPost
		classVariableNames: 	nil
		poolDictionaryNames: 	nil
		category: 	nil
		comment: 	an Object


RBSwapMethodRefactoring>>transform
	Receiver: a RBSwapMethodRefactoring
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RBNamespace
		options: 	an IdentityDictionary(#alreadyDefined->[ :ref :class :selector | self ...etc...
		class: 	TBPost class
		target: 	TBPost
		selector: 	#descriptionText


RBSwapMethodRefactoring(RBRefactoring)>>primitiveExecute
	Receiver: a RBSwapMethodRefactoring
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RBNamespace
		options: 	an IdentityDictionary(#alreadyDefined->[ :ref :class :selector | self ...etc...
		class: 	TBPost class
		target: 	TBPost
		selector: 	#descriptionText


[ :e | 
self refactoringOptions: e.
e primitiveExecute ] in NautilusRefactoring>>internalPerformRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an OrderedCollection(a RBSwapMethodRefactoring a RBSwap...etc...
		e: 	a RBSwapMethodRefactoring
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(a RBSwapMethodRefactoring a RBSwapMethodRefactoring)
	Arguments and temporary variables: 
		aBlock: 	[ :e | 
self refactoringOptions: e.
e primitiveExecute ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a RBSwapMethodRefactoring a RBSwapMethodRefactoring)
		firstIndex: 	1
		lastIndex: 	2


NautilusRefactoring>>internalPerformRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an OrderedCollection(a RBSwapMethodRefactoring a RBSwap...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


[ self internalPerformRefactorings: aCollectionRefactoring ] in [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ] in [ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an OrderedCollection(a RBSwapMethodRefactoring a RBSwap...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


BlockClosure>>on:do:
	Receiver: [ self internalPerformRefactorings: aCollectionRefactoring ]
	Arguments and temporary variables: 
		exception: 	RBRefactoringFailure
		handlerAction: 	[ :exception | self handleFailure: exception ]
	Receiver's instance variables: 
		outerContext: 	[ [ self internalPerformRefactorings: aCollectionRefactoring ]
	o...etc...
		startpc: 	95
		numArgs: 	0


[ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ] in [ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an OrderedCollection(a RBSwapMethodRefactoring a RBSwap...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


BlockClosure>>on:do:
	Receiver: [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	...etc...
	Arguments and temporary variables: 
		exception: 	RBRefactoringWarning
		handlerAction: 	[ :exception | self handleWarning: exception ]
	Receiver's instance variables: 
		outerContext: 	[ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
...etc...
		startpc: 	90
		numArgs: 	0


[ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an OrderedCollection(a RBSwapMethodRefactoring a RBSwap...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


BlockClosure>>on:do:
	Receiver: [ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure...etc...
	Arguments and temporary variables: 
		exception: 	RBRefactoringError
		handlerAction: 	[ :exception | self handleError: exception ]
	Receiver's instance variables: 
		outerContext: 	NautilusRefactoring>>performRefactorings:
		startpc: 	85
		numArgs: 	0


NautilusRefactoring>>performRefactorings:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollectionRefactoring: 	an OrderedCollection(a RBSwapMethodRefactoring a RBSwap...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


[ self performRefactorings: (self perform: aSymbol with: anArgument) ] in NautilusRefactoring>>performRefactoringsFor:with:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aSymbol: 	#privateSwapMethodFor:
		anArgument: 	an OrderedCollection(TBPost class>>#descriptionText TBPost class>>#...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


BlockClosure>>on:do:
	Receiver: [ self performRefactorings: (self perform: aSymbol with: anArgument) ]
	Arguments and temporary variables: 
		exception: 	RefactoringAborted
		handlerAction: 	[ :ex | self inform: 'Refactoring aborted' ]
	Receiver's instance variables: 
		outerContext: 	NautilusRefactoring>>performRefactoringsFor:with:
		startpc: 	43
		numArgs: 	0


NautilusRefactoring>>performRefactoringsFor:with:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aSymbol: 	#privateSwapMethodFor:
		anArgument: 	an OrderedCollection(TBPost class>>#descriptionText TBPost class>>#...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


NautilusRefactoring>>swapMethodFor:
	Receiver: a NautilusRefactoring
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection(TBPost class>>#descriptionText TBPost class>>...etc...
	Receiver's instance variables: 
		environment: 	a RBNamespace
		model: 	a NautilusUI
		promptOnRefactoring: 	nil


[ target refactor swapMethodFor: selectedMethods ] in TBPost class(ClassDescription)>>methodRefactoring:
	Receiver: TBPost
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a NautilusUI
		selectedMethod: 	nil
		selectedMethods: 	an OrderedCollection(TBPost class>>#descriptionText TBPost cla...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#beVisible->TBPost>>#beVisible #category->TBPost...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TBPost
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#TinyBlog
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>cull:
	Receiver: [ target refactor swapMethodFor: selectedMethods ]
	Arguments and temporary variables: 
		anArg: 	a NautilusUI
	Receiver's instance variables: 
		outerContext: 	TBPost class(ClassDescription)>>methodRefactoring:
		startpc: 	405
		numArgs: 	0


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(388204288)'Move to instance side'
	Arguments and temporary variables: 
		evt: 	[(729@300) mouseUp 89633878 nil]
		w: 	a WorldMorph(562956288) [world]
		selArgCount: 	1
	Receiver's instance variables: 
		bounds: 	(674.0@291.0) corner: (938.0@308.0)
		owner: 	a MenuMorph(732855808)
		submorphs: 	#()
		fullBounds: 	(674.0@291.0) corner: (938.0@308.0)
		color: 	Color black
		extension: 	a MorphExtension (902367744)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Move to instance side'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target refactor swapMethodFor: selectedMethods ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	138
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(388204288)'Move to instance side'
	Arguments and temporary variables: 
		evt: 	[(729@300) mouseUp 89633878 nil]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(674.0@291.0) corner: (938.0@308.0)
		owner: 	a MenuMorph(732855808)
		submorphs: 	#()
		fullBounds: 	(674.0@291.0) corner: (938.0@308.0)
		color: 	Color black
		extension: 	a MorphExtension (902367744)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Move to instance side'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target refactor swapMethodFor: selectedMethods ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(388204288)'Move to instance side'
	Arguments and temporary variables: 
		evt: 	[(729@300) mouseUp 89633878 nil]
	Receiver's instance variables: 
		bounds: 	(674.0@291.0) corner: (938.0@308.0)
		owner: 	a MenuMorph(732855808)
		submorphs: 	#()
		fullBounds: 	(674.0@291.0) corner: (938.0@308.0)
		color: 	Color black
		extension: 	a MorphExtension (902367744)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Move to instance side'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target refactor swapMethodFor: selectedMethods ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(388204288)'Move to instance side'
	Arguments and temporary variables: 
		anEvent: 	[(729@300) mouseUp 89633878 nil]
	Receiver's instance variables: 
		bounds: 	(674.0@291.0) corner: (938.0@308.0)
		owner: 	a MenuMorph(732855808)
		submorphs: 	#()
		fullBounds: 	(674.0@291.0) corner: (938.0@308.0)
		color: 	Color black
		extension: 	a MorphExtension (902367744)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Move to instance side'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target refactor swapMethodFor: selectedMethods ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(729@300) mouseUp 89633878 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(388204288)'Move to instance side'
	Receiver's instance variables: 
		timeStamp: 	89633878
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(729@300)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(388204288)'Move to instance side'
	Arguments and temporary variables: 
		anEvent: 	[(729@300) mouseUp 89633878 nil]
	Receiver's instance variables: 
		bounds: 	(674.0@291.0) corner: (938.0@308.0)
		owner: 	a MenuMorph(732855808)
		submorphs: 	#()
		fullBounds: 	(674.0@291.0) corner: (938.0@308.0)
		color: 	Color black
		extension: 	a MorphExtension (902367744)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Move to instance side'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	[ target refactor swapMethodFor: selectedMethods ]
		selector: 	#cull:
		arguments: 	an Array(a NautilusUI)
		icon: 	nil
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(729@300) mouseUp 89633878 nil]
		aMorph: 	a ToggleMenuItemMorph(388204288)'Move to instance side'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(388204288)'Move to instance side'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(729@300) mouseUp 89633878 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(388204288)'Move to instance side'


MouseButtonEvent>>sentTo:
	Receiver: [(729@300) mouseUp 89633878 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	89633878
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(729@300)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(729@300) mouseUp 89633878 nil]
		aMorph: 	a ToggleMenuItemMorph(388204288)'Move to instance side'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(388204288)'Move to instance side'



--- The full stack ---
UndefinedObject(Object)>>error:
UndefinedObject(Object)>>errorNotIndexable
UndefinedObject(Object)>>size
ReadStream(PositionableStream)>>on:
ReadStream class(PositionableStream class)>>on:
RBParser>>initializeParserWith:
RBParser class>>parseMethodPattern:
RBAddMethodChange>>selector
RBClass(RBAbstractClass)>>compile:classified:
RBSwapMethodRefactoring>>transform
RBSwapMethodRefactoring(RBRefactoring)>>primitiveExecute
[ :e | 
self refactoringOptions: e.
e primitiveExecute ] in NautilusRefactoring>>internalPerformRefactorings:
OrderedCollection>>do:
NautilusRefactoring>>internalPerformRefactorings:
[ self internalPerformRefactorings: aCollectionRefactoring ] in [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ] in [ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
BlockClosure>>on:do:
[ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ] in [ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
BlockClosure>>on:do:
[ [ [ self internalPerformRefactorings: aCollectionRefactoring ]
	on: RBRefactoringFailure
	do: [ :exception | self handleFailure: exception ] ]
	on: RBRefactoringWarning
	do: [ :exception | self handleWarning: exception ] ] in NautilusRefactoring>>performRefactorings:
BlockClosure>>on:do:
NautilusRefactoring>>performRefactorings:
[ self performRefactorings: (self perform: aSymbol with: anArgument) ] in NautilusRefactoring>>performRefactoringsFor:with:
BlockClosure>>on:do:
NautilusRefactoring>>performRefactoringsFor:with:
NautilusRefactoring>>swapMethodFor:
[ target refactor swapMethodFor: selectedMethods ] in TBPost class(ClassDescription)>>methodRefactoring:
BlockClosure>>cull:
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
20 August 2018 9:09:15.700404 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

TBSMagritteTextInputComponent(MAElementComponent)>>renderContentOn:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		html: 	a WAHtmlCanvas
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


WARenderVisitor>>visitPainter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPainter: 	a TBSMagritteTextInputComponent
		renderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPresenter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitComponent:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aComponent: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


TBSMagritteTextInputComponent(WAComponent)>>accept:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderVisitor
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


WARenderVisitor(WAVisitor)>>visit:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		anObject: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderingGuide(WAPresenterGuide)>>visitPainter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPainter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPresenter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitComponent:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aComponent: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


TBSMagritteTextInputComponent(WAComponent)>>accept:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderingGuide
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aComponent: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


TBSMagritteTextInputComponent(WAComponent)>>acceptDecorated:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderingGuide
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


WARenderingGuide(WAPresenterGuide)>>visit:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPainter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


TBSMagritteTextInputComponent(WAPainter)>>renderWithContext:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aRenderContext: 	a WARenderContext
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


TBSMagritteTextInputComponent(WAPainter)>>renderOn:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


TBSMagritteFormRenderer>>renderControl:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


[ self renderControl: aDescription.
self renderComment: aDescription.
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ self renderControl: aDescription.
self renderComment: aDescription.
self validationMessa...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class:...etc...
		startpc: 	134
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
s...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	TBSMagritteFormRenderer>>renderElement:
		startpc: 	108
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'



--- The full stack ---
TBSMagritteTextInputComponent(MAElementComponent)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBSMagritteTextInputComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBSMagritteTextInputComponent(WAComponent)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBSMagritteTextInputComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBSMagritteTextInputComponent(WAPainter)>>renderWithContext:
TBSMagritteTextInputComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
TBSMagritteFormRenderer>>renderControl:
[ self renderControl: aDescription.
self renderComment: aDescription.
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WAGenericTag(WATagBrush)>>with:
TBSMagritteFormRenderer>>renderElement:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitElementDescription:
TBSMagritteFormRenderer(MAVisitor)>>visitStringDescription:
MAStringDescription>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
[ :each | self visit: each ] in TBSMagritteFormRenderer(MAVisitor)>>visitAll:
SortedCollection(OrderedCollection)>>do:
MAPriorityContainer(MAContainer)>>do:
TBSMagritteFormRenderer(MAVisitor)>>visitAll:
TBSMagritteFormRenderer(MAComponentRenderer)>>renderContainer:
TBSMagritteFormRenderer>>renderContainer:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitContainer:
TBSMagritteFormRenderer(MAVisitor)>>visitPriorityContainer:
MAPriorityContainer>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
TBSMagritteFormRenderer(MAComponentRenderer)>>component:on:
TBSMagritteFormRenderer class(MAComponentRenderer class)>>component:on:
MAContainerComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
MAContainerComponent(WAPresenter)>>renderUndecoratedWithContext:
TBSMagritteFormDecoration(WADecoration)>>renderNextOn:
[ self renderNextOn: html.
self renderButtonsOn: html ] in TBSMagritteFormDecoration>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in TBSFormTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
TBSFormTag(WABrush)>>with:
TBSFormTag(WATagBrush)>>with:
TBSMagritteFormDecoration>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
TBSMagritteFormDecoration(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
MAContainerComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
MAContainerComponent(WAPainter)>>renderWithContext:
MAContainerComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsReport(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsReport(WAPainter)>>renderWithContext:
TBPostsReport(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ html heading: 'Blog Admin'.
html horizontalRule.
html render: self report ] in TBAdminComponent>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
WAHtmlCanvas>>tbsContainer:
TBAdminComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
TBAdminComponent(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBAdminComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBAdminComponent(WAPainter)>>renderWithContext:
TBAdminComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsListComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsListComponent(WAPainter)>>renderWithContext:
TBPostsListComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
TBApplicationRootComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
TBApplicationRootComponent(WAPresenter)>>renderUndecoratedWithContext:
WAToolDecoration(WADecoration)>>renderNextOn:
WAToolDecoration>>renderChildOn:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
20 August 2018 9:09:24.183 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

TBSMagritteTextAreaComponent(MAElementComponent)>>renderContentOn:
	Receiver: a TBSMagritteTextAreaComponent
	Arguments and temporary variables: 
		html: 	a WAHtmlCanvas
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextAreaComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAMemoDescription label: 'Text' comment: 'Please enter a text'
		parent: 	a MAContainerComponent


WARenderVisitor>>visitPainter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPainter: 	a TBSMagritteTextAreaComponent
		renderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPresenter: 	a TBSMagritteTextAreaComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitComponent:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aComponent: 	a TBSMagritteTextAreaComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


TBSMagritteTextAreaComponent(WAComponent)>>accept:
	Receiver: a TBSMagritteTextAreaComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderVisitor
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextAreaComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAMemoDescription label: 'Text' comment: 'Please enter a text'
		parent: 	a MAContainerComponent


WARenderVisitor(WAVisitor)>>visit:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		anObject: 	a TBSMagritteTextAreaComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderingGuide(WAPresenterGuide)>>visitPainter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPainter: 	a TBSMagritteTextAreaComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPresenter: 	a TBSMagritteTextAreaComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitComponent:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aComponent: 	a TBSMagritteTextAreaComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


TBSMagritteTextAreaComponent(WAComponent)>>accept:
	Receiver: a TBSMagritteTextAreaComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderingGuide
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextAreaComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAMemoDescription label: 'Text' comment: 'Please enter a text'
		parent: 	a MAContainerComponent


WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aComponent: 	a TBSMagritteTextAreaComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


TBSMagritteTextAreaComponent(WAComponent)>>acceptDecorated:
	Receiver: a TBSMagritteTextAreaComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderingGuide
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextAreaComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAMemoDescription label: 'Text' comment: 'Please enter a text'
		parent: 	a MAContainerComponent


WARenderingGuide(WAPresenterGuide)>>visit:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPainter: 	a TBSMagritteTextAreaComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


TBSMagritteTextAreaComponent(WAPainter)>>renderWithContext:
	Receiver: a TBSMagritteTextAreaComponent
	Arguments and temporary variables: 
		aRenderContext: 	a WARenderContext
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextAreaComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAMemoDescription label: 'Text' comment: 'Please enter a text'
		parent: 	a MAContainerComponent


TBSMagritteTextAreaComponent(WAPainter)>>renderOn:
	Receiver: a TBSMagritteTextAreaComponent
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextAreaComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAMemoDescription label: 'Text' comment: 'Please enter a text'
		parent: 	a MAContainerComponent


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	a TBSMagritteTextAreaComponent
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	a TBSMagritteTextAreaComponent
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


TBSMagritteFormRenderer>>renderControl:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAMemoDescription label: 'Text' comment: 'Please enter a text'
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


[ self renderControl: aDescription.
self renderComment: aDescription.
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAMemoDescription label: 'Text' comment: 'Please enter a text'
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ self renderControl: aDescription.
self renderComment: aDescription.
self validationMessa...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class:...etc...
		startpc: 	134
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAMemoDescription label: 'Text' comment: 'Please enter a text'
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
s...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	TBSMagritteFormRenderer>>renderElement:
		startpc: 	108
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'



--- The full stack ---
TBSMagritteTextAreaComponent(MAElementComponent)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBSMagritteTextAreaComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBSMagritteTextAreaComponent(WAComponent)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBSMagritteTextAreaComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBSMagritteTextAreaComponent(WAPainter)>>renderWithContext:
TBSMagritteTextAreaComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
TBSMagritteFormRenderer>>renderControl:
[ self renderControl: aDescription.
self renderComment: aDescription.
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WAGenericTag(WATagBrush)>>with:
TBSMagritteFormRenderer>>renderElement:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitElementDescription:
TBSMagritteFormRenderer(MAVisitor)>>visitStringDescription:
TBSMagritteFormRenderer(MAVisitor)>>visitMemoDescription:
MAMemoDescription>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
[ :each | self visit: each ] in TBSMagritteFormRenderer(MAVisitor)>>visitAll:
SortedCollection(OrderedCollection)>>do:
MAPriorityContainer(MAContainer)>>do:
TBSMagritteFormRenderer(MAVisitor)>>visitAll:
TBSMagritteFormRenderer(MAComponentRenderer)>>renderContainer:
TBSMagritteFormRenderer>>renderContainer:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitContainer:
TBSMagritteFormRenderer(MAVisitor)>>visitPriorityContainer:
MAPriorityContainer>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
TBSMagritteFormRenderer(MAComponentRenderer)>>component:on:
TBSMagritteFormRenderer class(MAComponentRenderer class)>>component:on:
MAContainerComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
MAContainerComponent(WAPresenter)>>renderUndecoratedWithContext:
TBSMagritteFormDecoration(WADecoration)>>renderNextOn:
[ self renderNextOn: html.
self renderButtonsOn: html ] in TBSMagritteFormDecoration>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in TBSFormTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
TBSFormTag(WABrush)>>with:
TBSFormTag(WATagBrush)>>with:
TBSMagritteFormDecoration>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
TBSMagritteFormDecoration(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
MAContainerComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
MAContainerComponent(WAPainter)>>renderWithContext:
MAContainerComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsReport(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsReport(WAPainter)>>renderWithContext:
TBPostsReport(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ html heading: 'Blog Admin'.
html horizontalRule.
html render: self report ] in TBAdminComponent>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
WAHtmlCanvas>>tbsContainer:
TBAdminComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
TBAdminComponent(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBAdminComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBAdminComponent(WAPainter)>>renderWithContext:
TBAdminComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsListComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsListComponent(WAPainter)>>renderWithContext:
TBPostsListComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
TBApplicationRootComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
TBApplicationRootComponent(WAPresenter)>>renderUndecoratedWithContext:
WAToolDecoration(WADecoration)>>renderNextOn:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
20 August 2018 9:09:36.803254 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

TBSMagritteTextInputComponent(MAElementComponent)>>renderContentOn:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		html: 	a WAHtmlCanvas
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Category' comment: 'Unclassified if ...etc...
		parent: 	a MAContainerComponent


WARenderVisitor>>visitPainter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPainter: 	a TBSMagritteTextInputComponent
		renderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPresenter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitComponent:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aComponent: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


TBSMagritteTextInputComponent(WAComponent)>>accept:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderVisitor
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Category' comment: 'Unclassified if ...etc...
		parent: 	a MAContainerComponent


WARenderVisitor(WAVisitor)>>visit:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		anObject: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderingGuide(WAPresenterGuide)>>visitPainter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPainter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPresenter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitComponent:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aComponent: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


TBSMagritteTextInputComponent(WAComponent)>>accept:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderingGuide
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Category' comment: 'Unclassified if ...etc...
		parent: 	a MAContainerComponent


WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aComponent: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


TBSMagritteTextInputComponent(WAComponent)>>acceptDecorated:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderingGuide
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Category' comment: 'Unclassified if ...etc...
		parent: 	a MAContainerComponent


WARenderingGuide(WAPresenterGuide)>>visit:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPainter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


TBSMagritteTextInputComponent(WAPainter)>>renderWithContext:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aRenderContext: 	a WARenderContext
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Category' comment: 'Unclassified if ...etc...
		parent: 	a MAContainerComponent


TBSMagritteTextInputComponent(WAPainter)>>renderOn:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Category' comment: 'Unclassified if ...etc...
		parent: 	a MAContainerComponent


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


TBSMagritteFormRenderer>>renderControl:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Category' comment: 'Unclassified if...etc...
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


[ self renderControl: aDescription.
self renderComment: aDescription.
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Category' comment: 'Unclassified if...etc...
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ self renderControl: aDescription.
self renderComment: aDescription.
self validationMessa...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class:...etc...
		startpc: 	134
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Category' comment: 'Unclassified if...etc...
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
s...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	TBSMagritteFormRenderer>>renderElement:
		startpc: 	108
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'form-group')
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'form-group')
		tag: 	'div'



--- The full stack ---
TBSMagritteTextInputComponent(MAElementComponent)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBSMagritteTextInputComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBSMagritteTextInputComponent(WAComponent)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBSMagritteTextInputComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBSMagritteTextInputComponent(WAPainter)>>renderWithContext:
TBSMagritteTextInputComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
TBSMagritteFormRenderer>>renderControl:
[ self renderControl: aDescription.
self renderComment: aDescription.
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WAGenericTag(WATagBrush)>>with:
TBSMagritteFormRenderer>>renderElement:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitElementDescription:
TBSMagritteFormRenderer(MAVisitor)>>visitStringDescription:
MAStringDescription>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
[ :each | self visit: each ] in TBSMagritteFormRenderer(MAVisitor)>>visitAll:
SortedCollection(OrderedCollection)>>do:
MAPriorityContainer(MAContainer)>>do:
TBSMagritteFormRenderer(MAVisitor)>>visitAll:
TBSMagritteFormRenderer(MAComponentRenderer)>>renderContainer:
TBSMagritteFormRenderer>>renderContainer:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitContainer:
TBSMagritteFormRenderer(MAVisitor)>>visitPriorityContainer:
MAPriorityContainer>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
TBSMagritteFormRenderer(MAComponentRenderer)>>component:on:
TBSMagritteFormRenderer class(MAComponentRenderer class)>>component:on:
MAContainerComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
MAContainerComponent(WAPresenter)>>renderUndecoratedWithContext:
TBSMagritteFormDecoration(WADecoration)>>renderNextOn:
[ self renderNextOn: html.
self renderButtonsOn: html ] in TBSMagritteFormDecoration>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in TBSFormTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
TBSFormTag(WABrush)>>with:
TBSFormTag(WATagBrush)>>with:
TBSMagritteFormDecoration>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
TBSMagritteFormDecoration(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
MAContainerComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
MAContainerComponent(WAPainter)>>renderWithContext:
MAContainerComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsReport(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsReport(WAPainter)>>renderWithContext:
TBPostsReport(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ html heading: 'Blog Admin'.
html horizontalRule.
html render: self report ] in TBAdminComponent>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
WAHtmlCanvas>>tbsContainer:
TBAdminComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
TBAdminComponent(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBAdminComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBAdminComponent(WAPainter)>>renderWithContext:
TBAdminComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsListComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsListComponent(WAPainter)>>renderWithContext:
TBPostsListComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
TBApplicationRootComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
TBApplicationRootComponent(WAPresenter)>>renderUndecoratedWithContext:
WAToolDecoration(WADecoration)>>renderNextOn:
WAToolDecoration>>renderChildOn:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
20 August 2018 9:09:45.811137 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

MADateInputComponent(MAElementComponent)>>renderContentOn:
	Receiver: a MADateInputComponent
	Arguments and temporary variables: 
		html: 	a WAHtmlCanvas
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a MADateInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MADateDescription label: 'Date' comment: nil
		parent: 	a MAContainerComponent


WARenderVisitor>>visitPainter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPainter: 	a MADateInputComponent
		renderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPresenter: 	a MADateInputComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitComponent:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aComponent: 	a MADateInputComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


MADateInputComponent(WAComponent)>>accept:
	Receiver: a MADateInputComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderVisitor
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a MADateInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MADateDescription label: 'Date' comment: nil
		parent: 	a MAContainerComponent


WARenderVisitor(WAVisitor)>>visit:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		anObject: 	a MADateInputComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderingGuide(WAPresenterGuide)>>visitPainter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPainter: 	a MADateInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPresenter: 	a MADateInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitComponent:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aComponent: 	a MADateInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


MADateInputComponent(WAComponent)>>accept:
	Receiver: a MADateInputComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderingGuide
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a MADateInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MADateDescription label: 'Date' comment: nil
		parent: 	a MAContainerComponent


WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aComponent: 	a MADateInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


MADateInputComponent(WAComponent)>>acceptDecorated:
	Receiver: a MADateInputComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderingGuide
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a MADateInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MADateDescription label: 'Date' comment: nil
		parent: 	a MAContainerComponent


WARenderingGuide(WAPresenterGuide)>>visit:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPainter: 	a MADateInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


MADateInputComponent(WAPainter)>>renderWithContext:
	Receiver: a MADateInputComponent
	Arguments and temporary variables: 
		aRenderContext: 	a WARenderContext
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a MADateInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MADateDescription label: 'Date' comment: nil
		parent: 	a MAContainerComponent


MADateInputComponent(WAPainter)>>renderOn:
	Receiver: a MADateInputComponent
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a MADateInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MADateDescription label: 'Date' comment: nil
		parent: 	a MAContainerComponent


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	a MADateInputComponent
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	a MADateInputComponent
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


TBSMagritteFormRenderer>>renderControl:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MADateDescription label: 'Date' comment: nil
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


[ self renderControl: aDescription.
self renderComment: aDescription.
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MADateDescription label: 'Date' comment: nil
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ self renderControl: aDescription.
self renderComment: aDescription.
self validationMessa...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class:...etc...
		startpc: 	134
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MADateDescription label: 'Date' comment: nil
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
s...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	TBSMagritteFormRenderer>>renderElement:
		startpc: 	108
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'



--- The full stack ---
MADateInputComponent(MAElementComponent)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
MADateInputComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
MADateInputComponent(WAComponent)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
MADateInputComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
MADateInputComponent(WAPainter)>>renderWithContext:
MADateInputComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
TBSMagritteFormRenderer>>renderControl:
[ self renderControl: aDescription.
self renderComment: aDescription.
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WAGenericTag(WATagBrush)>>with:
TBSMagritteFormRenderer>>renderElement:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitElementDescription:
TBSMagritteFormRenderer(MAVisitor)>>visitMagnitudeDescription:
TBSMagritteFormRenderer(MAVisitor)>>visitDateDescription:
MADateDescription>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
[ :each | self visit: each ] in TBSMagritteFormRenderer(MAVisitor)>>visitAll:
SortedCollection(OrderedCollection)>>do:
MAPriorityContainer(MAContainer)>>do:
TBSMagritteFormRenderer(MAVisitor)>>visitAll:
TBSMagritteFormRenderer(MAComponentRenderer)>>renderContainer:
TBSMagritteFormRenderer>>renderContainer:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitContainer:
TBSMagritteFormRenderer(MAVisitor)>>visitPriorityContainer:
MAPriorityContainer>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
TBSMagritteFormRenderer(MAComponentRenderer)>>component:on:
TBSMagritteFormRenderer class(MAComponentRenderer class)>>component:on:
MAContainerComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
MAContainerComponent(WAPresenter)>>renderUndecoratedWithContext:
TBSMagritteFormDecoration(WADecoration)>>renderNextOn:
[ self renderNextOn: html.
self renderButtonsOn: html ] in TBSMagritteFormDecoration>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in TBSFormTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
TBSFormTag(WABrush)>>with:
TBSFormTag(WATagBrush)>>with:
TBSMagritteFormDecoration>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
TBSMagritteFormDecoration(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
MAContainerComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
MAContainerComponent(WAPainter)>>renderWithContext:
MAContainerComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsReport(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsReport(WAPainter)>>renderWithContext:
TBPostsReport(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ html heading: 'Blog Admin'.
html horizontalRule.
html render: self report ] in TBAdminComponent>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
WAHtmlCanvas>>tbsContainer:
TBAdminComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
TBAdminComponent(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBAdminComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBAdminComponent(WAPainter)>>renderWithContext:
TBAdminComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsListComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsListComponent(WAPainter)>>renderWithContext:
TBPostsListComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
TBApplicationRootComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
TBApplicationRootComponent(WAPresenter)>>renderUndecoratedWithContext:
WAToolDecoration(WADecoration)>>renderNextOn:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
20 August 2018 9:33:20.620045 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

TBSMagritteTextInputComponent(MAElementComponent)>>renderContentOn:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		html: 	a WAHtmlCanvas
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


WARenderVisitor>>visitPainter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPainter: 	a TBSMagritteTextInputComponent
		renderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPresenter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitComponent:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aComponent: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


TBSMagritteTextInputComponent(WAComponent)>>accept:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderVisitor
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


WARenderVisitor(WAVisitor)>>visit:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		anObject: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderingGuide(WAPresenterGuide)>>visitPainter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPainter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPresenter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitComponent:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aComponent: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


TBSMagritteTextInputComponent(WAComponent)>>accept:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderingGuide
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aComponent: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


TBSMagritteTextInputComponent(WAComponent)>>acceptDecorated:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderingGuide
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


WARenderingGuide(WAPresenterGuide)>>visit:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPainter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


TBSMagritteTextInputComponent(WAPainter)>>renderWithContext:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aRenderContext: 	a WARenderContext
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


TBSMagritteTextInputComponent(WAPainter)>>renderOn:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


TBSMagritteFormRenderer>>renderControl:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


[ self renderControl: aDescription.
self renderComment: aDescription.
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ self renderControl: aDescription.
self renderComment: aDescription.
self validationMessa...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class:...etc...
		startpc: 	134
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self renderComment: aDescription....etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
s...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	TBSMagritteFormRenderer>>renderElement:
		startpc: 	108
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'



--- The full stack ---
TBSMagritteTextInputComponent(MAElementComponent)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBSMagritteTextInputComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBSMagritteTextInputComponent(WAComponent)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBSMagritteTextInputComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBSMagritteTextInputComponent(WAPainter)>>renderWithContext:
TBSMagritteTextInputComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
TBSMagritteFormRenderer>>renderControl:
[ self renderControl: aDescription.
self renderComment: aDescription.
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self renderComment: aDescription.
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WAGenericTag(WATagBrush)>>with:
TBSMagritteFormRenderer>>renderElement:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitElementDescription:
TBSMagritteFormRenderer(MAVisitor)>>visitStringDescription:
MAStringDescription>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
[ :each | self visit: each ] in TBSMagritteFormRenderer(MAVisitor)>>visitAll:
SortedCollection(OrderedCollection)>>do:
MAPriorityContainer(MAContainer)>>do:
TBSMagritteFormRenderer(MAVisitor)>>visitAll:
TBSMagritteFormRenderer(MAComponentRenderer)>>renderContainer:
TBSMagritteFormRenderer>>renderContainer:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitContainer:
TBSMagritteFormRenderer(MAVisitor)>>visitPriorityContainer:
MAPriorityContainer>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
TBSMagritteFormRenderer(MAComponentRenderer)>>component:on:
TBSMagritteFormRenderer class(MAComponentRenderer class)>>component:on:
MAContainerComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
MAContainerComponent(WAPresenter)>>renderUndecoratedWithContext:
TBSMagritteFormDecoration(WADecoration)>>renderNextOn:
[ self renderNextOn: html.
self renderButtonsOn: html ] in TBSMagritteFormDecoration>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in TBSFormTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
TBSFormTag(WABrush)>>with:
TBSFormTag(WATagBrush)>>with:
TBSMagritteFormDecoration>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
TBSMagritteFormDecoration(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
MAContainerComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
MAContainerComponent(WAPainter)>>renderWithContext:
MAContainerComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsReport(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsReport(WAPainter)>>renderWithContext:
TBPostsReport(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ html heading: 'Blog Admin'.
html horizontalRule.
html render: self report ] in TBAdminComponent>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
WAHtmlCanvas>>tbsContainer:
TBAdminComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
TBAdminComponent(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBAdminComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBAdminComponent(WAPainter)>>renderWithContext:
TBAdminComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsListComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsListComponent(WAPainter)>>renderWithContext:
TBPostsListComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
TBApplicationRootComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
TBApplicationRootComponent(WAPresenter)>>renderUndecoratedWithContext:
WAToolDecoration(WADecoration)>>renderNextOn:
WAToolDecoration>>renderChildOn:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
20 August 2018 9:37:10.954108 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

TBSMagritteTextInputComponent(MAElementComponent)>>renderContentOn:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		html: 	a WAHtmlCanvas
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


WARenderVisitor>>visitPainter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPainter: 	a TBSMagritteTextInputComponent
		renderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPresenter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitComponent:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aComponent: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


TBSMagritteTextInputComponent(WAComponent)>>accept:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderVisitor
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


WARenderVisitor(WAVisitor)>>visit:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		anObject: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderingGuide(WAPresenterGuide)>>visitPainter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPainter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPresenter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitComponent:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aComponent: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


TBSMagritteTextInputComponent(WAComponent)>>accept:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderingGuide
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aComponent: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


TBSMagritteTextInputComponent(WAComponent)>>acceptDecorated:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aVisitor: 	a WARenderingGuide
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


WARenderingGuide(WAPresenterGuide)>>visit:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPainter: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		client: 	a WARenderVisitor


TBSMagritteTextInputComponent(WAPainter)>>renderWithContext:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aRenderContext: 	a WARenderContext
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


TBSMagritteTextInputComponent(WAPainter)>>renderOn:
	Receiver: a TBSMagritteTextInputComponent
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a TBSMagritteTextInputComponent
		memento: 	a MACheckedMemento model: a TBPost
		description: 	a MAStringDescription label: 'Title' comment: 'Please enter a titl...etc...
		parent: 	a MAContainerComponent


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	a TBSMagritteTextInputComponent
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


TBSMagritteFormRenderer>>renderControl:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


[ self renderControl: aDescription.
self isReadonly
	ifFalse: [ self renderComment: aDescription ].
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self isReadonly
			ifFalse: [ self renderComment: aDescription ].
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ self renderControl: aDescription.
self isReadonly
	ifFalse: [ self renderComment: aDescr...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class:...etc...
		startpc: 	138
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self isReadonly
	ifFalse: [ self ...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self isReadonly
	ifFalse: [ self ...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self isReadonly
	ifFalse: [ self ...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self isReadonly
	ifFalse: [ self ...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self isReadonly
			ifFalse: [ self renderComment: aDescription ].
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
s...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	TBSMagritteFormRenderer>>renderElement:
		startpc: 	112
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'



--- The full stack ---
TBSMagritteTextInputComponent(MAElementComponent)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBSMagritteTextInputComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBSMagritteTextInputComponent(WAComponent)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBSMagritteTextInputComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBSMagritteTextInputComponent(WAPainter)>>renderWithContext:
TBSMagritteTextInputComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
TBSMagritteFormRenderer>>renderControl:
[ self renderControl: aDescription.
self isReadonly
	ifFalse: [ self renderComment: aDescription ].
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self isReadonly
			ifFalse: [ self renderComment: aDescription ].
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self isReadonly
			ifFalse: [ self renderComment: aDescription ].
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WAGenericTag(WATagBrush)>>with:
TBSMagritteFormRenderer>>renderElement:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitElementDescription:
TBSMagritteFormRenderer(MAVisitor)>>visitStringDescription:
MAStringDescription>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
[ :each | self visit: each ] in TBSMagritteFormRenderer(MAVisitor)>>visitAll:
SortedCollection(OrderedCollection)>>do:
MAPriorityContainer(MAContainer)>>do:
TBSMagritteFormRenderer(MAVisitor)>>visitAll:
TBSMagritteFormRenderer(MAComponentRenderer)>>renderContainer:
TBSMagritteFormRenderer>>renderContainer:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitContainer:
TBSMagritteFormRenderer(MAVisitor)>>visitPriorityContainer:
MAPriorityContainer>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
TBSMagritteFormRenderer(MAComponentRenderer)>>component:on:
TBSMagritteFormRenderer class(MAComponentRenderer class)>>component:on:
MAContainerComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
MAContainerComponent(WAPresenter)>>renderUndecoratedWithContext:
TBSMagritteFormDecoration(WADecoration)>>renderNextOn:
[ self renderNextOn: html.
self renderButtonsOn: html ] in TBSMagritteFormDecoration>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in TBSFormTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
TBSFormTag(WABrush)>>with:
TBSFormTag(WATagBrush)>>with:
TBSMagritteFormDecoration>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
TBSMagritteFormDecoration(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
MAContainerComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
MAContainerComponent(WAPainter)>>renderWithContext:
MAContainerComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsReport(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsReport(WAPainter)>>renderWithContext:
TBPostsReport(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ html heading: 'Blog Admin'.
html horizontalRule.
html render: self report ] in TBAdminComponent>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
WAHtmlCanvas>>tbsContainer:
TBAdminComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
TBAdminComponent(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBAdminComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBAdminComponent(WAPainter)>>renderWithContext:
TBAdminComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsListComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsListComponent(WAPainter)>>renderWithContext:
TBPostsListComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
TBApplicationRootComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
TBApplicationRootComponent(WAPresenter)>>renderUndecoratedWithContext:
WAToolDecoration(WADecoration)>>renderNextOn:
WAToolDecoration>>renderChildOn:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: TBSMagritteFormRenderer>>isReadonly
20 August 2018 9:37:25.896018 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

TBSMagritteFormRenderer(Object)>>doesNotUnderstand: #isReadonly
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aMessage: 	isReadonly
		exception: 	MessageNotUnderstood: TBSMagritteFormRenderer>>isReadonly
		resumeValue: 	nil
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


[ self renderControl: aDescription.
self isReadonly
	ifFalse: [ self renderComment: aDescription ].
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self isReadonly
			ifFalse: [ self renderComment: aDescription ].
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ self renderControl: aDescription.
self isReadonly
	ifFalse: [ self renderComment: aDescr...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class:...etc...
		startpc: 	138
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self isReadonly
	ifFalse: [ self ...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self isReadonly
	ifFalse: [ self ...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self isReadonly
	ifFalse: [ self ...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self isReadonly
	ifFalse: [ self ...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self isReadonly
			ifFalse: [ self renderComment: aDescription ].
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
s...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	TBSMagritteFormRenderer>>renderElement:
		startpc: 	112
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'


WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'


TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer(MAComponentRenderer)>>visitElementDescription:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer(MAVisitor)>>visitStringDescription:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		anObject: 	a MAStringDescription label: 'Title' comment: 'Please enter a title'
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


MAStringDescription>>acceptMagritte:
	Receiver: a MAStringDescription label: 'Title' comment: 'Please enter a title'
	Arguments and temporary variables: 
		aVisitor: 	a TBSMagritteFormRenderer
	Receiver's instance variables: 
		properties: 	a Dictionary(#comment->'Please enter a title' #componentClass->TBSM...etc...
		accessor: 	(MASelectorAccessor read: #title write: #title:)


TBSMagritteFormRenderer(MAVisitor)>>visit:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		anObject: 	a MAStringDescription label: 'Title' comment: 'Please enter a title'
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


[ :each | self visit: each ] in TBSMagritteFormRenderer(MAVisitor)>>visitAll:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aCollection: 	a MAPriorityContainer label: 'Post' comment: nil
		each: 	a MAStringDescription label: 'Title' comment: 'Please enter a title'
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


SortedCollection(OrderedCollection)>>do:
	Receiver: a SortedCollection(a MAStringDescription label: 'Title' comment: 'Please enter a title' a ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visit: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a MAStringDescription label: 'Title' comment: 'Please enter a t...etc...
		firstIndex: 	1
		lastIndex: 	5
		sortBlock: 	nil


MAPriorityContainer(MAContainer)>>do:
	Receiver: a MAPriorityContainer label: 'Post' comment: nil
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visit: each ]
	Receiver's instance variables: 
		properties: 	a Dictionary(#componentRenderer->TBSMagritteFormRenderer #label->'P...etc...
		accessor: 	nil
		children: 	a SortedCollection(a MAStringDescription label: 'Title' comment: 'Ple...etc...


TBSMagritteFormRenderer(MAVisitor)>>visitAll:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aCollection: 	a MAPriorityContainer label: 'Post' comment: nil
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer(MAComponentRenderer)>>renderContainer:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAPriorityContainer label: 'Post' comment: nil
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer>>renderContainer:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAPriorityContainer label: 'Post' comment: nil
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer(MAComponentRenderer)>>visitContainer:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAPriorityContainer label: 'Post' comment: nil
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer(MAVisitor)>>visitPriorityContainer:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		anObject: 	a MAPriorityContainer label: 'Post' comment: nil
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


MAPriorityContainer>>acceptMagritte:
	Receiver: a MAPriorityContainer label: 'Post' comment: nil
	Arguments and temporary variables: 
		aVisitor: 	a TBSMagritteFormRenderer
	Receiver's instance variables: 
		properties: 	a Dictionary(#componentRenderer->TBSMagritteFormRenderer #label->'P...etc...
		accessor: 	nil
		children: 	a SortedCollection(a MAStringDescription label: 'Title' comment: 'Ple...etc...


TBSMagritteFormRenderer(MAVisitor)>>visit:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		anObject: 	a MAPriorityContainer label: 'Post' comment: nil
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer(MAComponentRenderer)>>component:on:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aComponent: 	a MAContainerComponent
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false



--- The full stack ---
TBSMagritteFormRenderer(Object)>>doesNotUnderstand: #isReadonly
[ self renderControl: aDescription.
self isReadonly
	ifFalse: [ self renderComment: aDescription ].
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self isReadonly
			ifFalse: [ self renderComment: aDescription ].
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self isReadonly
			ifFalse: [ self renderComment: aDescription ].
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
TBSMagritteFormRenderer>>renderElement:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitElementDescription:
TBSMagritteFormRenderer(MAVisitor)>>visitStringDescription:
MAStringDescription>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
[ :each | self visit: each ] in TBSMagritteFormRenderer(MAVisitor)>>visitAll:
SortedCollection(OrderedCollection)>>do:
MAPriorityContainer(MAContainer)>>do:
TBSMagritteFormRenderer(MAVisitor)>>visitAll:
TBSMagritteFormRenderer(MAComponentRenderer)>>renderContainer:
TBSMagritteFormRenderer>>renderContainer:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitContainer:
TBSMagritteFormRenderer(MAVisitor)>>visitPriorityContainer:
MAPriorityContainer>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
TBSMagritteFormRenderer(MAComponentRenderer)>>component:on:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TBSMagritteFormRenderer class(MAComponentRenderer class)>>component:on:
MAContainerComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
MAContainerComponent(WAPresenter)>>renderUndecoratedWithContext:
TBSMagritteFormDecoration(WADecoration)>>renderNextOn:
[ self renderNextOn: html.
self renderButtonsOn: html ] in TBSMagritteFormDecoration>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in TBSFormTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
TBSFormTag(WABrush)>>with:
TBSFormTag(WATagBrush)>>with:
TBSMagritteFormDecoration>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
TBSMagritteFormDecoration(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
MAContainerComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
MAContainerComponent(WAPainter)>>renderWithContext:
MAContainerComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsReport(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsReport(WAPainter)>>renderWithContext:
TBPostsReport(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ html heading: 'Blog Admin'.
html horizontalRule.
html render: self report ] in TBAdminComponent>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
WAHtmlCanvas>>tbsContainer:
TBAdminComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
TBAdminComponent(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBAdminComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBAdminComponent(WAPainter)>>renderWithContext:
TBAdminComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsListComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsListComponent(WAPainter)>>renderWithContext:
TBPostsListComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
TBApplicationRootComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
TBApplicationRootComponent(WAPresenter)>>renderUndecoratedWithContext:
WAToolDecoration(WADecoration)>>renderNextOn:
WAToolDecoration>>renderChildOn:
WAToolDecoration>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAToolDecoration(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAToolDecoration(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBApplicationRootComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBApplicationRootComponent(WAPainter)>>renderWithContext:
WARenderPhaseContinuation>>processRendering:
[ :response | self processRendering: response ] in WARenderPhaseContinuation>>handleFiltered:
WARequestContext>>respond:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of TBSMagritteFormRenderer did not understand #isReadOnly
20 August 2018 9:37:37.15305 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

TBSMagritteFormRenderer(Object)>>doesNotUnderstand: #isReadOnly
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aMessage: 	isReadOnly
		exception: 	MessageNotUnderstood: TBSMagritteFormRenderer>>isReadOnly
		resumeValue: 	nil
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer>>DoItIn:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		ThisContext: 	TBSMagritteFormRenderer>>renderElement:
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'self isReadOnly'
		itsSelection: 	a Text for 'self isReadOnly'
		itsSelectionString: 	'self isReadOnly'
	Receiver's instance variables: 
		ast: 	DoItIn: ThisContext
	^ self isReadOnly
		source: 	a ReadStream
		context: 	TBSMagritteFormRenderer>>renderElement:
		receiver: 	a TBSMagritteFormRenderer
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	a TBSMagritteFormRenderer
		ctxt: 	TBSMagritteFormRenderer>>renderElement:
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(648652288)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(648652288)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1071166208)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoMethodRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoMethodRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	116155447
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoMethodRenderer)
	Arguments and temporary variables: 
		anArgument: 	116155464
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoMethodRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	116155447
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	116155464
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(204727808)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1704@1249)
		canvas: 	a FormCanvas on: DisplayScreen(1704x1249x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(592540416))(a Spec...etc...
		lastStepTime: 	116155441
		lastStepMessage: 	nil
		lastCycleTime: 	116155464
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(204727808)))
		lastAlarmTime: 	116155441
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	116155464
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1704@1249)
		canvas: 	a FormCanvas on: DisplayScreen(1704x1249x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(592540416))(a Spec...etc...
		lastStepTime: 	116155441
		lastStepMessage: 	nil
		lastCycleTime: 	116155464
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(204727808)))
		lastAlarmTime: 	116155441
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1704@1249)
		canvas: 	a FormCanvas on: DisplayScreen(1704x1249x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(592540416))(a Spec...etc...
		lastStepTime: 	116155441
		lastStepMessage: 	nil
		lastCycleTime: 	116155464
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(204727808)))
		lastAlarmTime: 	116155441
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1704@1249)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(39297536) a Spe...etc...
		fullBounds: 	(0@0) corner: (1704@1249)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (138913280) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1704@1249)
		canvas: 	a FormCanvas on: DisplayScreen(1704x1249x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(592540416))(a Spec...etc...
		lastStepTime: 	116155441
		lastStepMessage: 	nil
		lastCycleTime: 	116155464
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(204727808)))
		lastAlarmTime: 	116155441
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1704@1249)
		canvas: 	a FormCanvas on: DisplayScreen(1704x1249x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(592540416))(a Spec...etc...
		lastStepTime: 	116155441
		lastStepMessage: 	nil
		lastCycleTime: 	116155464
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(204727808)))
		lastAlarmTime: 	116155441
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1704@1249)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(39297536) a Spe...etc...
		fullBounds: 	(0@0) corner: (1704@1249)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (138913280) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TBSMagritteFormRenderer(Object)>>doesNotUnderstand: #isReadOnly
TBSMagritteFormRenderer>>DoItIn:
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of MAStringDescription did not understand #isReadOnly
20 August 2018 9:37:53.946939 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

MAStringDescription(Object)>>doesNotUnderstand: #isReadOnly
	Receiver: a MAStringDescription label: 'Title' comment: 'Please enter a title'
	Arguments and temporary variables: 
		aMessage: 	isReadOnly
		exception: 	MessageNotUnderstood: MAStringDescription>>isReadOnly
		resumeValue: 	nil
	Receiver's instance variables: 
		properties: 	a Dictionary(#comment->'Please enter a title' #componentClass->TBSM...etc...
		accessor: 	(MASelectorAccessor read: #title write: #title:)


TBSMagritteFormRenderer>>DoItIn:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		ThisContext: 	TBSMagritteFormRenderer>>renderElement:
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'aDescription isReadOnly'
		itsSelection: 	a Text for 'aDescription isReadOnly'
		itsSelectionString: 	'aDescription isReadOnly'
	Receiver's instance variables: 
		ast: 	DoItIn: ThisContext
	^ (ThisContext namedTempAt: 1) isReadOnly
		source: 	a ReadStream
		context: 	TBSMagritteFormRenderer>>renderElement:
		receiver: 	a TBSMagritteFormRenderer
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	a TBSMagritteFormRenderer
		ctxt: 	TBSMagritteFormRenderer>>renderElement:
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(98754304)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(98754304)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoMethodRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(301374976)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoMethodRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoMethodRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	116172249
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoMethodRenderer)
	Arguments and temporary variables: 
		anArgument: 	116172262
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoMethodRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	116172249
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	116172262
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(298199552)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1704@1249)
		canvas: 	a FormCanvas on: DisplayScreen(1704x1249x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(711228928))(a SearchMorp...etc...
		lastStepTime: 	116172241
		lastStepMessage: 	nil
		lastCycleTime: 	116172262
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(298199552)))
		lastAlarmTime: 	116172241
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	116172262
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1704@1249)
		canvas: 	a FormCanvas on: DisplayScreen(1704x1249x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(711228928))(a SearchMorp...etc...
		lastStepTime: 	116172241
		lastStepMessage: 	nil
		lastCycleTime: 	116172262
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(298199552)))
		lastAlarmTime: 	116172241
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1704@1249)
		canvas: 	a FormCanvas on: DisplayScreen(1704x1249x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(711228928))(a SearchMorp...etc...
		lastStepTime: 	116172241
		lastStepMessage: 	nil
		lastCycleTime: 	116172262
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(298199552)))
		lastAlarmTime: 	116172241
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1704@1249)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(39297536) a Spe...etc...
		fullBounds: 	(0@0) corner: (1704@1249)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (138913280) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1704@1249)
		canvas: 	a FormCanvas on: DisplayScreen(1704x1249x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(711228928))(a SearchMorp...etc...
		lastStepTime: 	116172241
		lastStepMessage: 	nil
		lastCycleTime: 	116172262
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(298199552)))
		lastAlarmTime: 	116172241
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1704@1249)
		canvas: 	a FormCanvas on: DisplayScreen(1704x1249x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(711228928))(a SearchMorp...etc...
		lastStepTime: 	116172241
		lastStepMessage: 	nil
		lastCycleTime: 	116172262
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(298199552)))
		lastAlarmTime: 	116172241
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1704@1249)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(39297536) a Spe...etc...
		fullBounds: 	(0@0) corner: (1704@1249)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (138913280) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.06 g: 0.06 b: 0.06 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
MAStringDescription(Object)>>doesNotUnderstand: #isReadOnly
TBSMagritteFormRenderer>>DoItIn:
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoMethodRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
20 August 2018 9:42:58.708763 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

[ self renderControl: aDescription.
self halt.
aDescription isReadonly
	ifFalse: [ self renderComment: aDescription ].
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self halt.
		aDescription isReadonly
			ifFalse: [ self renderComment: aDescription ].
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ self renderControl: aDescription.
self halt.
aDescription isReadonly
	ifFalse: [ self re...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class:...etc...
		startpc: 	142
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self halt.
aDescription isReadonl...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self halt.
aDescription isReadonl...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self halt.
aDescription isReadonl...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ self renderControl: aDescription.
self halt.
aDescription isReadonl...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	a WAGenericTag
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->'controls')
		tag: 	'div'


[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self halt.
		aDescription isReadonly
			ifFalse: [ self renderComment: aDescription ].
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
		tag: 	a WAGenericTag
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


BlockClosure>>renderOn:
	Receiver: [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
s...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	TBSMagritteFormRenderer>>renderElement:
		startpc: 	116
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'


BlockClosure>>renderOn:
	Receiver: [ self before.
canvas render: anObject.
self after ]
	Arguments and temporary variables: 
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		outerContext: 	WAGenericTag(WATagBrush)>>with:
		startpc: 	54
		numArgs: 	0


WAHtmlCanvas(WARenderer)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>render:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		anObject: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAHtmlCanvas(WACanvas)>>nest:
	Receiver: a WAHtmlCanvas
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	nil
		parentBrush: 	a WAGenericTag


WAGenericTag(WABrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		aBlock: 	[ self before.
canvas render: anObject.
self after ]
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'


WAGenericTag(WATagBrush)>>with:
	Receiver: a WAGenericTag
	Arguments and temporary variables: 
		anObject: 	[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'co...etc...
	Receiver's instance variables: 
		canvas: 	a WAHtmlCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('class'->a WAConcatenatedHtmlAttributeValue)
		tag: 	'div'


TBSMagritteFormRenderer>>renderElement:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer(MAComponentRenderer)>>visitElementDescription:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAStringDescription label: 'Title' comment: 'Please enter a tit...etc...
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer(MAVisitor)>>visitStringDescription:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		anObject: 	a MAStringDescription label: 'Title' comment: 'Please enter a title'
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


MAStringDescription>>acceptMagritte:
	Receiver: a MAStringDescription label: 'Title' comment: 'Please enter a title'
	Arguments and temporary variables: 
		aVisitor: 	a TBSMagritteFormRenderer
	Receiver's instance variables: 
		properties: 	a Dictionary(#comment->'Please enter a title' #componentClass->TBSM...etc...
		accessor: 	(MASelectorAccessor read: #title write: #title:)


TBSMagritteFormRenderer(MAVisitor)>>visit:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		anObject: 	a MAStringDescription label: 'Title' comment: 'Please enter a title'
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


[ :each | self visit: each ] in TBSMagritteFormRenderer(MAVisitor)>>visitAll:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aCollection: 	a MAPriorityContainer label: 'Post' comment: nil
		each: 	a MAStringDescription label: 'Title' comment: 'Please enter a title'
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


SortedCollection(OrderedCollection)>>do:
	Receiver: a SortedCollection(a MAStringDescription label: 'Title' comment: 'Please enter a title' a ...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visit: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a MAStringDescription label: 'Title' comment: 'Please enter a t...etc...
		firstIndex: 	1
		lastIndex: 	5
		sortBlock: 	nil


MAPriorityContainer(MAContainer)>>do:
	Receiver: a MAPriorityContainer label: 'Post' comment: nil
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visit: each ]
	Receiver's instance variables: 
		properties: 	a Dictionary(#componentRenderer->TBSMagritteFormRenderer #label->'P...etc...
		accessor: 	nil
		children: 	a SortedCollection(a MAStringDescription label: 'Title' comment: 'Ple...etc...


TBSMagritteFormRenderer(MAVisitor)>>visitAll:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aCollection: 	a MAPriorityContainer label: 'Post' comment: nil
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer(MAComponentRenderer)>>renderContainer:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAPriorityContainer label: 'Post' comment: nil
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer>>renderContainer:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAPriorityContainer label: 'Post' comment: nil
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer(MAComponentRenderer)>>visitContainer:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aDescription: 	a MAPriorityContainer label: 'Post' comment: nil
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer(MAVisitor)>>visitPriorityContainer:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		anObject: 	a MAPriorityContainer label: 'Post' comment: nil
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


MAPriorityContainer>>acceptMagritte:
	Receiver: a MAPriorityContainer label: 'Post' comment: nil
	Arguments and temporary variables: 
		aVisitor: 	a TBSMagritteFormRenderer
	Receiver's instance variables: 
		properties: 	a Dictionary(#componentRenderer->TBSMagritteFormRenderer #label->'P...etc...
		accessor: 	nil
		children: 	a SortedCollection(a MAStringDescription label: 'Title' comment: 'Ple...etc...


TBSMagritteFormRenderer(MAVisitor)>>visit:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		anObject: 	a MAPriorityContainer label: 'Post' comment: nil
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer(MAComponentRenderer)>>component:on:
	Receiver: a TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aComponent: 	a MAContainerComponent
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		component: 	a MAContainerComponent
		html: 	a WAHtmlCanvas
		errors: 	an IdentitySet()
		group: 	nil
		validationMessagesInline: 	false
		formInline: 	false
		formHorizontal: 	false


TBSMagritteFormRenderer class(MAComponentRenderer class)>>component:on:
	Receiver: TBSMagritteFormRenderer
	Arguments and temporary variables: 
		aComponent: 	a MAContainerComponent
		aRenderer: 	a WAHtmlCanvas
	Receiver's instance variables: 
		superclass: 	MAComponentRenderer
		methodDict: 	a MethodDictionary(#classFor:->TBSMagritteFormRenderer>>#classFor: ...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TBSMagritteFormRenderer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Bootstrap-Magritte-Core'
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
[ self renderControl: aDescription.
self halt.
aDescription isReadonly
	ifFalse: [ self renderComment: aDescription ].
self validationMessagesInline
	ifTrue: [ self renderInlineError: aDescription ] ] in [ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self halt.
		aDescription isReadonly
			ifFalse: [ self renderComment: aDescription ].
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
[ | tag |
self renderLabel: aDescription.
tag := html div
	class: 'controls';
	yourself.
self formHorizontal
	ifTrue: [ tag class: 'col-sm-10' ].
tag
	with: [ self renderControl: aDescription.
		self halt.
		aDescription isReadonly
			ifFalse: [ self renderComment: aDescription ].
		self validationMessagesInline
			ifTrue: [ self renderInlineError: aDescription ] ] ] in TBSMagritteFormRenderer>>renderElement:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
TBSMagritteFormRenderer>>renderElement:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitElementDescription:
TBSMagritteFormRenderer(MAVisitor)>>visitStringDescription:
MAStringDescription>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
[ :each | self visit: each ] in TBSMagritteFormRenderer(MAVisitor)>>visitAll:
SortedCollection(OrderedCollection)>>do:
MAPriorityContainer(MAContainer)>>do:
TBSMagritteFormRenderer(MAVisitor)>>visitAll:
TBSMagritteFormRenderer(MAComponentRenderer)>>renderContainer:
TBSMagritteFormRenderer>>renderContainer:
TBSMagritteFormRenderer(MAComponentRenderer)>>visitContainer:
TBSMagritteFormRenderer(MAVisitor)>>visitPriorityContainer:
MAPriorityContainer>>acceptMagritte:
TBSMagritteFormRenderer(MAVisitor)>>visit:
TBSMagritteFormRenderer(MAComponentRenderer)>>component:on:
TBSMagritteFormRenderer class(MAComponentRenderer class)>>component:on:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MAContainerComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
MAContainerComponent(WAComponent)>>accept:
MAContainerComponent(WAPresenter)>>renderUndecoratedWithContext:
TBSMagritteFormDecoration(WADecoration)>>renderNextOn:
[ self renderNextOn: html.
self renderButtonsOn: html ] in TBSMagritteFormDecoration>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in TBSFormTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
TBSFormTag(WABrush)>>with:
TBSFormTag(WATagBrush)>>with:
TBSMagritteFormDecoration>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
TBSMagritteFormDecoration(WADecoration)>>accept:
TBSMagritteFormDecoration(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
MAContainerComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
MAContainerComponent(WAPainter)>>renderWithContext:
MAContainerComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsReport(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsReport(WAPainter)>>renderWithContext:
TBPostsReport(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ html heading: 'Blog Admin'.
html horizontalRule.
html render: self report ] in TBAdminComponent>>renderContentOn:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
[ self before.
canvas render: anObject.
self after ] in WAGenericTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WAHtmlCanvas(WACanvas)>>nest:
WAGenericTag(WABrush)>>with:
WAGenericTag(WATagBrush)>>with:
WAHtmlCanvas>>tbsContainer:
TBAdminComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBAdminComponent(WAComponent)>>accept:
TBAdminComponent(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBAdminComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBAdminComponent(WAPainter)>>renderWithContext:
TBAdminComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBPostsListComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBPostsListComponent(WAPainter)>>renderWithContext:
TBPostsListComponent(WAPainter)>>renderOn:
WAHtmlCanvas(WARenderer)>>render:
WAHtmlCanvas(WACanvas)>>render:
TBApplicationRootComponent>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
TBApplicationRootComponent(WAComponent)>>accept:
TBApplicationRootComponent(WAPresenter)>>renderUndecoratedWithContext:
WAToolDecoration(WADecoration)>>renderNextOn:
WAToolDecoration>>renderChildOn:
WAToolDecoration>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAToolDecoration(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAToolDecoration(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
TBApplicationRootComponent(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
TBApplicationRootComponent(WAPainter)>>renderWithContext:
WARenderPhaseContinuation>>processRendering:
[ :response | self processRendering: response ] in WARenderPhaseContinuation>>handleFiltered:
WARequestContext>>respond:
WARenderPhaseContinuation(WASessionContinuation)>>respond:
-- and more not shown ---------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OCAbortCompilation
23 August 2018 2:52:26.505765 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
	Receiver: SyntaxErrorNotification
	Arguments and temporary variables: 
		aClass: 	Object
		codeString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNam...etc...
		doitFlag: 	false
		errorString: 	'Variable or expression expected'
		location: 	19
		sourceCode: 	nil
	Receiver's instance variables: 
		superclass: 	Notification
		methodDict: 	a MethodDictionary(#defaultAction->SyntaxErrorNotification>>#defaul...etc...
		format: 	65546
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SyntaxErrorNotification
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OpalCompiler-Core-Exception'
		traitComposition: 	{}
		localSelectors: 	nil


RBParser>>parserError:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	'Variable or expression expected'
		errorNode: 	nil
		errorMessage: 	'Variable or expression expected'
		errorPosition: 	19
		newSource: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parsePrimitiveObject
	Receiver: a RBParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseUnaryMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseBinaryMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseKeywordMessage
	Receiver: a RBParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseCascadeMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
		receiver: 	nil
		messages: 	nil
		semicolons: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseAssignment
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
		position: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseStatementList:into:
	Receiver: a RBParser
	Arguments and temporary variables: 
		pragmaBoolean: 	true
		sequenceNode: 	RBSequenceNode()
		statements: 	an OrderedCollection()
		return: 	false
		periods: 	an OrderedCollection()
		returnPosition: 	nil
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseStatements:into:
	Receiver: a RBParser
	Arguments and temporary variables: 
		pragmaBoolean: 	true
		aSequenceNode: 	RBSequenceNode()
		temps: 	#()
		leftBar: 	nil
		rightBar: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseMethod
	Receiver: a RBParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseMethod:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


[ parser parseMethod: aString ] in RBParser class>>parseMethod:onError:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
		aBlock: 	nil
		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>on:do:
	Receiver: [ parser parseMethod: aString ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :exception | self parseMethod: exception newSource onError: aB...etc...
	Receiver's instance variables: 
		outerContext: 	RBParser class>>parseMethod:onError:
		startpc: 	58
		numArgs: 	0


RBParser class>>parseMethod:onError:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
		aBlock: 	nil
		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


RBParser class>>parseMethod:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


OpalCompiler>>parseMethod
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		parseClass: 	RBParser
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>parse
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		expression: 	nil
		selector: 	nil
		arguments: 	nil
		method: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	OCSourceCodeChanged
		handlerAction: 	[ :notification | 
self source: notification newSourceCode.
noti...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ...etc...
		startpc: 	113
		numArgs: 	0


[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChange...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	109
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


MethodAddition>>createCompiledMethod
	Receiver: a MethodAddition
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ''...etc...
		category: 	#accessing
		changeStamp: 	'StephaneDucasse 8/19/2018 22:38'
		requestor: 	nil
		logSource: 	true
		myClass: 	TBAdminComponent
		selector: 	nil
		compiledMethod: 	nil
		priorMethodOrNil: 	nil
		priorCategoryOrNil: 	nil


MCMethodDefinition>>addMethodAdditionTo:
	Receiver: a MCMethodDefinition(TBAdminComponent>>#report)
	Arguments and temporary variables: 
		aCollection: 	an OrderedCollection(a MethodAddition a MethodAddition a MethodAdd...etc...
		methodAddition: 	a MethodAddition
	Receiver's instance variables: 
		classIsMeta: 	false
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		category: 	#accessing
		selector: 	#report
		className: 	#TBAdminComponent
		timeStamp: 	'StephaneDucasse 8/19/2018 22:38'


[ :each | each addMethodAdditionTo: methodAdditions ] in MCPackageLoader>>basicLoadDefinitions
	Receiver: a MCPackageLoader
	Arguments and temporary variables: 
		each: 	a MCMethodDefinition(TBAdminComponent>>#report)
	Receiver's instance variables: 
		requirements: 	#()
		unloadableDefinitions: 	a SortedCollection()
		obsoletions: 	a Dictionary(a MCClassDefinition(TBBlog)->a MCClassDefinition(TBBl...etc...
		additions: 	an OrderedCollection(a MCMethodDefinition(TBApplicationRootComponent...etc...
		removals: 	an OrderedCollection()
		errorDefinitions: 	an OrderedCollection(a MCMethodDefinition(TBAdminComponent>>#...etc...
		provisions: 	a Set(#MetacelloGenericProjectSpec #WindowCollapsed #MalReducedGrap...etc...
		methodAdditions: 	an OrderedCollection(a MethodAddition a MethodAddition a Metho...etc...


[ :each | 
| newLabel |
"Special handling for first and last element"
(count = 0
	or: [ count + 1 = size
			or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
	ifTrue: [ bar current: count.
		oldLabel = (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
			ifFalse: [ bar label: newLabel.
				oldLabel := newLabel ].
		lastUpdate := Time millisecondClockValue ].
aBlock value: each.
count := count + 1 ] in [ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aStringOrBlock.
		[ :dummyItem | aStringOrBlock ] ]
	ifFalse: [ aStringOrBlock ].
self
	do: [ :each | 
		| newLabel |
		"Special handling for first and last element"
		(count = 0
			or: [ count + 1 = size
					or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
			ifTrue: [ bar current: count.
				oldLabel
					= (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
					ifFalse: [ bar label: newLabel.
						oldLabel := newLabel ].
				lastUpdate := Time millisecondClockValue ].
		aBlock value: each.
		count := count + 1 ] ] in OrderedCollection(Collection)>>do:displayingProgress:every:
	Receiver: an OrderedCollection(a MCMethodDefinition(TBAdminComponent>>#report))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each addMethodAdditionTo: methodAdditions ]
		aStringOrBlock: 	'Reloading erroneous definitions...'
		msecs: 	20
		size: 	1
		bar: 	a Job
		count: 	0
		labelBlock: 	[ :dummyItem | aStringOrBlock ]
		oldLabel: 	'Reloading erroneous definitions...'
		lastUpdate: 	93991
		each: 	a MCMethodDefinition(TBAdminComponent>>#report)
		newLabel: 	'Reloading erroneous definitions...'
	Receiver's instance variables: 
		array: 	an Array(a MCMethodDefinition(TBAdminComponent>>#report) nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	1


OrderedCollection>>do:
	Receiver: an OrderedCollection(a MCMethodDefinition(TBAdminComponent>>#report))
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
| newLabel |
"Special handling for first and last element"
(...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a MCMethodDefinition(TBAdminComponent>>#report) nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	1


[ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aStringOrBlock.
		[ :dummyItem | aStringOrBlock ] ]
	ifFalse: [ aStringOrBlock ].
self
	do: [ :each | 
		| newLabel |
		"Special handling for first and last element"
		(count = 0
			or: [ count + 1 = size
					or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
			ifTrue: [ bar current: count.
				oldLabel
					= (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
					ifFalse: [ bar label: newLabel.
						oldLabel := newLabel ].
				lastUpdate := Time millisecondClockValue ].
		aBlock value: each.
		count := count + 1 ] ] in OrderedCollection(Collection)>>do:displayingProgress:every:
	Receiver: an OrderedCollection(a MCMethodDefinition(TBAdminComponent>>#report))
	Arguments and temporary variables: 
		aBlock: 	[ :each | each addMethodAdditionTo: methodAdditions ]
		aStringOrBlock: 	'Reloading erroneous definitions...'
		msecs: 	20
		size: 	1
		count: 	0
		labelBlock: 	[ :dummyItem | aStringOrBlock ]
		oldLabel: 	'Reloading erroneous definitions...'
		lastUpdate: 	93991
		bar: 	a Job
	Receiver's instance variables: 
		array: 	an Array(a MCMethodDefinition(TBAdminComponent>>#report) nil nil nil nil...etc...
		firstIndex: 	1
		lastIndex: 	1


BlockClosure>>cull:
	Receiver: [ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aStringOrBlock.
		[ ...etc...
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instance variables: 
		outerContext: 	OrderedCollection(Collection)>>do:displayingProgress:every:
		startpc: 	106
		numArgs: 	1


[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aS...etc...
		currentValue: 	0
		min: 	0
		max: 	1
		title: 	'Reloading erroneous definitions...'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	a Job
		process: 	a Process in nil


[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	a Job
	Receiver's instance variables: 
		index: 	8


BlockClosure>>ensure:
	Receiver: [ activeProcess psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ activeProcess psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentJob(DynamicVariable)>>value:during:
		startpc: 	47
		numArgs: 	0


CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	a Job
	Receiver's instance variables: 
		index: 	8


CurrentJob class(DynamicVariable class)>>value:during:
	Receiver: CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentJob
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Jobs-Base'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentJob


[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aS...etc...
		currentValue: 	0
		min: 	0
		max: 	1
		title: 	'Reloading erroneous definitions...'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	a Job
		process: 	a Process in nil


BlockClosure>>ensure:
	Receiver: [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ]
	Arguments and temporary variables: 
		aBlock: 	[ self cleanupAfterRunning ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Job>>run
		startpc: 	41
		numArgs: 	0


Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aS...etc...
		currentValue: 	0
		min: 	0
		max: 	1
		title: 	'Reloading erroneous definitions...'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	a Job
		process: 	a Process in nil


MorphicUIManager(UIManager)>>displayProgress:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Debug
23 August 2018 3:05:07.866815 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

SyntaxErrorDebugger class>>open:
	Receiver: SyntaxErrorDebugger
	Arguments and temporary variables: 
		aSyntaxError: 	a SyntaxErrorDebugger
		process: 	a Process in SyntaxErrorDebugger class>>open:
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependant:->SyntaxErrorDebugger>>#addDependa...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SyntaxErrorDebugger
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Debugger'
		traitComposition: 	{}
		localSelectors: 	nil


[ :tool | tool open: (tool syntaxError: anException) ] in MorphicUIManager>>syntaxErrorNotificationDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	SyntaxErrorNotification: Variable or expression expected
		tool: 	SyntaxErrorDebugger
	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


PharoCommonTools(ToolRegistry)>>using:do:
	Receiver: a PharoCommonTools
	Arguments and temporary variables: 
		aToolName: 	#syntaxErrorDebugger
		aBlock: 	[ :tool | tool open: (tool syntaxError: anException) ]
		tool: 	SyntaxErrorDebugger
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->EyeInspector #browser->Nautilus #...etc...
		recentTools: 	a Dictionary(#basicInspector->a Set(EyeInspector) #browser->a Set(...etc...


MorphicUIManager>>syntaxErrorNotificationDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


SyntaxErrorNotification>>defaultAction
	Receiver: SyntaxErrorNotification: Variable or expression expected
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Variable or expression expected'
		tag: 	nil
		signaler: 	a RBParser
		signalContext: 	SyntaxErrorNotification(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		inClass: 	Object
		code: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ''...etc...
		doitFlag: 	false
		location: 	19


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
nil

Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	WorldMorph(PasteUpMorph)>>becomeActiveDuring:
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	MCPackageLoader>>tryToLoad:
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ aDefinition addMethodAdditionTo: methodAdditions ]


SyntaxErrorNotification(Exception)>>pass
	Receiver: SyntaxErrorNotification: Variable or expression expected
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Variable or expression expected'
		tag: 	nil
		signaler: 	a RBParser
		signalContext: 	SyntaxErrorNotification(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		inClass: 	Object
		code: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ''...etc...
		doitFlag: 	false
		location: 	19


[ :exception | 
self compilationContext requestor
	ifNotNil: [ self compilationContext requestor
			notify: exception errorMessage , ' ->'
			at: exception location
			in: exception errorCode.
		^ self compilationContext failBlock value ]
	ifNil: [ exception pass ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>cull:
	Receiver: [ :exception | 
self compilationContext requestor
	ifNotNil: [ self compilationContext req...etc...
	Arguments and temporary variables: 
		anArg: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	151
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
		value: 	nil
	Receiver's instance variables: 
		sender: 	OpalCompiler>>compile
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	o...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	OpalCompiler>>compile
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	o...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on:...etc...
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	RBParser class>>parseMethod:onError:
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ parser parseMethod: aString ]


SyntaxErrorNotification(Exception)>>signal
	Receiver: SyntaxErrorNotification: Variable or expression expected
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Variable or expression expected'
		tag: 	nil
		signaler: 	a RBParser
		signalContext: 	SyntaxErrorNotification(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		inClass: 	Object
		code: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ''...etc...
		doitFlag: 	false
		location: 	19


SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
	Receiver: SyntaxErrorNotification
	Arguments and temporary variables: 
		aClass: 	Object
		codeString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNam...etc...
		doitFlag: 	false
		errorString: 	'Variable or expression expected'
		location: 	19
		sourceCode: 	nil
	Receiver's instance variables: 
		superclass: 	Notification
		methodDict: 	a MethodDictionary(#defaultAction->SyntaxErrorNotification>>#defaul...etc...
		format: 	65546
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SyntaxErrorNotification
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OpalCompiler-Core-Exception'
		traitComposition: 	{}
		localSelectors: 	nil


RBParser>>parserError:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	'Variable or expression expected'
		errorNode: 	nil
		errorMessage: 	'Variable or expression expected'
		errorPosition: 	19
		newSource: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parsePrimitiveObject
	Receiver: a RBParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseUnaryMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseBinaryMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseKeywordMessage
	Receiver: a RBParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseCascadeMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
		receiver: 	nil
		messages: 	nil
		semicolons: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseAssignment
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
		position: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseStatementList:into:
	Receiver: a RBParser
	Arguments and temporary variables: 
		pragmaBoolean: 	true
		sequenceNode: 	RBSequenceNode()
		statements: 	an OrderedCollection()
		return: 	false
		periods: 	an OrderedCollection()
		returnPosition: 	nil
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseStatements:into:
	Receiver: a RBParser
	Arguments and temporary variables: 
		pragmaBoolean: 	true
		aSequenceNode: 	RBSequenceNode()
		temps: 	#()
		leftBar: 	nil
		rightBar: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseMethod
	Receiver: a RBParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseMethod:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


[ parser parseMethod: aString ] in RBParser class>>parseMethod:onError:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
		aBlock: 	nil
		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>on:do:
	Receiver: [ parser parseMethod: aString ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :exception | self parseMethod: exception newSource onError: aB...etc...
	Receiver's instance variables: 
		outerContext: 	RBParser class>>parseMethod:onError:
		startpc: 	58
		numArgs: 	0


RBParser class>>parseMethod:onError:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
		aBlock: 	nil
		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


RBParser class>>parseMethod:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


OpalCompiler>>parseMethod
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		parseClass: 	RBParser
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>parse
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		expression: 	nil
		selector: 	nil
		arguments: 	nil
		method: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	OCSourceCodeChanged
		handlerAction: 	[ :notification | 
self source: notification newSourceCode.
noti...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ...etc...
		startpc: 	113
		numArgs: 	0


[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChange...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	109
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil



--- The full stack ---
SyntaxErrorDebugger class>>open:
[ :tool | tool open: (tool syntaxError: anException) ] in MorphicUIManager>>syntaxErrorNotificationDefaultAction:
PharoCommonTools(ToolRegistry)>>using:do:
MorphicUIManager>>syntaxErrorNotificationDefaultAction:
SyntaxErrorNotification>>defaultAction
UndefinedObject>>handleSignal:
Context>>handleSignal:
Context>>handleSignal:
SyntaxErrorNotification(Exception)>>pass
[ :exception | 
self compilationContext requestor
	ifNotNil: [ self compilationContext requestor
			notify: exception errorMessage , ' ->'
			at: exception location
			in: exception errorCode.
		^ self compilationContext failBlock value ]
	ifNil: [ exception pass ] ] in OpalCompiler>>compile
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
Context>>handleSignal:
Context>>handleSignal:
SyntaxErrorNotification(Exception)>>signal
SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
RBParser>>parserError:
RBParser>>parsePrimitiveObject
RBParser>>parseUnaryMessage
RBParser>>parseBinaryMessage
RBParser>>parseKeywordMessage
RBParser>>parseCascadeMessage
RBParser>>parseAssignment
RBParser>>parseStatementList:into:
RBParser>>parseStatements:into:
RBParser>>parseMethod
RBParser>>parseMethod:
[ parser parseMethod: aString ] in RBParser class>>parseMethod:onError:
BlockClosure>>on:do:
RBParser class>>parseMethod:onError:
RBParser class>>parseMethod:
OpalCompiler>>parseMethod
OpalCompiler>>parse
[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
BlockClosure>>on:do:
[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
BlockClosure>>on:do:
OpalCompiler>>compile
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MethodAddition>>createCompiledMethod
MCMethodDefinition>>addMethodAdditionTo:
[ aDefinition addMethodAdditionTo: methodAdditions ] in MCPackageLoader>>tryToLoad:
BlockClosure>>on:do:
MCPackageLoader>>tryToLoad:
[ :each | self tryToLoad: each ] in MCPackageLoader>>basicLoadDefinitions
[ :each | 
| newLabel |
"Special handling for first and last element"
(count = 0
	or: [ count + 1 = size
			or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
	ifTrue: [ bar current: count.
		oldLabel = (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
			ifFalse: [ bar label: newLabel.
				oldLabel := newLabel ].
		lastUpdate := Time millisecondClockValue ].
aBlock value: each.
count := count + 1 ] in [ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aStringOrBlock.
		[ :dummyItem | aStringOrBlock ] ]
	ifFalse: [ aStringOrBlock ].
self
	do: [ :each | 
		| newLabel |
		"Special handling for first and last element"
		(count = 0
			or: [ count + 1 = size
					or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
			ifTrue: [ bar current: count.
				oldLabel
					= (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
					ifFalse: [ bar label: newLabel.
						oldLabel := newLabel ].
				lastUpdate := Time millisecondClockValue ].
		aBlock value: each.
		count := count + 1 ] ] in OrderedCollection(Collection)>>do:displayingProgress:every:
OrderedCollection>>do:
[ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aStringOrBlock.
		[ :dummyItem | aStringOrBlock ] ]
	ifFalse: [ aStringOrBlock ].
self
	do: [ :each | 
		| newLabel |
		"Special handling for first and last element"
		(count = 0
			or: [ count + 1 = size
					or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
			ifTrue: [ bar current: count.
				oldLabel
					= (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
					ifFalse: [ bar label: newLabel.
						oldLabel := newLabel ].
				lastUpdate := Time millisecondClockValue ].
		aBlock value: each.
		count := count + 1 ] ] in OrderedCollection(Collection)>>do:displayingProgress:every:
BlockClosure>>cull:
[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
BlockClosure>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
BlockClosure>>ensure:
Job>>run
MorphicUIManager(UIManager)>>displayProgress:from:to:during:
ByteString(String)>>displayProgressFrom:to:during:
OrderedCollection(Collection)>>do:displayingProgress:every:
OrderedCollection(Collection)>>do:displayingProgress:
MCPackageLoader>>basicLoadDefinitions
[ self basicLoadDefinitions ] in MCPackageLoader>>basicLoad
[ aBlock value ] in SourceFileArray>>deferFlushDuring:
BlockClosure>>ensure:
SourceFileArray>>deferFlushDuring:
MCPackageLoader>>basicLoad
[ self basicLoad ] in MCPackageLoader>>loadWithNameLike:
BlockClosure>>ensure:
MCPackageLoader>>useChangeSetNamed:during:
MCPackageLoader>>useNewChangeSetNamedLike:during:
MCPackageLoader>>loadWithNameLike:
MCVersionLoader>>basicLoadWithNameLike:
[ self basicLoadWithNameLike: aString ] in MCVersionLoader>>loadWithNameLike:
[ returnValue := aBlock value ] in [ [ returnValue := aBlock value ]
	ensure: [ self announceLoadStop: aString ] ] in MCVersionLoader>>announceLoad:do:
BlockClosure>>ensure:
[ [ returnValue := aBlock value ]
	ensure: [ self announceLoadStop: aString ] ] in MCVersionLoader>>announceLoad:do:
BlockClosure>>ensure:
MCVersionLoader>>announceLoad:do:
MCVersionLoader>>loadWithNameLike:
[ self ensurePackage: version package.
self loadWithNameLike: version info name ] in [ | version |
version := versions first.
[ self ensurePackage: version package.
self loadWithNameLike: version info name ] asJob
	title: 'Loading ' , version info name asString;
	run ] in MCVersionLoader>>load
BlockClosure>>cull:
[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
BlockClosure>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
BlockClosure>>ensure:
Job>>run
[ | version |
version := versions first.
[ self ensurePackage: version package.
self loadWithNameLike: version info name ] asJob
	title: 'Loading ' , version info name asString;
	run ] in MCVersionLoader>>load
BlockClosure>>ensure:
RPackageSet class>>withCacheDo:
MCVersionLoader>>load
MCVersionLoader class>>loadVersion:
MCVersion>>load
[ self version load ] in MCFileRepositoryInspector(MCVersionInspector)>>load
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
MCFileRepositoryInspector(MCVersionInspector)>>load
MCFileRepositoryInspector>>load
MCFileRepositoryInspector(MCTool)>>performButtonAction:enabled:
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Debug
23 August 2018 3:05:08.452861 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

SyntaxErrorDebugger class>>open:
	Receiver: SyntaxErrorDebugger
	Arguments and temporary variables: 
		aSyntaxError: 	a SyntaxErrorDebugger
		process: 	a Process in SyntaxErrorDebugger class>>open:
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addDependant:->SyntaxErrorDebugger>>#addDependa...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SyntaxErrorDebugger
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Tools-Debugger'
		traitComposition: 	{}
		localSelectors: 	nil


[ :tool | tool open: (tool syntaxError: anException) ] in MorphicUIManager>>syntaxErrorNotificationDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	SyntaxErrorNotification: Variable or expression expected
		tool: 	SyntaxErrorDebugger
	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


PharoCommonTools(ToolRegistry)>>using:do:
	Receiver: a PharoCommonTools
	Arguments and temporary variables: 
		aToolName: 	#syntaxErrorDebugger
		aBlock: 	[ :tool | tool open: (tool syntaxError: anException) ]
		tool: 	SyntaxErrorDebugger
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->EyeInspector #browser->Nautilus #...etc...
		recentTools: 	a Dictionary(#basicInspector->a Set(EyeInspector) #browser->a Set(...etc...


MorphicUIManager>>syntaxErrorNotificationDefaultAction:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		anException: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


SyntaxErrorNotification>>defaultAction
	Receiver: SyntaxErrorNotification: Variable or expression expected
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Variable or expression expected'
		tag: 	nil
		signaler: 	a RBParser
		signalContext: 	SyntaxErrorNotification(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		inClass: 	Object
		code: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ''...etc...
		doitFlag: 	false
		location: 	19


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
nil

Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	WorldMorph(PasteUpMorph)>>becomeActiveDuring:
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	MCPackageLoader>>tryToLoad:
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ aDefinition addMethodAdditionTo: methodAdditions ]


SyntaxErrorNotification(Exception)>>pass
	Receiver: SyntaxErrorNotification: Variable or expression expected
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Variable or expression expected'
		tag: 	nil
		signaler: 	a RBParser
		signalContext: 	SyntaxErrorNotification(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		inClass: 	Object
		code: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ''...etc...
		doitFlag: 	false
		location: 	19


[ :exception | 
self compilationContext requestor
	ifNotNil: [ self compilationContext requestor
			notify: exception errorMessage , ' ->'
			at: exception location
			in: exception errorCode.
		^ self compilationContext failBlock value ]
	ifNil: [ exception pass ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>cull:
	Receiver: [ :exception | 
self compilationContext requestor
	ifNotNil: [ self compilationContext req...etc...
	Arguments and temporary variables: 
		anArg: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	151
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
		value: 	nil
	Receiver's instance variables: 
		sender: 	OpalCompiler>>compile
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	o...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	OpalCompiler>>compile
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	o...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on:...etc...
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	RBParser class>>parseMethod:onError:
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ parser parseMethod: aString ]


SyntaxErrorNotification(Exception)>>signal
	Receiver: SyntaxErrorNotification: Variable or expression expected
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Variable or expression expected'
		tag: 	nil
		signaler: 	a RBParser
		signalContext: 	SyntaxErrorNotification(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		inClass: 	Object
		code: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ''...etc...
		doitFlag: 	false
		location: 	19


SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
	Receiver: SyntaxErrorNotification
	Arguments and temporary variables: 
		aClass: 	Object
		codeString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNam...etc...
		doitFlag: 	false
		errorString: 	'Variable or expression expected'
		location: 	19
		sourceCode: 	nil
	Receiver's instance variables: 
		superclass: 	Notification
		methodDict: 	a MethodDictionary(#defaultAction->SyntaxErrorNotification>>#defaul...etc...
		format: 	65546
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SyntaxErrorNotification
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OpalCompiler-Core-Exception'
		traitComposition: 	{}
		localSelectors: 	nil


RBParser>>parserError:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	'Variable or expression expected'
		errorNode: 	nil
		errorMessage: 	'Variable or expression expected'
		errorPosition: 	19
		newSource: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parsePrimitiveObject
	Receiver: a RBParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseUnaryMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseBinaryMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseKeywordMessage
	Receiver: a RBParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseCascadeMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
		receiver: 	nil
		messages: 	nil
		semicolons: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseAssignment
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
		position: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseStatementList:into:
	Receiver: a RBParser
	Arguments and temporary variables: 
		pragmaBoolean: 	true
		sequenceNode: 	RBSequenceNode()
		statements: 	an OrderedCollection()
		return: 	false
		periods: 	an OrderedCollection()
		returnPosition: 	nil
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseStatements:into:
	Receiver: a RBParser
	Arguments and temporary variables: 
		pragmaBoolean: 	true
		aSequenceNode: 	RBSequenceNode()
		temps: 	#()
		leftBar: 	nil
		rightBar: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseMethod
	Receiver: a RBParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseMethod:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


[ parser parseMethod: aString ] in RBParser class>>parseMethod:onError:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
		aBlock: 	nil
		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>on:do:
	Receiver: [ parser parseMethod: aString ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :exception | self parseMethod: exception newSource onError: aB...etc...
	Receiver's instance variables: 
		outerContext: 	RBParser class>>parseMethod:onError:
		startpc: 	58
		numArgs: 	0


RBParser class>>parseMethod:onError:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
		aBlock: 	nil
		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


RBParser class>>parseMethod:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


OpalCompiler>>parseMethod
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		parseClass: 	RBParser
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>parse
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		expression: 	nil
		selector: 	nil
		arguments: 	nil
		method: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	OCSourceCodeChanged
		handlerAction: 	[ :notification | 
self source: notification newSourceCode.
noti...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ...etc...
		startpc: 	113
		numArgs: 	0


[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChange...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	109
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil



--- The full stack ---
SyntaxErrorDebugger class>>open:
[ :tool | tool open: (tool syntaxError: anException) ] in MorphicUIManager>>syntaxErrorNotificationDefaultAction:
PharoCommonTools(ToolRegistry)>>using:do:
MorphicUIManager>>syntaxErrorNotificationDefaultAction:
SyntaxErrorNotification>>defaultAction
UndefinedObject>>handleSignal:
Context>>handleSignal:
Context>>handleSignal:
SyntaxErrorNotification(Exception)>>pass
[ :exception | 
self compilationContext requestor
	ifNotNil: [ self compilationContext requestor
			notify: exception errorMessage , ' ->'
			at: exception location
			in: exception errorCode.
		^ self compilationContext failBlock value ]
	ifNil: [ exception pass ] ] in OpalCompiler>>compile
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
Context>>handleSignal:
Context>>handleSignal:
SyntaxErrorNotification(Exception)>>signal
SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
RBParser>>parserError:
RBParser>>parsePrimitiveObject
RBParser>>parseUnaryMessage
RBParser>>parseBinaryMessage
RBParser>>parseKeywordMessage
RBParser>>parseCascadeMessage
RBParser>>parseAssignment
RBParser>>parseStatementList:into:
RBParser>>parseStatements:into:
RBParser>>parseMethod
RBParser>>parseMethod:
[ parser parseMethod: aString ] in RBParser class>>parseMethod:onError:
BlockClosure>>on:do:
RBParser class>>parseMethod:onError:
RBParser class>>parseMethod:
OpalCompiler>>parseMethod
OpalCompiler>>parse
[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
BlockClosure>>on:do:
[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
BlockClosure>>on:do:
OpalCompiler>>compile
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MethodAddition>>createCompiledMethod
MCMethodDefinition>>addMethodAdditionTo:
[ aDefinition addMethodAdditionTo: methodAdditions ] in MCPackageLoader>>tryToLoad:
BlockClosure>>on:do:
MCPackageLoader>>tryToLoad:
[ :each | self tryToLoad: each ] in MCPackageLoader>>basicLoadDefinitions
[ :each | 
| newLabel |
"Special handling for first and last element"
(count = 0
	or: [ count + 1 = size
			or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
	ifTrue: [ bar current: count.
		oldLabel = (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
			ifFalse: [ bar label: newLabel.
				oldLabel := newLabel ].
		lastUpdate := Time millisecondClockValue ].
aBlock value: each.
count := count + 1 ] in [ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aStringOrBlock.
		[ :dummyItem | aStringOrBlock ] ]
	ifFalse: [ aStringOrBlock ].
self
	do: [ :each | 
		| newLabel |
		"Special handling for first and last element"
		(count = 0
			or: [ count + 1 = size
					or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
			ifTrue: [ bar current: count.
				oldLabel
					= (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
					ifFalse: [ bar label: newLabel.
						oldLabel := newLabel ].
				lastUpdate := Time millisecondClockValue ].
		aBlock value: each.
		count := count + 1 ] ] in OrderedCollection(Collection)>>do:displayingProgress:every:
OrderedCollection>>do:
[ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aStringOrBlock.
		[ :dummyItem | aStringOrBlock ] ]
	ifFalse: [ aStringOrBlock ].
self
	do: [ :each | 
		| newLabel |
		"Special handling for first and last element"
		(count = 0
			or: [ count + 1 = size
					or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
			ifTrue: [ bar current: count.
				oldLabel
					= (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
					ifFalse: [ bar label: newLabel.
						oldLabel := newLabel ].
				lastUpdate := Time millisecondClockValue ].
		aBlock value: each.
		count := count + 1 ] ] in OrderedCollection(Collection)>>do:displayingProgress:every:
BlockClosure>>cull:
[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
BlockClosure>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
BlockClosure>>ensure:
Job>>run
MorphicUIManager(UIManager)>>displayProgress:from:to:during:
ByteString(String)>>displayProgressFrom:to:during:
OrderedCollection(Collection)>>do:displayingProgress:every:
OrderedCollection(Collection)>>do:displayingProgress:
MCPackageLoader>>basicLoadDefinitions
[ self basicLoadDefinitions ] in MCPackageLoader>>basicLoad
[ aBlock value ] in SourceFileArray>>deferFlushDuring:
BlockClosure>>ensure:
SourceFileArray>>deferFlushDuring:
MCPackageLoader>>basicLoad
[ self basicLoad ] in MCPackageLoader>>loadWithNameLike:
BlockClosure>>ensure:
MCPackageLoader>>useChangeSetNamed:during:
MCPackageLoader>>useNewChangeSetNamedLike:during:
MCPackageLoader>>loadWithNameLike:
MCVersionLoader>>basicLoadWithNameLike:
[ self basicLoadWithNameLike: aString ] in MCVersionLoader>>loadWithNameLike:
[ returnValue := aBlock value ] in [ [ returnValue := aBlock value ]
	ensure: [ self announceLoadStop: aString ] ] in MCVersionLoader>>announceLoad:do:
BlockClosure>>ensure:
[ [ returnValue := aBlock value ]
	ensure: [ self announceLoadStop: aString ] ] in MCVersionLoader>>announceLoad:do:
BlockClosure>>ensure:
MCVersionLoader>>announceLoad:do:
MCVersionLoader>>loadWithNameLike:
[ self ensurePackage: version package.
self loadWithNameLike: version info name ] in [ | version |
version := versions first.
[ self ensurePackage: version package.
self loadWithNameLike: version info name ] asJob
	title: 'Loading ' , version info name asString;
	run ] in MCVersionLoader>>load
BlockClosure>>cull:
[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
BlockClosure>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
BlockClosure>>ensure:
Job>>run
[ | version |
version := versions first.
[ self ensurePackage: version package.
self loadWithNameLike: version info name ] asJob
	title: 'Loading ' , version info name asString;
	run ] in MCVersionLoader>>load
BlockClosure>>ensure:
RPackageSet class>>withCacheDo:
MCVersionLoader>>load
MCVersionLoader class>>loadVersion:
MCVersion>>load
[ self version load ] in MCFileRepositoryInspector(MCVersionInspector)>>load
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
MCFileRepositoryInspector(MCVersionInspector)>>load
MCFileRepositoryInspector>>load
MCFileRepositoryInspector(MCTool)>>performButtonAction:enabled:
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OCAbortCompilation
23 August 2018 3:06:56.075376 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
	Receiver: SyntaxErrorNotification
	Arguments and temporary variables: 
		aClass: 	STCommandLineHandler
		codeString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNam...etc...
		doitFlag: 	false
		errorString: 	'Variable or expression expected ->'
		location: 	19
		sourceCode: 	nil
	Receiver's instance variables: 
		superclass: 	Notification
		methodDict: 	a MethodDictionary(#defaultAction->SyntaxErrorNotification>>#defaul...etc...
		format: 	65546
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SyntaxErrorNotification
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OpalCompiler-Core-Exception'
		traitComposition: 	{}
		localSelectors: 	nil


MethodChunkCompilerRequestor>>notify:at:in:
	Receiver: a MethodChunkCompilerRequestor
	Arguments and temporary variables: 
		message: 	'Variable or expression expected ->'
		location: 	19
		code: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ''...etc...
		newSource: 	nil
	Receiver's instance variables: 
		methodChunk: 	a MethodChunk(TBScreenComponent subclass: #TBAdminComponent
	insta...etc...
		fileCompileRequestor: 	nil
		interactive: 	nil


[ :exception | 
self compilationContext requestor
	ifNotNil: [ self compilationContext requestor
			notify: exception errorMessage , ' ->'
			at: exception location
			in: exception errorCode.
		^ self compilationContext failBlock value ]
	ifNil: [ exception pass ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>cull:
	Receiver: [ :exception | 
self compilationContext requestor
	ifNotNil: [ self compilationContext req...etc...
	Arguments and temporary variables: 
		anArg: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	151
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
		value: 	nil
	Receiver's instance variables: 
		sender: 	OpalCompiler>>compile
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	o...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	OpalCompiler>>compile
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	o...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on:...etc...
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	RBParser class>>parseMethod:onError:
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ parser parseMethod: aString ]


SyntaxErrorNotification(Exception)>>signal
	Receiver: SyntaxErrorNotification: Variable or expression expected
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Variable or expression expected'
		tag: 	nil
		signaler: 	a RBParser
		signalContext: 	SyntaxErrorNotification(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		inClass: 	Object
		code: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ''...etc...
		doitFlag: 	false
		location: 	19


SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
	Receiver: SyntaxErrorNotification
	Arguments and temporary variables: 
		aClass: 	Object
		codeString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNam...etc...
		doitFlag: 	false
		errorString: 	'Variable or expression expected'
		location: 	19
		sourceCode: 	nil
	Receiver's instance variables: 
		superclass: 	Notification
		methodDict: 	a MethodDictionary(#defaultAction->SyntaxErrorNotification>>#defaul...etc...
		format: 	65546
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SyntaxErrorNotification
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OpalCompiler-Core-Exception'
		traitComposition: 	{}
		localSelectors: 	nil


RBParser>>parserError:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	'Variable or expression expected'
		errorNode: 	nil
		errorMessage: 	'Variable or expression expected'
		errorPosition: 	19
		newSource: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parsePrimitiveObject
	Receiver: a RBParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseUnaryMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseBinaryMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseKeywordMessage
	Receiver: a RBParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseCascadeMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
		receiver: 	nil
		messages: 	nil
		semicolons: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseAssignment
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
		position: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseStatementList:into:
	Receiver: a RBParser
	Arguments and temporary variables: 
		pragmaBoolean: 	true
		sequenceNode: 	RBSequenceNode()
		statements: 	an OrderedCollection()
		return: 	false
		periods: 	an OrderedCollection()
		returnPosition: 	nil
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseStatements:into:
	Receiver: a RBParser
	Arguments and temporary variables: 
		pragmaBoolean: 	true
		aSequenceNode: 	RBSequenceNode()
		temps: 	#()
		leftBar: 	nil
		rightBar: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseMethod
	Receiver: a RBParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseMethod:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


[ parser parseMethod: aString ] in RBParser class>>parseMethod:onError:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
		aBlock: 	nil
		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>on:do:
	Receiver: [ parser parseMethod: aString ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :exception | self parseMethod: exception newSource onError: aB...etc...
	Receiver's instance variables: 
		outerContext: 	RBParser class>>parseMethod:onError:
		startpc: 	58
		numArgs: 	0


RBParser class>>parseMethod:onError:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
		aBlock: 	nil
		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


RBParser class>>parseMethod:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


OpalCompiler>>parseMethod
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		parseClass: 	RBParser
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>parse
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		expression: 	nil
		selector: 	nil
		arguments: 	nil
		method: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	OCSourceCodeChanged
		handlerAction: 	[ :notification | 
self source: notification newSourceCode.
noti...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ...etc...
		startpc: 	113
		numArgs: 	0


[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChange...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	109
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


TBAdminComponent class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: TBAdminComponent
	Arguments and temporary variables: 
		text: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ''...etc...
		category: 	'accessing'
		changeStamp: 	'StephaneDucasse 8/19/2018 22:38'
		requestor: 	a MethodChunkCompilerRequestor
		logSource: 	true
		method: 	nil
		selector: 	nil
	Receiver's instance variables: 
		superclass: 	TBScreenComponent
		methodDict: 	a MethodDictionary(#children->TBAdminComponent>>#children #createHe...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TBAdminComponent
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TinyBlog-Components'
		traitComposition: 	{}
		localSelectors: 	nil


TBAdminComponent class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: TBAdminComponent
	Arguments and temporary variables: 
		text: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ''...etc...
		category: 	'accessing'
		changeStamp: 	'StephaneDucasse 8/19/2018 22:38'
		requestor: 	a MethodChunkCompilerRequestor
	Receiver's instance variables: 
		superclass: 	TBScreenComponent
		methodDict: 	a MethodDictionary(#children->TBAdminComponent>>#children #createHe...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TBAdminComponent
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TinyBlog-Components'
		traitComposition: 	{}
		localSelectors: 	nil


[ self targetClass
	compile: contents
	classified: categoryName
	withStamp: stamp
	notifying: (self methodCompileRequestorFor: requestor) ] in MethodChunk>>importFor:
	Receiver: a MethodChunk(TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: 'repor...etc...
	Arguments and temporary variables: 
		requestor: 	nil
	Receiver's instance variables: 
		contents: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames...etc...
		behaviorName: 	#TBAdminComponent
		isMeta: 	false
		categoryName: 	'accessing'
		stamp: 	'StephaneDucasse 8/19/2018 22:38'


BlockClosure>>on:do:
	Receiver: [ self targetClass
	compile: contents
	classified: categoryName
	withStamp: stamp
	notifyi...etc...
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :exception | 
contents := exception newSource.
self importFor:...etc...
	Receiver's instance variables: 
		outerContext: 	MethodChunk>>importFor:
		startpc: 	65
		numArgs: 	0


MethodChunk>>importFor:
	Receiver: a MethodChunk(TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: 'repor...etc...
	Arguments and temporary variables: 
		requestor: 	nil
	Receiver's instance variables: 
		contents: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames...etc...
		behaviorName: 	#TBAdminComponent
		isMeta: 	false
		categoryName: 	'accessing'
		stamp: 	'StephaneDucasse 8/19/2018 22:38'


[ :declaration | 
requestor ifNotNil: [ requestor contents: declaration contents ].
value := declaration importFor: requestor ] in CodeImporter>>evaluateDeclarations
	Receiver: a CodeImporter
	Arguments and temporary variables: 
		value: 	#renderContentOn:
		declaration: 	a MethodChunk(TBScreenComponent subclass: #TBAdminComponent
	insta...etc...
	Receiver's instance variables: 
		readStream: 	MultiByteFileStream: '/Users/ducasse/Workspace/FirstCircle/MyBooks/...etc...
		codeDeclarations: 	an OrderedCollection(a DoItChunk(SystemOrganization addCatego...etc...
		parserClass: 	ChunkFileFormatParser
		requestor: 	nil


OrderedCollection>>do:
	Receiver: an OrderedCollection(a DoItChunk(SystemOrganization addCategory: #TinyBlog) a DoItChunk(Sy...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :declaration | 
requestor ifNotNil: [ requestor contents: declaration...etc...
		index: 	100
	Receiver's instance variables: 
		array: 	an Array(a DoItChunk(SystemOrganization addCategory: #TinyBlog) a DoItCh...etc...
		firstIndex: 	1
		lastIndex: 	189



--- The full stack ---
SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
MethodChunkCompilerRequestor>>notify:at:in:
[ :exception | 
self compilationContext requestor
	ifNotNil: [ self compilationContext requestor
			notify: exception errorMessage , ' ->'
			at: exception location
			in: exception errorCode.
		^ self compilationContext failBlock value ]
	ifNil: [ exception pass ] ] in OpalCompiler>>compile
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
Context>>handleSignal:
Context>>handleSignal:
SyntaxErrorNotification(Exception)>>signal
SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
RBParser>>parserError:
RBParser>>parsePrimitiveObject
RBParser>>parseUnaryMessage
RBParser>>parseBinaryMessage
RBParser>>parseKeywordMessage
RBParser>>parseCascadeMessage
RBParser>>parseAssignment
RBParser>>parseStatementList:into:
RBParser>>parseStatements:into:
RBParser>>parseMethod
RBParser>>parseMethod:
[ parser parseMethod: aString ] in RBParser class>>parseMethod:onError:
BlockClosure>>on:do:
RBParser class>>parseMethod:onError:
RBParser class>>parseMethod:
OpalCompiler>>parseMethod
OpalCompiler>>parse
[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
BlockClosure>>on:do:
[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
BlockClosure>>on:do:
OpalCompiler>>compile
TBAdminComponent class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
TBAdminComponent class(ClassDescription)>>compile:classified:withStamp:notifying:
[ self targetClass
	compile: contents
	classified: categoryName
	withStamp: stamp
	notifying: (self methodCompileRequestorFor: requestor) ] in MethodChunk>>importFor:
BlockClosure>>on:do:
MethodChunk>>importFor:
[ :declaration | 
requestor ifNotNil: [ requestor contents: declaration contents ].
value := declaration importFor: requestor ] in CodeImporter>>evaluateDeclarations
OrderedCollection>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
CodeImporter>>evaluateDeclarations
CodeImporter class>>evaluateReadStream:
[ | newStream |
newSet
	ifNotNil: [ (aStream respondsTo: #converter:)
			ifFalse: [ newStream := MultiByteBinaryOrTextStream
					with: aStream contentsOfEntireFile.
				newStream reset ]
			ifTrue: [ newStream := aStream ].
		self newChanges: newSet.
		newStream setConverterForCode.
		CodeImporter evaluateReadStream: newStream readStream ].
aStream close ] in ChangeSet class>>newChangesFromStream:named:
BlockClosure>>ensure:
ChangeSet class>>newChangesFromStream:named:
[ ff := FileStream readOnlyFileNamed: fn.
self newChangesFromStream: ff named: fn asFileReference basename ] in ChangeSet class>>fileIntoNewChangeSet:
BlockClosure>>ensure:
ChangeSet class>>fileIntoNewChangeSet:
SimpleServiceEntry>>performServiceFor:
[ :stream | theOne performServiceFor: stream ] in ExternalDropHandler class>>lookupServiceBasedHandler:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
ExternalDropHandler>>handle:in:dropEvent:
[ handler
	ifNotNil: [ handler handle: stream in: self dropEvent: anEvent ] ] in WorldMorph(PasteUpMorph)>>dropFiles:
BlockClosure>>ensure:
WorldMorph(PasteUpMorph)>>dropFiles:
WorldMorph(Morph)>>handleDropFiles:
DropFilesEvent>>sentTo:
WorldMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleDropFiles:
DropFilesEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendEvent:focus:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OCAbortCompilation
23 August 2018 3:08:45.673739 pm

VM: Mac OS - intel - 1012.6 - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60541]

SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
	Receiver: SyntaxErrorNotification
	Arguments and temporary variables: 
		aClass: 	STCommandLineHandler
		codeString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNam...etc...
		doitFlag: 	false
		errorString: 	'Variable or expression expected ->'
		location: 	19
		sourceCode: 	nil
	Receiver's instance variables: 
		superclass: 	Notification
		methodDict: 	a MethodDictionary(#defaultAction->SyntaxErrorNotification>>#defaul...etc...
		format: 	65546
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SyntaxErrorNotification
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OpalCompiler-Core-Exception'
		traitComposition: 	{}
		localSelectors: 	nil


MethodChunkCompilerRequestor>>notify:at:in:
	Receiver: a MethodChunkCompilerRequestor
	Arguments and temporary variables: 
		message: 	'Variable or expression expected ->'
		location: 	19
		code: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ''...etc...
		newSource: 	nil
	Receiver's instance variables: 
		methodChunk: 	a MethodChunk(TBScreenComponent subclass: #TBAdminComponent
	insta...etc...
		fileCompileRequestor: 	nil
		interactive: 	nil


[ :exception | 
self compilationContext requestor
	ifNotNil: [ self compilationContext requestor
			notify: exception errorMessage , ' ->'
			at: exception location
			in: exception errorCode.
		^ self compilationContext failBlock value ]
	ifNil: [ exception pass ] ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>cull:
	Receiver: [ :exception | 
self compilationContext requestor
	ifNotNil: [ self compilationContext req...etc...
	Arguments and temporary variables: 
		anArg: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	151
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
		value: 	nil
	Receiver's instance variables: 
		sender: 	OpalCompiler>>compile
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	o...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	OpalCompiler>>compile
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	o...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on:...etc...
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification: Variable or expression expected
	Receiver's instance variables: 
		sender: 	RBParser class>>parseMethod:onError:
		pc: 	18
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ parser parseMethod: aString ]


SyntaxErrorNotification(Exception)>>signal
	Receiver: SyntaxErrorNotification: Variable or expression expected
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Variable or expression expected'
		tag: 	nil
		signaler: 	a RBParser
		signalContext: 	SyntaxErrorNotification(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		inClass: 	Object
		code: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ''...etc...
		doitFlag: 	false
		location: 	19


SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
	Receiver: SyntaxErrorNotification
	Arguments and temporary variables: 
		aClass: 	Object
		codeString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNam...etc...
		doitFlag: 	false
		errorString: 	'Variable or expression expected'
		location: 	19
		sourceCode: 	nil
	Receiver's instance variables: 
		superclass: 	Notification
		methodDict: 	a MethodDictionary(#defaultAction->SyntaxErrorNotification>>#defaul...etc...
		format: 	65546
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SyntaxErrorNotification
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OpalCompiler-Core-Exception'
		traitComposition: 	{}
		localSelectors: 	nil


RBParser>>parserError:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	'Variable or expression expected'
		errorNode: 	nil
		errorMessage: 	'Variable or expression expected'
		errorPosition: 	19
		newSource: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parsePrimitiveObject
	Receiver: a RBParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseUnaryMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseBinaryMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseKeywordMessage
	Receiver: a RBParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseCascadeMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
		receiver: 	nil
		messages: 	nil
		semicolons: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseAssignment
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
		position: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseStatementList:into:
	Receiver: a RBParser
	Arguments and temporary variables: 
		pragmaBoolean: 	true
		sequenceNode: 	RBSequenceNode()
		statements: 	an OrderedCollection()
		return: 	false
		periods: 	an OrderedCollection()
		returnPosition: 	nil
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseStatements:into:
	Receiver: a RBParser
	Arguments and temporary variables: 
		pragmaBoolean: 	true
		aSequenceNode: 	RBSequenceNode()
		temps: 	#()
		leftBar: 	nil
		rightBar: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseMethod
	Receiver: a RBParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseMethod:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBKeywordToken('subclass:')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ...etc...
		comments: 	an OrderedCollection()
		pragmas: 	nil


[ parser parseMethod: aString ] in RBParser class>>parseMethod:onError:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
		aBlock: 	nil
		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>on:do:
	Receiver: [ parser parseMethod: aString ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :exception | self parseMethod: exception newSource onError: aB...etc...
	Receiver's instance variables: 
		outerContext: 	RBParser class>>parseMethod:onError:
		startpc: 	58
		numArgs: 	0


RBParser class>>parseMethod:onError:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
		aBlock: 	nil
		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


RBParser class>>parseMethod:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames:...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


OpalCompiler>>parseMethod
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		parseClass: 	RBParser
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>parse
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		expression: 	nil
		selector: 	nil
		arguments: 	nil
		method: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	OCSourceCodeChanged
		handlerAction: 	[ :notification | 
self source: notification newSourceCode.
noti...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ...etc...
		startpc: 	113
		numArgs: 	0


[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChange...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	109
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


TBAdminComponent class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: TBAdminComponent
	Arguments and temporary variables: 
		text: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ''...etc...
		category: 	'accessing'
		changeStamp: 	'StephaneDucasse 8/19/2018 22:38'
		requestor: 	a MethodChunkCompilerRequestor
		logSource: 	true
		method: 	nil
		selector: 	nil
	Receiver's instance variables: 
		superclass: 	TBScreenComponent
		methodDict: 	a MethodDictionary(#children->TBAdminComponent>>#children #createHe...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TBAdminComponent
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TinyBlog-Components'
		traitComposition: 	{}
		localSelectors: 	nil


TBAdminComponent class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: TBAdminComponent
	Arguments and temporary variables: 
		text: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: ''...etc...
		category: 	'accessing'
		changeStamp: 	'StephaneDucasse 8/19/2018 22:38'
		requestor: 	a MethodChunkCompilerRequestor
	Receiver's instance variables: 
		superclass: 	TBScreenComponent
		methodDict: 	a MethodDictionary(#children->TBAdminComponent>>#children #createHe...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#TBAdminComponent
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'TinyBlog-Components'
		traitComposition: 	{}
		localSelectors: 	nil


[ self targetClass
	compile: contents
	classified: categoryName
	withStamp: stamp
	notifying: (self methodCompileRequestorFor: requestor) ] in MethodChunk>>importFor:
	Receiver: a MethodChunk(TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: 'repor...etc...
	Arguments and temporary variables: 
		requestor: 	nil
	Receiver's instance variables: 
		contents: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames...etc...
		behaviorName: 	#TBAdminComponent
		isMeta: 	false
		categoryName: 	'accessing'
		stamp: 	'StephaneDucasse 8/19/2018 22:38'


BlockClosure>>on:do:
	Receiver: [ self targetClass
	compile: contents
	classified: categoryName
	withStamp: stamp
	notifyi...etc...
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :exception | 
contents := exception newSource.
self importFor:...etc...
	Receiver's instance variables: 
		outerContext: 	MethodChunk>>importFor:
		startpc: 	65
		numArgs: 	0


MethodChunk>>importFor:
	Receiver: a MethodChunk(TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: 'repor...etc...
	Arguments and temporary variables: 
		requestor: 	nil
	Receiver's instance variables: 
		contents: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames...etc...
		behaviorName: 	#TBAdminComponent
		isMeta: 	false
		categoryName: 	'accessing'
		stamp: 	'StephaneDucasse 8/19/2018 22:38'


MethodChunk>>import
	Receiver: a MethodChunk(TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames: 'repor...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	'TBScreenComponent subclass: #TBAdminComponent
	instanceVariableNames...etc...
		behaviorName: 	#TBAdminComponent
		isMeta: 	false
		categoryName: 	'accessing'
		stamp: 	'StephaneDucasse 8/19/2018 22:38'


ByteSymbol(Symbol)>>value:
	Receiver: #import
	Arguments and temporary variables: 
		anObject: 	a MethodChunk(TBScreenComponent subclass: #TBAdminComponent
	instance...etc...
	Receiver's instance variables: 
#import


--- The full stack ---
SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
MethodChunkCompilerRequestor>>notify:at:in:
[ :exception | 
self compilationContext requestor
	ifNotNil: [ self compilationContext requestor
			notify: exception errorMessage , ' ->'
			at: exception location
			in: exception errorCode.
		^ self compilationContext failBlock value ]
	ifNil: [ exception pass ] ] in OpalCompiler>>compile
BlockClosure>>cull:
Context>>evaluateSignal:
Context>>handleSignal:
Context>>handleSignal:
Context>>handleSignal:
SyntaxErrorNotification(Exception)>>signal
SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
RBParser>>parserError:
RBParser>>parsePrimitiveObject
RBParser>>parseUnaryMessage
RBParser>>parseBinaryMessage
RBParser>>parseKeywordMessage
RBParser>>parseCascadeMessage
RBParser>>parseAssignment
RBParser>>parseStatementList:into:
RBParser>>parseStatements:into:
RBParser>>parseMethod
RBParser>>parseMethod:
[ parser parseMethod: aString ] in RBParser class>>parseMethod:onError:
BlockClosure>>on:do:
RBParser class>>parseMethod:onError:
RBParser class>>parseMethod:
OpalCompiler>>parseMethod
OpalCompiler>>parse
[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
BlockClosure>>on:do:
[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
BlockClosure>>on:do:
OpalCompiler>>compile
TBAdminComponent class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
TBAdminComponent class(ClassDescription)>>compile:classified:withStamp:notifying:
[ self targetClass
	compile: contents
	classified: categoryName
	withStamp: stamp
	notifying: (self methodCompileRequestorFor: requestor) ] in MethodChunk>>importFor:
BlockClosure>>on:do:
MethodChunk>>importFor:
MethodChunk>>import
ByteSymbol(Symbol)>>value:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
ExternalChangesBrowser>>fileIn:
[ self fileIn: changes selectedItemsSorted ] in ExternalChangesBrowser>>initializePresenter
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

