!Composants Visuels pour TinyBlog

Nous sommes prets à définir les composants visuels de notre petite application.
Les premiers chapitres de *http://book.seaside.st* peuvent vous aider.


La figure *@ComponentOverview* montre les différents composants que nous allons développer. 

+Les composants composant l'application TinyBlog.>file://figures/ComponentOverview.pdf|width=75|label=ComponentOverview+

!! Le composant TBScreenComponent

Le composant ==TBApplicationRootComponent== contiendra des composants sousclasses de la classe abstraite ==TBScreenComponent==. Cette classe nous permet de factoriser les comportements que nous souhaitons partager entre tous nos composants. 

[[[
WAComponent subclass: #TBScreenComponent
   instanceVariableNames: ''
   classVariableNames: ''
   package: 'TinyBlog-Components'
]]]

Les différents composants d'interface de TinyBlog auront besoin d'accéder aux règles métier de l'application. Dans le protocole 'accessing', créons un méthode ==blog== qui retourne l'instance de ==TBBlog==. 

[[[
TBScreenComponent >> blog
   "Return the current blog in the future we will ask the 
   session to return the blog of the currently logged user."
   ^ TBBlog current
]]]

Dans le futur, lorsque nous gérerons les utilisateurs et le fait qu'un utilisateurs puisse avoir plusieurs blogs nous modifierons cette méthode pour utiliser des informations stockées dans la session active (Voir TBSession plus loin). 

+Accès à la bibliothèque Bootstrap.>file://figures/SeasideBootstrap.png|width=75|label=bootstrap+

!! Bootstrap for Seaside

La bibliothèque Bootstrap est totallement accessible depuis Seaside comme nous allons le montrer.
Pour parcourir les nombreux exemples, cliquer sur le lien bootstrap dans la liste des applications servies par Seaside ou pointer votre navigateur sur le lien *http://localhost:8080/bootstrap*. Vous devez obtenir l'écran *@bootstrap*

Cliquer sur le lien ""Examples"" au bas de la page et vous pouvez ainsi voir les éléments graphiques ainsi que le code pour les obtenir comme montré par la figure *@examplebootstrap*. 

+Comprendre un élément et son code en Bootstrap.>file://figures/TBSAlert.png|width=75|label=examplebootstrap+

!!! Bootstrap

Le repository pour le source et la documentation est 
*http://smalltalkhub.com/#!/~TorstenBergmann/Bootstrap*.
Une demo en ligne est disponible à *http://pharo.pharocloud.com/bootstrap*.



!! Définition du composant TBHeaderComponent

Profitons de ce composant pour insérer dans la partie supérieure de chaque composant, l'instance d'un composant représentant l'entête de l'application.

[[[
WAComponent subclass: #TBHeaderComponent
   instanceVariableNames: ''
   classVariableNames: ''
   package: 'TinyBlog-Components'
]]]

Le protocole 'rendering' contient la méthode ==renderContentOn:== chargée d'afficher l'entête.

[[[
TBHeaderComponent >> renderContentOn: html
   html tbsNavbar beDefault with: [
      html tbsNavbarBrand
         url: '#';
         with: 'TinyBlog' ]
]]]

L'entête  (header) est affichée à l'aide d'une barre de navigation Bootstrap (voir la figure *@navBlog*)

Par défaut dans une barre de navigation Bootstrap, il y a un lien sur tbsNavbarBrand qui est ici inutile (sur le titre de l'application). Ici nous l'initialisons avec une ancre =='#'== de façon à ce que si l'utilisateur clique sur le titre, il ne se passe rien. En général, cliquer sur le titre de l'application permet de revenir à la page de départ du site. 




!!!! Améliorations possibles
Le nom du blog devrait être paramêtrable à l'aide d'une variable d'instance dans la classe ==TBBlog==
et le header pourrait représentait ce titre.


!! Utilisation du Header

Il n'est pas souhaitable d'instancier systématiquement le composant à chaque fois qu'un composant est appelé. Créons une variable d'instance ==header== dans ==TBScreenComponent== qui nous initialisons.

[[[
WAComponent subclass: #TBScreenComponent
   instanceVariableNames: 'header'
   classVariableNames: ''
   package: 'TinyBlog'
]]]

Créons une méthode ==initialize== dans le protocole 'initialize-release':

[[[
TBScreenComponent >> initialize
   super initialize.
   header := TBHeaderComponent new.
]]]

+TinyBlog avec une barre de navigation.>file://figures/navBlog.png|width=75|label=navBlog+

!!! Relation Composite-Composant
En Seaside, les sous-composants d'un composant doivent être retournés par le composite en réponse au message ==children==. Définissons que l'instance du composant ==TBHeaderComponent== est un enfant de ==TBScreenComponent== dans la hiérarchie de composants Seaside (en non entre classes Pharo). 

[[[
TBScreenComponent >> children
   ^ OrderedCollection with: header
]]]

Affichons maintenant le composant dans la méthode ==renderContentOn:== (protocole 'rendering'):

[[[
TBScreenComponent >> renderContentOn: html
   html render: header
]]]




!! Utilisation du Composant Screen

Bien que le composant ==TBScreenComposant== n'est pas vocation à être utilisé directement, nous allons l'utiliser de manière temporaire pendant que nous développons les autres composants. 

Ainsi nous l'instancions dans la méthode ==initialize== suivante. 

[[[
TBApplicationRootComponent >> initialize

   super initialize.
   main := TBScreenComponent new. 
]]]

[[[
TBApplicationRootComponent >> renderContentOn: html

   html render: main
]]]

[[[
TBApplicationRootComponent >> children

   ^ { main }
]]]

Si vous faites un rafraichissement de l'application vous devez voir la Figure *@navBlog*.




!! Liste des Posts

Nous allons afficher la liste des posts - ce qui reste d'ailleurs le but d'un blog. Ici nous parlons de l'accès public au lecteur du blog. Dans le futur, nous  proposerons une interface administrative des posts.


Créons un composant ==TBPostsListComponent== qui hérite de ==TBScreenComponent==:

[[[
TBScreenComponent subclass: #TBPostsListComponent
   instanceVariableNames: ''
   classVariableNames: ''
   package: 'TinyBlog-Components'
]]]

Ajoutons une méthode ==renderContentOn:== (protocole rendering) provisoire pour tester l'avancement de notre application (voir Figure *@elementary*).

[[[
TBPostsListComponent >> renderContentOn: html
   super renderContentOn: html.
   html text: 'Blog Posts here !!!'
]]]

Nous pouvons maintenant dire au composant de l'application d'utiliser ce composant. Pour cela nous redéfinissons la 

[[[
TBApplicationRootComponent >> initialize

   super initialize.
   main := TBPostsListComponent new. 
]]]

Editer cette méthode n'est guère propre. Nous ajoutons un setter qui nous permettra
de changer dynamiquement de composant dans le futur tout en gardant le composant actuel pour une initialisation par défaut. 

[[[
TBApplicationRootComponent >> main: aComponent

   main := aComponent
]]]

+TinyBlog avec une liste de posts plutot élémentaire.>file://figures/ElementaryListPost.png|width=75|label=elementary+





!! Le composant Post

Nous allons maintenant définir le composant ==TBPostComponent== qui affiche le contenu d'un post.

Chaque post du blog sera représenté visuellement par une instance de  ==TBPostComponent== qui affiche le titre, la date et le contenu d'un post.

[[[
WAComponent subclass: #TBPostComponent
   instanceVariableNames: 'post'
   classVariableNames: ''
   package: 'TinyBlog-Components'
]]]

[[[
TBPostComponent >> initialize
      super initialize.
      post := TBPost new.
]]]

[[[      
TBPostComponent >> title
   ^ post title
]]]

[[[
TBPostComponent >> text
   ^ post text
]]]

[[[
TBPostComponent >> date
   ^ post date
]]]

Ajoutons la méthode ==renderContentOn:== qui définie l'affichage du post.

[[[
TBPostComponent >> renderContentOn: html
   html heading level: 2; with: self title.
   html heading level: 6; with: self date.
   html text: self text
]]]


!!!! A propos de formulaire 
Nous montrerons dans le chapitre décrivant Magritte puis les interfaces d'administration, qu'il est rare de définir un composant de manière aussi manuelle. En effet Magritte en décrivant les données manipulées permet de générer automatiquement des composants Seaside. Le code équivalent serait comme suit: 

[[[
TBPostComponent >> renderContentOn: html
   html render: self asComponent
]]]


!! Afficher les posts

Maintenant nous pouvons afficher des posts présents dans la base.

Il ne reste plus qu'à modifier la méthode ==TBPostsListComponent >> renderContentOn:== pour afficher l'ensemble des blogs visibles présents dans la base.

[[[
TBPostsListComponent >> renderContentOn: html
   super renderContentOn: html.
   self blog allVisibleBlogPosts do: [ :p |
      html render: (TBPostComponent new post: p) ]
]]]

Rafraichissez la page et vous devez obtenir la Figure *@better*.

+TinyBlog avec une liste de posts.>file://figures/betterListPosts.png|width=75|label=better+

Nous allons utiliser Bootstrap pour rendre la liste un peu plus jolie en utilisant un container. 

[[[
TBPostsListComponent >> renderContentOn: html
   super renderContentOn: html.
   html tbsContainer: [ 
   self blog allVisibleBlogPosts do: [ :p |
      html render: (TBPostComponent new post: p) ] ]
]]]

Rafraichissez la page et vous devez obtenir la Figure *@container*.
+TinyBlog avec une liste de posts élémentaire.>file://figures/ContainerList.png|width=75|label=container+
   
Les dates sont affichées de manière étrange. Ceci est dû au fait que les dates sont en fait des instance de ==DateAndTime== donc nous les convertissons dans date comme suit. 

[[[
TBPostComponent >> date
   ^ post date asDate
]]]


!! Affichage des posts par catégorie

Les posts sont classés par catégorie. Par défaut, si aucune catégorie n'a été précisée, ils sont rangés dans une catégorie spéciale dénommée "Unclassified".

Nous allons créer un composant pour gérer une liste de catégories nommée: ==TBCategoriesComponent==.

!!! Categories

Nous avons besoin d'un composant qui affiche la liste des catégories présentes dans la base et permet d'en sélectionner une. Ce composant devra donc avoir la possibilité de communiquer avec le composant ==TBPostsListComponent== afin de lui communiquer la catégorie courante.

[[[
WAComponent subclass: #TBCategoriesComponent
   instanceVariableNames: 'categories postsList'
   classVariableNames: ''
   package: 'TinyBlog-Components'
]]]

[[[
TBCategoriesComponent >> categories
   ^ categories

TBCategoriesComponent >> categories: aCollection
   categories := aCollection

TBCategoriesComponent >> postsList: aComponent
      postsList := aComponent

TBCategoriesComponent >> postsList
   ^ postsList
]]]

Nous définissons aussi une méthode de création au niveau classe.

[[[
TBCategoriesComponent class >> categories: aCollectionOfCategories postsList: aTBScreen
   ^ self new categories: aCollectionOfCategories; postsList: aTBScreen 
]]]

La méthode ==selectCategory:== (protocole 'action') communique au composant ==TBPostsListComponent== la nouvelle catégorie courante.

[[[
TBCategoriesComponent >> selectCategory: aCategory
   postsList currentCategory: aCategory
]]]

Nous avons donc besoin d'ajouter une variable d'instance dans ==TBPostsListComponent==.

[[[
TBScreenComponent subclass: #TBPostsListComponent
   instanceVariableNames: 'currentCategory'
   classVariableNames: ''
   package: 'TinyBlog-Components'
]]]

[[[
TBScreenComponent >> currentCategory
   ^ currentCategory

TBScreenComponent >> currentCategory: anObject
   currentCategory := anObject
]]]

Nous pouvons maintenant ajouter une méthode (protocole 'rendering') pour afficher les catégories sur la page. En particulier pour chaque catégorie nous définissons le fait que cliquer sur la catégorie la sélectionne comme la catégorie courante.

[[[
TBCategoriesComponent >> renderCategoryLinkOn: html with: aCategory
   html tbsLinkifyListGroupItem
      callback: [ self selectCategory: aCategory ];
      with: aCategory
]]]

Reste maintenant à écrire la méthode de rendu du composant:

[[[
TBCategoriesComponent >> renderContentOn: html
   html tbsListGroup: [
     html tbsLinkifyListGroupItem beActive; with: 'Categories'.
     categories do: [ :cat | self renderCategoryLinkOn: html with: cat ]]
]]]

Nous avons presque fini. En effet, l'affichage des posts ne tient pas en compte de la catégorie courante. 

!!! Mise à jour des Posts
Nous devons aussi mettre à jour la liste des posts. Il faut gérer le rafraîchissement de la liste des posts en fonction de la catégorie choisie et donc modifier la méthode de rendu du composant ==TBPostsListComponent==.

La méthode ==readSelectedPosts== récupère dans la base les posts à afficher. Si elle vaut ==nil==, l'utilisateur n'a pas encore sélectionner une catégorie et l'ensemble des posts visibles de la base est affiché. Si elle contient une valeur autre que ==nil==, l'utilisateur a sélectionné une catégorie et l'application affiche alors la liste des posts attachés à la catégorie.

[[[
TBPostsListComponent >> readSelectedPosts
   ^ self currentCategory
      ifNil: [ self blog allVisibleBlogPosts ]
      ifNotNil: [ self blog allVisibleBlogPostsFromCategory: self currentCategory ]
]]]


Nous pouvons maintenant modifier la méthode chargée du rendu de la liste des posts:

[[[
TBPostsListComponent >> renderContentOn: html
   super renderContentOn: html.
   html render: (TBCategoriesComponent
               categories: (self blog allCategories)
               postsList: self).
   html tbsContainer: [ 
      self readSelectedPosts do: [ :p |
         html render: (TBPostComponent new post: p) ] ]
]]]

Une instance du composant ==TBCategoriesComponent== est ajoutée sur la page et permet de sélectionner la catégorie courante (voir figure *@ugly*).

+Catégories afin de sélectionner les posts.>file://figures/categoriesUgly.png|width=75|label=ugly+







!! Look et Agencement

Nous allons maintenant agencer le composant ==TBPostsListComponent==.

Mise en place d'un responsive design pour la liste des posts. Les composants sont placés dans un container Bootstrap puis agencés sur une ligne avec deux colonnes. La dimension des colonnes est déterminée en fonction de la résolution (viewport) du terminal utilisé. Les 12 colonnes de Bootstrap sont réparties entre la liste des catégories et la liste des posts. Dans le cas d'une résolution faible, la liste des catégories est placée au dessus de la liste des posts (chaque élément occupant 100\% de la largeur du container).

[[[
TBPostsListComponent >> renderContentOn: html
   super renderContentOn: html.
   html tbsContainer: [
      html tbsRow showGrid;
         with: [
            html tbsColumn
               extraSmallSize: 12;
               smallSize: 2;
               mediumSize:  4;
               with: [
                  html render: (TBCategoriesComponent
                    categories: (self blog allCategories)
                    postsList: self) ].
      html tbsColumn
               extraSmallSize: 12;
               smallSize: 10;
               mediumSize: 8;
               with: [
         self readSelectedPosts do: [ :p |
             html render: (TBPostComponent new post: p) ] ] ] ]
]]]

Vous devez obtenir une application proche de celle représentée figure *@nicer*.

+Avec un meilleur agencement.>file://figures/NicerCategories.png|width=75|label=nicer+


Bien que le code fonctionne, on ne doit pas laisser la méthode ==TBPostsListComponent >> renderContentOn: html== dans un tel état. Elle est bien trop longue et difficilement réutilisable. 
Proposer une solution. 

!!!! Notre solution

[[[
TBPostsListComponent >> renderContentOn: html
   super renderContentOn: html.
   html
      tbsContainer: [ 
         html tbsRow
            showGrid;
            with: [ self renderCategoryColumnOn: html.
                  self renderPostColumnOn: html ] ]
]]]

[[[
TBPostsListComponent >> renderCategoryColumnOn: html
   html tbsColumn
      extraSmallSize: 12;
      smallSize: 2;
      mediumSize: 4;
      with: [ self basicRenderCategoriesOn: html ]
]]]

[[[
TBPostsListComponent >> basicRenderCategoriesOn: html
   ^ html render: (TBCategoriesComponent 
         categories: self blog allCategories 
         postsList: self)
]]]

[[[   
TBPostsListComponent >> renderPostColumnOn: html
   html tbsColumn
         extraSmallSize: 12;
         smallSize: 10;
         mediumSize: 8;
         with: [ self basicRenderPostsOn: html ] 
]]]

[[[
basicRenderPostsOn: html
   ^ self readSelectedPosts do: [ :p | 
        html render: (TBPostComponent new post: p) ]
]]]


Nous voici prêts à définir la partie administrative de l'application.
