!Une interface REST pour TinyBlog

Ce chapitre décrit comment doter notre application TinyBlog d'une interface REST (REpresentational State Transfer).

Le code est placé dans un package =='TinyBlog-Rest'== car l'utilisation de REST est optionnelle. Les tests seront dans le package =='TinyBlog-Rest-Tests'==.

!!Définir un filtre REST

[[[
WARestfulFilter subclass: #TBRestfulFilter
	instanceVariableNames: ''
	classVariableNames: ''
	category: 'TinyBlog-REST'
]]]

!!!Associer un filtre à notre application

[[[
TBApplicationRootComponent class >> initialize
	   "self initialize"
	   | app |
	   app := WAAdmin register: self asApplicationAt: 'TinyBlog'.
		app
			preferenceAt: #sessionClass put: TBSession.
	   app
	      addLibrary: JQDeploymentLibrary;
	      addLibrary: JQUiDeploymentLibrary;
	      addLibrary: TBSDeploymentLibrary.
		app addFilter: TBRestfulFilter new.
]]]

Ne pas oublier d'initialiser la classe TBAppllicationRootComponent en saisissant dans le playGround. Ceci permet à Seaside de prendre en compte le filtre REST qui a été ajouté.

[[[
TBApplicationRootComponent initialize
]]]

!!Obtenir

[[[
TBRestfulFilter >> listAll
	<get>
	<produces: 'text/json'>
	
	^String streamContents: [ :aStream |
		TBBlog current allBlogPosts
			do: [ :each | each javascriptOn: aStream ]
			separatedBy: [ aStream << ',' ]
	]
]]]

Il est rarement utile de retourner l'ensemble des informations pour chaque post. Modifions ce code pour ne retourner que les champs les plus pertinants pour décrire un post. Pour cela, il faut tout d'abord définir comment un post est converti en Javascript.

[[[
TBPost >> javascriptOn: aStream

	Dictionary new
			at: #title put: self title;
			at: #categroy put: self category;
			at: #date put: self  date;
			at: #text put: self  text;
			javascriptOn: aStream
]]]

Nous pouvons ensuite modifier la méthode ==listAll== afin de prendre en compte la sélection des champs.

[[[
TBRestfulFilter >> listAll
  <get>
  <produces: 'text/json'>

  ^ String streamContents: [ :astream |
		astream << '['.
		TBBlog current allBlogPosts
			do: [ :each | each javascriptOn: astream]
			separatedBy: [ astream << ',' ].
		]
]]]

Nous raffinons afin de pouvoir sélectionner les attributs que nous voulons convertir en introduisant la méthode ==javascriptOn: aStream attributes: aCollection==.

[[[
TBPost >> javascriptOn: aStream attributes: aCollection
	
	| dictionary |
	dictionary := Dictionary new.
	aCollection do: [ :each |
				dictionary at: each put: (self perform: each asSymbol) ].
	^ dictionary javascriptOn: aStream
]]]

[[[
TBPost >> javascriptOn: aStream

	^ self javascriptOn: aStream attributes: #(title category date)
]]]


!!!Recherche d'un Post

Maintenant nous allons proposer d'autres fonctionnalités comme la recherche d'un post.
Nous définissons donc cette fonctionnalité dans la classe ==TBlog==.

[[[
TBRestfulFilter >> search: title
	<get>
	<path: 'search?title={title}'>
	<produces: 'text/json'>
   | post |
	post := TBBlog current postWithTitle: title.
	post ifNil: [ ^ self notFound ].
   ^ String streamContents: [ :astream |
		post javascriptOn: astream attributes: #(title category date text)]
]]]

[[[
TBRestfulFilter >> notFound

	|  |
	"trick self halt puis dans le debugger req := self requestContext."
	self requestContext responseGenerator
		notFound;
		respond
]]]

+REST Error.>file://figures/RESTError.png|width=75|label=error+

[[[
http://localhost:8080/TinyBlog/search?title=Welcome%20in%20TinyBlog
]]]


!!!!Chercher selon le titre
[[[
TBBlog >> postWithTitle: aString
	
	^ self allBlogPosts
			detect: [ :each | each title = aString ]
			ifNone: [ nil ]
]]]

[[[
TBRestfulFilter >> post: title
	<get>
	<path: 'post/{title}'>
	<produces: 'text/json'>
   | post |
	post := TBBlog current postWithTitle: title.
	post ifNil: [ ^ self notFound ].
   ^ String streamContents: [ :astream |
		post javascriptOn: astream ]
]]]

Nous pouvons tester en effectuant la requête suivante :

[[[
http://localhost:8080/TinyBlog/post/Welcome%20in%20TinyBlog
]]]

+REST post.>file://figures/RestPost.png|width=75|label=post+

!!!!Chercher selon une période

[[[
TBRestfulFilter >> searchDateFrom: beginString to: endString
	<get>
	<path: 'search?begin={beginString}&end={endString}'>
	<produces: 'text/json'>
   | posts dateFrom dateTo |

	dateFrom := Date fromString: beginString.
	dateTo := Date fromString: endString.
	
	posts := TBBlog current allBlogPosts
		select: [  :each | each date between: dateFrom and: dateTo ].
	
	^ String streamContents: [ :astream |
	 	astream << '['.
  		posts
			do: [ :each | each javascriptOn: astream]
			separatedBy: [ astream << ',' ].
		astream << ']'
		]
		
]]]

+Avec des dates.>file://figures/RestWithDate.png|width=75|label=RestWithDate+


!!!Ajouter un post

[[[
TBRestfulFilter >> addPost
	<post>
	<path: '/add-post'>
	
	| request title category date text post |

	request := self requestContext request.
	title := request at: #title.
	category := request at: #category.
	text := request at: #text.
	date := Date fromString: (request at: #title).
	"Of course many can go wrong here (Date could be wrong ... and a real version we should validate"
	post := TBBlog new
		title: title;
		text: text;
		category: category;
		date: date;
		yourself.
	TBBlog current writeBlogPost: post.
	^ '{status: "ok"}'
]]]


[[[
	ZnClient new
		url: 'http://localhost:8080/TinyBlog/add-post';
		formAt: 'title' put: 'Exemple de POST';
		formAt: 'category' put: 'TEST';
		formAt: 'date' put: '12/23/2015';
		contents: 'Ici un super post';
		post.
]]]



!!!Modifier un POST


!!!Effacer un post

[[[
TBRestfulFilter >> remove: title
	<delete>
	<path: '/remove/{title}'>
	<produces: 'text/json'>
	
	| post |
	
	post := TBBlog current postWithTitle: title.
	^ post
		ifNotNil: [
			post remove.
			'{status: "ok"}' ]
		ifNil: [
			'{status: "notFound"}' ]
]]]

Notez que status n'est pas du REST car REST ne spécifie pas la manière de gérer les erreurs.
Maintenant ce code ne fonctionne pas car ==TBPost== n'est pas une racine en Voyage.

Essayons mais nous ne pouvons pas tester avec un browser web dans son url ne peut faire qu'un GET.
Donc il nous faut utiliser Zinc.

[[[
ZnEasy delete: 'http://localhost:8080/TinyBlog/remove/RemoveMe'
]]]

Vous pouvez vérifiez que votre post n'est pas enlevé.

[[[
TBRestfulFilter >> remove: title
	<delete>
	<path: '/remove/{title}'>
	<produces: 'text/json'>
	
	| post |
	post := TBBlog current postWithTitle: title.
	^ post
		ifNotNil: [
			TBBlog current removeBlogPost: post.
			'{status: "ok"}' ]
		ifNil: [
			'{status: "notFound"}' ]
]]]

Maintenant nous réessayons et nous pouvons effectivement éliminer un post.

[[[
ZnEasy delete: 'http://localhost:8080/TinyBlog/remove/RemoveMe'
]]]

Vous pouvez vérifiez que votre post n'est pas enlever.

@@todo bizarre, il est enlevé ou pas?








[[[
javascriptOn: aStream

   ^ self javascriptOn: aStream attributes: #(title category date text)
]]]





