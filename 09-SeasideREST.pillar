!Une interface REST pour TinyBlog

Accéder et de modifier une application web via une requête est important car cela permet de l'intégrer dans un ensemble de services et applications hétérogènes et d'interagir avec d'autres applications. Une manière de faire est de définir une interface REST (REpresentational State Transfer)qui expose les services de l'application. C'est ce que nous allons faire dans ce chapitre. 

Dans ce chapitre vous allez apprendre à définir un service REST, ce qui reste réellement simple avec Seaside. Dans un premier lieu, vous allez définir un service très simple pour comprendre le processus et
par la suite nous allons définir une petite architecture pour ajouter des services de manière plus flexible (pour gérer diverses types de format d'échange de données).

Le code est placé dans un package =='TinyBlog-Rest'== car l'utilisation de REST est optionnelle. Les tests seront dans le package =='TinyBlog-Rest-Tests'==.

!!Notions de base sur REST

REST (REpresentational State Transfer) se base sur les verbes HTTP pour décrire l'accès à des ressources HTTP. Les principaux verbes ont la signification suivante :

- GET pour lire et retourner une ressource,
- POST pour créer une nouvelle ressource,
- PUT pour modifier une ressource existante,
- DELETE pour effacer une ressource.

Les ressources sont définies à l'aide des URLs qui pointent sur une entité. Le chemin précisé dans l'URL permet de donner une signification plus précise à l'action devant être réalisée. 
- Par exemple, un ==GET /files/file.txt== signifie que le client veut accéder au contenu de l'entité nommée ==file.txt==. 
- Par contre, un ==GET /files/== précise que le client veut obtenir la liste des entités contenues dans l'entité ==files==.

Une autre notion importante est le respect des formats de données acceptés par le client et par le serveur. Lorsqu'un client REST émet une requête vers un serveur REST, il précise dans l'entête de la requête HTTP la liste des types de données qu'il est capable de gérer. Le serveur REST se doit de répondre dans un format compréhensible par le client et si cela n'est pas possible, préciser au client qu'il n'est pas capable de lui répondre. Les formats usuels sont 

- Text qui a le désavantage que le client doit connaître le format interne du fichier afin de pouvoir parser ce contenu.
- XML ou JSON qui structurent les données échangées de manière structurer. 

La réussite ou l'échec d'une opération est basée sur les codes de statut du protocole HTTP (*http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html*). Par exemple, si une opération réussit, le serveur doit répondre un code 200 (OK). De même, si une ressource demandée par le client n'existe pas, il doit retourner un code 404 (Not Found). Il est très important de respecter la signification de ces codes de statut qui permettent de mettre en place un dialogue compréhensible entre le client et le serveur.

Seaside encapsule ces code d'erreurs donc nous n'avons pas besoin de les connaitre par coeur et de les coder en dur dans le code. 


!! REST avec Seaside

Seaside offre deux façons pour définir une interface REST. La première fonctionne
en ajout de la définition d'une application web telle que TinyBlog. La seconde permet la définition d'une interface REST  lorsque que nous n'avons pas défini au préalable d'application web. 

Dans le cadre de ce tutoriel nous allons donc utiliser la première approche. Pour cela nous allons définir un filtre REST puis l'associer à notre application.

!!! Définir un filtre REST

Nous définissons une souclasse de la class ==WARestfulFilter== nommée ==TBRestfulFilter==.

[[[
WARestfulFilter subclass: #TBRestfulFilter
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'TinyBlog-REST'
]]]

 

!!!Associer un filtre à notre application
Une fois défini, nous devons associer ce filtre à notre application en utilisant le message ==addFilter:==. Nous ajoutons cette association dans la méthode d'initialisation de notre application.  

[[[
TBApplicationRootComponent class >> initialize
	"self initialize"
	| app |
	app := WAAdmin register: self asApplicationAt: 'TinyBlog'.
	app preferenceAt: #sessionClass put: TBSession.
	app
		addLibrary: JQDeploymentLibrary;
		addLibrary: JQUiDeploymentLibrary;
		addLibrary: TBSDeploymentLibrary.
	app addFilter: TBRestfulFilter new.
]]]

N'oubliez pas d'exécuter la méthode de class d'initialization de notre application, en exécutant ==TBAppllicationRootComponent initialize==. 
Ceci permet à Seaside de prendre en compte le filtre REST qui a été ajouté.


!! Premiers services REST

Nous sommes prêt pour la définition de services REST. Comme énoncé dans l'introduction de ce chapitre, nous allons définir dans un premier temps les services aussi simplement que possible pour vous montrer la manière de faire, puis dans un second temps nous mettrons en place un architecture de services. 


!!! Obtenir la liste des posts en texte

Nous définissons une méthode ==listAll==. Cette méthode retourne une chaine comprenant les postes séparés par des virgules. 
De plus, cette méthode est annotée avec trois informations supplémentaires:

- ==<get>== qui indique que cela sera une requête REST GET.
- ==<path:== qui indique le chemin auquel la ressource est disponible. 
- ==<produces:>== qui décrit la ressource. Ici nous specifions que l'application rend du texte. 

[[[
TBRestfulFilter >> listAll
	<get>
	<path: '/posts'>
	<produces: 'application/text'>
	
	^String streamContents: [ :aStream |
		TBBlog current allBlogPosts
			do: [ :each | each printOn: aStream ]
			separatedBy: [ aStream << ',' ]
	]
]]]


Notez que parfois les navigateurs webs interprètent différemment =='text/json'== de =='application/json'==.
Dans le second cas, ils offrent de récupérer un fichier au lieu d'afficher son contenu dans le navigateur.

@@note attention le printOn: the post n'est pas defini (sync avec mooc version!)

Nous ajoutons une méthode ==blog== pour éviter d'avoir de multiples références au Singleton.

[[[
TBRestfulFilter >> blog
	^ TBBlog current
]]]

!!! En JSON

Nous allons maintenant faire que notre service émette du JSON au lieu de texte non structuré.
Pour cela, nous définissons comment un post est converti en Javascript. Nous aurions pu aussi utiliser NeoJSON qui permet de traduire en JSON des objets Pharo. 

[[[
TBPost >> javascriptOn: aStream
	"Describe a post as a JSON structure"
	Dictionary new
			at: #title put: self title;
			at: #category put: self category;
			at: #date put: self  date;
			at: #text put: self  text;
			javascriptOn: aStream
]]]

Et nous faisons appel à cette nouvelle méthode. Nous modifions la méthode ==listAll== afin de prendre en compte la génération de JSON. Nous spécifions ==application/text== bien que les navigateurs acceptent ==text/text== car nous suivons la spécification officielle *http://www.ietf.org/rfc/rfc4627.txt*.

[[[
TBRestfulFilter >> listAll
  <get>
  <path: '/posts'>
  <produces: 'text/json'>

  ^ String streamContents: [ :astream |
		astream << '['.
		self blog allBlogPosts
			do: [ :each | each javascriptOn: astream]
			separatedBy: [ astream << ',' ].
		]
]]]

Nous devons alors obtenir la situation décrite par la figure *@RESTlistAll*.

+Accessing all the posts via a REST request.>file://figures/RESTlistAll.png|width=75|label=RESTlistAll+

Nous pouvons raffiner afin de pouvoir sélectionner les attributs que nous voulons convertir en introduisant la méthode ==javascriptOn: aStream attributes: aCollection==.

[[[
TBPost >> javascriptOn: aStream attributes: aCollection
	| dictionary |
	dictionary := Dictionary new.
	aCollection do: [ :each |
				dictionary at: each put: (self perform: each asSymbol) ].
	^ dictionary javascriptOn: aStream
]]]

[[[
TBPost >> javascriptOn: aStream
	^ self javascriptOn: aStream attributes: #(title category date)
]]]


!!! Recherche d'un Post

Maintenant nous allons proposer d'autres fonctionnalités comme la recherche d'un post à partir de son titre. Cet example montre comment Seaside permet d'accéder aux arguments de méthodes et de les liens aux variables d'un chemin. 

Nous définissons donc la recherche d'un post par la méthode ==postWithTitle:== de la classe ==TBlog==.

[[[
TBBlog >> postWithTitle: aString
	
	^ self allBlogPosts
			detect: [ :each | each title = aString ]
			ifNone: [ nil ]
]]]

[[[
TBRestfulFilter >> search: title
	<get>
	<path: 'search?title={title}'>
	<produces: 'application/json'>
	
   | post |
	post := self blog postWithTitle: title.
	post ifNil: [ ^ self notFound ].
   ^ String streamContents: [ :astream |
		post javascriptOn: astream attributes: #(title category date text)]
]]]

La méthode ==notFound== est la suivante:

[[[
TBRestfulFilter >> notFound
	self requestContext responseGenerator
		notFound;
		respond
]]]
Cette méthode utilise l'expression ==self requestContext== pour accéder à l'ensemble des informations relatives à la requête en cours. Ensuite nous demandons à l'objet responsable de générer une réponse d'émettre une erreur. 


+REST Error.>file://figures/RESTError.png|width=75|label=error+


Nous pouvons tester en effectuant la requête suivante :

[[[
http://localhost:8080/TinyBlog/post/Welcome%20in%20TinyBlog
]]]

+REST post.>file://figures/RestPost.png|width=75|label=post+


!!!Chercher selon une période

Une variation possible est d'offrir une recherche sur une période de parution. La méthode ==searchDateFrom:to:== et ses annotations montrent encore une fois comment 

[[[
TBRestfulFilter >> searchDateFrom: beginString to: endString
	<get>
	<path: 'search?begin={beginString}&end={endString}'>
	<produces: 'application/json'>
	
   | posts dateFrom dateTo |
	dateFrom := Date fromString: beginString.
	dateTo := Date fromString: endString.
	
	posts := self allBlogPosts
		select: [ :each | each date between: dateFrom and: dateTo ].
	
	^ String streamContents: [ :astream |
	 	astream << '['.
  		posts
			do: [ :each | each javascriptOn: astream]
			separatedBy: [ astream << ',' ].
		astream << ']'
		]
]]]

+Filtrer sur une période.>file://figures/RestWithDate.png|width=75|label=RestWithDate+


!!!Ajouter un post
@@todo Olivier peux tu me dire si c'est juste.

[[[
TBRestfulFilter >> addPost
	<post>
	<path: '/add-post'>
	
	| request title category date text post |

	request := self requestContext request. 
	"We should probably use ??? self requestContext responseGenerator"
	title := request at: #title.
	category := request at: #category.
	text := request at: #text.
	date := Date fromString: (request at: #title).
	"Of course many can go wrong here (Date could be wrong ... and a real version we should validate"
	post := TBBlog new
		title: title;
		text: text;
		category: category;
		date: date;
		yourself.
	self blog writeBlogPost: post.
	self requestContext responseGenerator
		ok;
		respond
]]]

Comme nous ne pouvons pas encoder une opération post dans un browser web, nous utilisons le client HTTP
de Pharo pour créer une requête. 

[[[
ZnClient new
	url: 'http://localhost:8080/TinyBlog/add-post';
	formAt: 'title' put: 'Exemple de POST';
	formAt: 'category' put: 'TEST';
	formAt: 'date' put: '12/23/2015';
	contents: 'Ici un super post';
	post.
]]]



!! Une architecture de services
Nous avons vu comment définir simplement des services REST avec Seaside. Nous allons maintenant définir une architecture dans laquelle de nouveaux services peuvent définis. Nous commençons par définir un petit conteneur de données pour ensuite modéliser un service REST. Notez que ce genre d'architecture ne porte réellement ces fruits que lorsque vous avez plus que quelques services. 

!!Définir un petit conteneur des données

La classe ==TBRestResponseContent== est une toute petite classe qui n'a pour finalité que de contenir les données qui seront transmises au client et ceci avant leur éventuelle conversion en fonction de la valeur du paramêtre ==accept== présent dans la requête HTTP du client.

[[[
Object subclass: #TBRestResponseContent
	instanceVariableNames: 'data'
	classVariableNames: ''
	category: 'TinyBlog-Rest'
]]]

La méthode ==initialize== permet d'initialiser la variable d'instance ==data== à l'aide d'une collection ordonnée.

[[[
TBRestResponseContent >> initialize
	super initialize.
	data := OrderedCollection new.
]]]

La méthode ==add:== permet d'ajouter des données de la réponse.

[[[
TBRestResponseContent >> add: aValue
	data add: aValue
]]]

La méthode ==toJson== assure la conversion du contenu de la réponse en une chaine de caractères au format JSON. Le framework utilisé ici est NeoJSON. D'autres formats peuvent être ajoutés tels que XML ou CSV. Il suffit d'ajouter les méthodes nécessaires pour chaque conversion.

[[[
TBRestResponseContent >> toJson
	^String streamContents: [ :stream |
		(NeoJSONWriter on: stream)
			for: Date
			customDo: [ :mapping | mapping encoder: [ :value | value asDateAndTime printString ] ];
			nextPut: data ]
]]]

@@todo On doit mettre un exemple de TBRestResponseContent

!! Modéliser un service REST
Tous les services REST fonctionnent de la même manière. Ils sont déclenchés par une commande HTTP et recoivent des informations provenant du client. Ils traitent les données et créent ensuite une réponse qui est retournée au client. Il est donc aisé de réduire le volume de code nécessaire à leur mise en place à l'aide de l'héritage. Nous allons donc créer une classe racine ==TBRestService== dont les filles définissent des services. 

La classe ==TBRestService== représente un service REST générique dont hériteront les véritables services REST de TinyBlog. Certaines méthodes sont abstraites et le travail est délégué aux sous-classes de ==TBRestService==.

La requête et la réponse (au sens HTTP du terme) sont considérées comme le contexte dans lequel le service REST s'exécute. Les données produites et formatées par le service REST doivent également être accessibles. La gestion du contexte nécessite des accesseurs pour être rendu public. Ce n'est pas le cas des données produites.

[[[
Object subclass: #TBRestService
	instanceVariableNames: 'result context'
	classVariableNames: ''
	package: 'TinyBlog-Rest'
]]]

[[[
TBRestService >> blog
	^ TBBlog current
]]]

@@note Notez que cet usage du singleton est un mauvais signe de la conception de TinyBlog car il agit comme une variable globale. Chaque partie de TinyBlog devrait savoir travailler sur un blog et le système devrait lui passer l'instance de ==TBBlog== adéquate. 


Nous définissons une méthode pour factoriser les appels au singleton. 

[[[
TBRestService >> context
	^ context
]]]

[[[
TBRestService >> context: anObject
	context := anObject
]]]

Le contexte est obtenu par Seaside avec l'expression ==self requestContext==.

Lorsqu'un service est instancié, il doit initialisé la variable d'instance ==result== à l'aide de l'instance d'un objet ayant la capacité de contenir les données destinées au client.

[[[
TBRestService >> initialize
	super initialize.
	result := TBRestResponseContent new.
]]]

Les données conservées dans la variable d'instance ==result== sont dans un format brut et seront converties juste avant leur envoi au client à l'aide de la méthode ==dataType:with:===. Le type MIME utilisé est initialisé au sein de la réponse.

[[[
TBRestService >> dataType: aDataType with: aResultSet
	self context response contentType: aDataType greaseString.
	self context respond: [ :response | response nextPutAll: aResultSet ]
]]]

@@todo Olivier je ne comprends pas pourquoi la reponse recoit les donnees brut et ce qu'est le greaseString c'est une chaine pour encoder le type?

Dans le cas de la classe ==TBRestService==, il n'y a aucun traitement des données possible et la méthode ==execute== est donc abstraite.

[[[
TBRestService >> execute
	"Hook method to fire the service logic."
	self subclassResponsibility
]]]

Un service REST est activé à l'aide de la méthode ==applyServiceWithContext:== invoquée par le serveur (instance de ==TBRestfulServer==) lors de la création du service. Elle initialise le contexte d'exécution HTTP et lance le traitement demandé.

[[[
TBRestService >> applyServiceWithContext: aRequestContext
	self context: aRequestContext.
	self execute.
]]]

!!!! Exemple de service
Un exemple d'utilisation est par exemple le service 'ListAll'. La méthode ==listAll== de filtre crée une instance du service ==TBRestServiceListAll== et lui passe le contexte de la requête courante. 

[[[
TBRestfulFilter >> listAll
	<get>
	<produces: 'application/json'>

	TBRestServiceListAll new applyServiceWithContext: self requestContext
]]]





!! Implémenter les services REST de TinyBlog

L'objectif est d'implémenter quatre services REST au sein de TinyBlog: obtenir la liste des posts, 

!!!Obtenir la liste des posts

Le premier service proposé sera destiné à récupérer la liste des posts. Il s'agit d'une opération de lecture et elle utilisera donc le verbe GET du protocole HTTP. La réponse sera produite au format JSON (javascript Object Notation).

!!!!Définir le point d'entrée

La méthode ==listAll== est marquée comme étant un point d'entrée REST à l'aide des annotations ==<get>== et ==<produces:>==.

Si le client interroge le serveur à l'aide de l'URL ==http://localhost:8080/TinyBlog/listAll==, la méthode ==listAll== est appelée. Celle-ci retourne les données selon le type MIME (Multipurpose Internet Mail Extensions) spécifié par l'annotation ==<produces:>==.

[[[
TBRestfulFilter >> listAll
	<get>
	<produces: 'application/json'>

	TBRestServiceListAll new applyServiceWithContext: self requestContext
]]]

Afin de faciliter l'utilisation d'un service REST, il est préférable de préciser finement la ou les ressources manipulées. Dans le cas présent, le nom de la méthode ==listAll== ne précise pas au client quelles sont les ressources qui seront retournées. Certes, nous savons que ce sont les posts mais après tout, cela pourrait également être les rubriques. Il faut donc être plus explicite dans la formalisation de l'URL afin de lui donner une réelle signification sémantique. C'est d'ailleur la principale difficulté dans la mise en place des services REST. La meilleure méthode est de faire simple et de s'efforcer d'être cohérent dans la désignation des chemins d'accès aux ressources. Si nous voulons la liste des posts, il nous suffit de demander la liste des posts. L'URL doit donc avoir la forme suivante:

[[
http://localhost:8080/TinyBlog/Posts
]]

Pour obtenir cela, nous pouvons renommer la méthode ==listAll== ou préciser le chemin d'accès qui appellera cette méthode. Cette seconde approche est plus souple puisqu'elle permet de réorganiser les appels aux services REST sans nécessiter de refactoriser le code.

[[[
TBRestfulFilter >> listAll
	<get>
	<path: '/posts'>
	<produces: 'application/json'>

	TBRestServiceListAll new applyServiceWithContext: (self requestContext)
]]]

!!!!Construire le service listAll

L'implémentation de ce service tient sur deux lignes de code. Le service ==TBRestServiceListAll== hérite du service ==TBRestService==. Il suffit d'implémenter la méthode ==execute== qui a la responsabilité de lire les posts disponibles dans la base et de déclencher leur envoi au client.

[[[
TBRestServiceListAll >> execute
	self blog allBlogPosts do: [ :each | result add: each asDictionary ].
	self dataType: WAMimeType applicationJson with: result toJson
]]]

!!!Recherche d'un Post
Maintenant nous allons proposer d'autres fonctionnalités en commençant par la recherche d'un post.
Nous définissons donc cette fonctionnalité dans la classe ==TBRestfulFilter==. La méthode ==search:== reçoit une chaine de caractères comme unique argument. L'emplacement du titre recherché au sein de l'URL est entouré à l'aide de crochets et le nom de l'argument doit être identique à celui du paramêtre reçu par la méthode. La méthode instancie alors le service ==TBRestServiceSearch== et lui transmet la valeur de l'argument avant de déclencher le traitement.

[[[
TBRestfulFilter >> search: aTitle
	<get>
	<path: '/posts/search?title={aTitle}'>
	<produces: 'application/json'>

	TBRestServiceSearch new
		title: aTitle;
		applyServiceWithContext: self requestContext
]]]

L'implémentation du service ===TBRestServiceSearch== nécessite une variable d'instance ==title== disposant d'accesseurs.

[[[
TBRestService subclass: #TBRestServiceSearch
	instanceVariableNames: 'title'
	classVariableNames: ''
	category: 'TinyBlog-Rest'
]]]

[[[
TBRestServiceSearch >> TBRestService >> title
	^ title

TBRestServiceSearch >> TBRestService >> title: anObject
	title := anObject
]]]

La méthode ==execute== recherche un post ayant un titre identique à la chaine de caractères. Si aucun post ne correspond, c'est le code d'erreur HTTP 404 (Not found) qui est retourné au client.

[[[
TBRestServiceSearch >> execute
	| post |
	post := self blog postWithTitle: title urlDecoded.
	post
		ifNotNil: [ result add: (post asDictionary) ]
		ifNil: [ self context response notFound ].
	self dataType: WAMimeType applicationJson with: result toJson
]]]

Si nous essayons ce code, un problème apparaît rapidement. En effet, cet outil de recherche ne fonctionne que sur des posts dont le titre ne contient qu'une seule chaine de caractères et échoue sur les titres comportant des espaces.

+REST Error.>file://figures/RESTError.png|width=75|label=error+

La raison est que HTTP considère que l'espace fait partie des caractères spéciaux et donc le client encode celui-ci à l'aide de la valeur %20.

[[[
http://localhost:8080/TinyBlog/posts/search?title=Welcome%20in%20TinyBlog
]]]

Coté serveur, la chaine reçue ne correspond donc pas au vériable titre du post recherché. Il faut donc convertir la chaine de caractères avant de lancer la recherche. Pour cela, il est nécessaire de modifier le code de la méthode ==search:== pour utiliser la méthode ==urlDecoded==.

[[[
TBRestServiceSearch >> execute
	| post |
	post := self blog postWithTitle: title urlDecoded.
	post
		ifNotNil: [ result add: post asDictionary ]
		ifNil: [ self context response notFound ].
	self dataType: WAMimeType applicationJson with: result toJson
]]]

Nous vous suggérons de créer une méthode ==setResultAsJson:== qui factorise entre les services la dernière expression de la méthode execute. 

!!!Chercher selon une période

Une autre méthode intéressante pour lancer une recherche consiste à extraire l'ensemble des posts créés entre deux dates qui définissent ainsi une période. Pour cette raison, la méthode ==searchDateFrom:to:== reçoit deux arguments qui sont également définis dans la syntaxe de l'URL.

[[[
WARestfulFilter >> searchDateFrom: beginString to: endString
	<get>
	<path: '/posts/search?begin={beginString}&end={endString}'>
	<produces: 'application/json'>
	
	TBRestServiceSearchDate new
		from: beginString;
		to: endString;
		applyServiceWithContext: self requestContext
]]]

+Avec des dates.>file://figures/RestWithDate.png|width=75|label=RestWithDate+

[[[
http://localhost:8080/TinyBlog/posts/search?begin=2010-1-1&end=2016-12-31
]]]

Le service TBRestServiceSearchDate nécessite donc deux variables d'instances disposant d'accesseurs.

[[[
TBRestService subclass: #TBRestServiceSearchDate
	instanceVariableNames: 'from to'
	classVariableNames: ''
	category: 'TinyBlog-Rest'
]]]

[[[
TBRestServiceSearchDate >> from
	^ from
]]]

[[[
TBRestServiceSearchDate >> from: anObject
	from := anObject
]]]
[[[
TBRestServiceSearchDate >> to
	^ to
]]]
[[[
TBRestServiceSearchDate >> to: anObject
	to := anObject
]]]

La méthode ==execute== utilise ces deux dates pour rechercher les posts correspondants et les retourner au client.

[[[
TBRestServiceSearchDate >> execute

	| posts dateFrom dateTo |
		
	dateFrom := Date fromString: self from.
	dateTo := Date fromString: self to.

	posts := self blog allBlogPosts
		select: [  :each | each date between: dateFrom and: dateTo ].
	posts do: [ :each | result add: (each asDictionary) ].
	self dataType: WAMimeType applicationJson with: result toJson
]]]

!!!Ajouter un post

Voyons maintenant comment ajouter un nouveau post à notre blog à l'aide de REST. Etant donné qu'il s'agit ici de la création d'une nouvelle ressource, nous devons utiliser le verbe POST pour décrire l'action. Notre service web accepte en entrée des données encodées au format JSON. C'est l'annotation <consumes:> qui permet d'indiquer à Seaside/Rest le type MIME attendu en entrée.

[[[
addPost
	<post>
	<consumes: '*/json'>
	<path: '/posts/add'>
	
	TBRestServiceAddPost new
		applyServiceWithContext: self requestContext
]]]

Les données reçues avec la méthode HTTP POST ne sont pas transmises lors de l'instanciation de la classe ==TBRestServiceAddPost== car elles sont contenues au sein du contexte de la requête du client.

L'ajout d'un post est implémenté à l'aide du service TBRestServiceAddPost.

[[[
TBRestService subclass: #TBRestServiceAddPost
	instanceVariableNames: ''
	classVariableNames: ''
	category: 'TinyBlog-Rest'
]]]

La méthode ==execute== récupère le contenu du post dans la requête du client et extrait les informations contenues dans la chaine formatée en JSON. Le post est ensuite enregistré dans la base de données. Une gestion d'erreur, basée sur une exception, permet de détecter un problème lors du traitement. En cas d'echec, un code d'erreur HTTP 404 est transmis au client.

[[[
TBRestServiceAddPost >> execute
	| post |
	[
		post := NeoJSONReader fromString: self context request rawBody.
		self blog writeBlogPost: (TBPost title: (post at: #title) text: (post at: #text) category: (post at: #category)).
	] on: Error do: [ self context request badRequest ].
	self dataType: WAMimeType textPlain with: ''
]]]

@@todo olivier pourquoi on ne rend pas une reponse disant que tout s'est bien passé?

Le code Pharo suivant vous permet de tester le bon fonctionnement du service.

[[[
ZnClient new
	url: 'http://localhost:8080/TinyBlog/posts/add';
	formAt: 'title' put: 'Exemple de POST';
	formAt: 'category' put: 'TEST';
	formAt: 'date' put: '12/23/2015';
	contents: 'Ici un super post';
	post.
]]]

La même logique doit être mise en place pour modifier un post. 

!! Conclusion

Dans ce chapitre, vous avez déployez une première interface web pour votre application. Seaside rend cette définition assez simple. Nous avons mis en place un exemple d'architecture pour définir des services web de manière modulaire. 