% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!Préparation de sauvegarde extérieure avec Voyage
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Avoir un modèle d'objets en mémoire fonctionne bien, et sauvegarder l'image Pharo sauve aussi ces objets. Toutefois, il est préférable de pouvoir sauver les objets dans une base de données extérieure. Voyage permet de sauver les objets dans une base de donnée Mongo. 
C'est ce que nous allons voir. Dans un premier temps, nous allons utiliser la capacité de Voyage à simuler une base extérieure. Ceci est très pratique en phase de développement. Dans un second temps, nous installerons une base de données Mongo et nous y accéderons à travers Voyage. 

!!Sauvegarde d'un blog

La première méthode à modifier est la méthode ==writeBlogPost:== pour sauver le blog.

[[[
TBBlog >> writeBlogPost: aPost
   "Write the blog post in database"
   posts add: aPost.
   self save 
]]]

Si vous essayez d'exécuter le test suivant, vous allez voir qu'il ne passe pas car le système rend 0 au lieu de 2 instances de posts.

[[[
TBBlogTest >> testAddBlogPost
   blog writeBlogPost: post.
   self assert: blog size equals: 2
]]]

Pourquoi cela arrive-t-il? En fait nous n'avons jamais dit quels objets devaient être sauvés dans la base de données.

La méthode de classe ==isVoyageRoot== permet de déclarer que les objets de la classe ==TBBlog== doivent être sauvés dans la base en tant qu'objets racines.

[[[
TBBlog class >> isVoyageRoot
   "Indicates that instances of this class are top level documents in noSQL databases"
   ^ true
]]]

De plus nous devons soit créer une connexion sur une base de données réelle soit travailler en mémoire. C'est cette dernière option que nous choisissons pour l'instant en utilisant cette expression. 

[[[
VOMemoryRepository new enableSingleton. 
]]]

Le message ==enableSingleton== indique à Voyage que nous n'utilisons qu'une seule base de donnée ce qui nous permet de ne pas avoir à préciser avec laquelle nous travaillons. 


Nous définissons une méthode ==initializeMongo== dont le rôle est d'initialiser correctement la base. 

@@todo Luc: vérifier le code réel de initializeMongo et reset

[[[
TBBlog class >> initializeMongo
   VOMemoryRepository new enableSingleton
]]]
Ici nous n'avons pas besoin de stocker la base dans une variable d'instance car nous n'avons qu'une seule base de donnée en mode singleton. 



Nous redéfinissons la méthode ==reset== et la méthode ==initialize== pour nous assurer que l'endroit où la base est sauvée est réinitialisé lorsque l'on charge le code. 

La méthode ==reset== réinitialize la base. 
[[[
TBBlog class >> reset
      "self reset"
      self initializeMongo
      
TBBlog class >> initialize
      self initializeMongo
   
]]]

Le cas de de la méthode ==current== est plus délicat. Avant l'utilisation de Mongo, nous avions un singleton tout simple. Cependant utiliser un Singleton 
ne fonctionne plus car imaginons que nous ayons sauvé notre blog et que le serveur s'éteigne par accident ou que nous rechargions une nouvelle version 
du code. Ceci conduirait à une réinitialisation et création d'une nouvelle instance. Nous pouvons donc nous retrouver avec une instance différente de celle sauvée. 

Nous redéfinissons ==current== de manière à faire une requête dans la base. Comme pour le moment nous ne gérons qu'un blog il nous suffit de faire ==self selectOne: [ :each | true ]== ou ==self selectAll anyOne==. Nous nous assurons de créer une nouvelle instance et la sauvegarder si aucune instance n'existe dans la base. 

[[[
TBBlog class >> current
   ^ self selectAll 
			ifNotEmpty: [ :x | x anyOne ]
			ifEmpty: [ self new save ]
]]]

Nous pouvons aussi modifier la méthode ==remove== afin de sauver le nouvel état d'un blog. 

[[[
TBBlog >> remove
   posts := OrderedCollection new.
   super remove.
]]]


!!Utilisation de la base

Alors même que la base est en mémoire et bien que nous pouvons accéder au blog en utilisant le singleton de la classe ==TBBlog==,
nous allons montrer l'API offerte par Voyage. C'est la même API que nous pourrons utiliser pour accéder à une base mongo.

Nous créons des posts dans 
[[[
TBBlog createDemoPosts.
]]]

Nous pouvons compter le nombre de blog sauvés. ==count== fait partie de l'API directe de Voyage. Ici nous obtenons ce qui est normal puisque le blog est implémenté comme un singleton. 

[[[
TBBlog count
>1
]]]

De la même manière, nous pouvons sélectionner tous les objets sauvés. 

[[[
TBBlog selectAll
]]]


Vous pouvez voir l'API de Voyage en parcourant
- la classe ==Class==, et 
- la classe ==VORepository== qui est la racine d'héritage des bases de données en mémoire ou extérieur.

Ces queries sont plus pertinentes quand on a plus d'objets comme lorsque nous ajouterons plusieurs blogs.

!!Changement de TBBlog

Notez qu'à chaque fois que vous décidez de changer soit en ajoutant une nouvelle racine d'objets ou soit lors d'une modification de la définition d'une classe racine (ajout, retrait, modification d'attribut) il est capital de réinitializer Voyage car Voyage maintient un cache. 

La réinitialisation se fait comme suit:

[[[
	VOMongoRepository current reset
]]]

@@todo Luc: pourquoi ce bout code n'est pas intégré dans ==TBBlog class>>reset==?


!!Si nous devions sauvegarder les posts

Cette section n'est pas à implémenter et elle est juste donnée à titre d'exemple. Nous pourrions aussi définir qu'un post est un élément qui peut être sauvegardé de manière autonome. Cela  permettrait de sauver des posts de manière indépendante d'un blog. Si nous représentions les commentaires d'un post, nous ne les déclarerions pas non plus comme racine car sauver ou manipuler un commentaire en dehors du contexte de son post ne fait pas beaucoup de sens. 

Déclarer les posts comme racine aurait pour conséquence que les blogs sauvés aurait une référence à un objet TBPost alors que sans cela le post est inclus dans la sauvegarde du blog. Notez aussi que lorsqu'un post n'est pas un root, vous n'avez pas la certitude d'unicité de celui-ci lors du chargement depuis la base. En effet, lors du chargement (et ce qui peut être contraire à la situation du graphe d'objet avant la sauvegarde) un post n'est alors pas partagé entre deux instances de blogs. 
Si avant la sauvegarde en base un post était partagé, après le chargement depuis la base, ce post sera dupliqué car recréé à partir de la définition du blog (et le blog contient alors complètement le post).

Si vous désirez qu'un post soit partagé et unique entre plusieurs instances de blog, alors la classe TBPost doit être déclarée une racine dans la base. 
Lorsque la classe TBPost est déclarée comme une racine, les posts sont sauvés comme des entités autonomes et les instances de TBBlog feront des références sur ces entités au lieu que leurs définitions soient incluses dans celle des blogs. Cela a pour effet qu'un post donné devient unique et partageable via une référence depuis le blog. 

Pour cela on nous définirions les méthodes suivantes:

[[[
TBPost class >> isVoyageRoot
   "Indicates that instances of this class are top level document in noSQL databases"
   ^ true
]]]

[[[
TBBlog >> writeBlogPost: aPost
   "Write the blog post in database"
   posts add: aPost.
   aPost save. 
   self save 
]]]


[[[
TBBlog >> remove
   posts do: [ :each | each remove ].
   posts := OrderedCollection new.
   super remove.
]]]

Ici dans la méthode ==remove== nous enlevons chaque posts puis nous remettons à jour la collection et nous enlevons le blog lui-même.

Encore une fois, notez qu'à chaque fois que vous décidez de changer la définition d'une classe racine ou que vous ajoutez une nouvelle classe racine, il est capital de réinitialiser Voyage pour qu'il invalide le cache qu'il maintient. 

Pour cela exécutez l'expression suivante.
[[[
	VOMongoRepository current reset
]]]

!!!D'autres requêtes


Nous illustrons maintenant comment nous pouvons faire des requêtes sur la base en mémoire en incluant les posts. 

[[[
   TBBlog reset.
   TBBlog current allBlogPosts size.
   > 0

   TBBlog createDemoPosts.
   TBBlog current allBlogPosts size.
   > 5

   "Via repository"
   TBBlog count.
   > 1 
   TBPost count.
   > 5

   TBPost selectAll.
   TBPost selectAll do: [:each | Transcript show: each text; cr]

   TBBlog current remove.
   TBPost removeAll.
   TBPost count.
   > 0
]]]

Nous allons maintenant utiliser une base Mongo externe à Pharo. 
